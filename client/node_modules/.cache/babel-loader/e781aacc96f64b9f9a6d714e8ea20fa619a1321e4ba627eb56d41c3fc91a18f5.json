{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React_Projects\\\\event-platform\\\\client\\\\src\\\\components\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import RoundsDisplay from \"./RoundsDisplay\";\n// import EventsList from \"./EventsList\"; \n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [showRounds, setShowRounds] = useState(false);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [competitorName, setCompetitorName] = useState(\"\");\n//   const [category, setCategory] = useState(categories[0]);\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\n//   const [boardType, setBoardType] = useState(categories[0]);\n//   const [gender, setGender] = useState(subCategories[0]);\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n//   const [judgeName, setJudgeName] = useState(\"\");\n//   const [createdBy, setCreatedBy] = useState(1);\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   // const fetchEvents = async () => {\n//   //   try {\n//   //     const response = await axios.get(\n//   //       \"http://localhost:3000/event-admin/get-events\"\n//   //     );\n//   //     setEvents(response.data);\n//   //   } catch (error) {\n//   //     console.error(\"Error fetching events:\", error);\n//   //   }\n//   // };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n//       );\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\n//       );\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//         created_by: createdBy,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-event/${id}`\n//       );\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleAddCompetitor = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n//         name: competitorName,\n//         event_id: eventId,\n//         category,\n//         sub_category: subCategory,\n//         board_type: boardType,\n//         gender,\n//         age_category: ageCategory,\n//       });\n//       alert(\"Competitor added successfully\");\n//       setCompetitorName(\"\");\n//       setCategory(categories[0]);\n//       setSubCategory(subCategories[0]);\n//       setBoardType(categories[0]);\n//       setGender(subCategories[0]);\n//       setAgeCategory(ageCategories[0]);\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error adding competitor:\", error);\n//       alert(\"Error adding competitor\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\n//       );\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleAddJudge = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n//         name: judgeName,\n//         event_id: eventId,\n//       });\n//       alert(\"Judge added successfully\");\n//       setJudgeName(\"\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error adding judge:\", error);\n//       alert(\"Error adding judge\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\n//       );\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       await axios.post(\n//         \"http://localhost:3000/event-admin/save-rounds\",\n//         {\n//           eventId,\n//           rounds: rounds.map((round) => ({\n//             name: round.name,\n//             category: round.category,\n//             sub_category: round.sub_category,\n//             board_type: round.board_type,\n//             gender: round.gender,\n//             age_category: round.age_category,\n//             heats: round.heats.map((heat) => ({\n//               heat_name: heat.name,\n//               competitors: heat.competitors.map((competitor) => ({\n//                 id: competitor.id,\n//                 name: competitor.name,\n//               })),\n//             })),\n//           })),\n//         }\n//       );\n//       alert(\"Rounds saved successfully\");\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:3000/event-admin/generate-rounds-pdf`,\n//         {\n//           eventId,\n//           rounds\n//         },\n//         { responseType: \"blob\" }\n//       );\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement(\"a\");\n//       link.href = url;\n//       link.setAttribute(\"download\", \"rounds.pdf\");\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       alert(\"Error generating PDF\");\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     if (!eventId) {\n//       alert(\"Please select an event first.\");\n//       return;\n//     }\n\n//     const competitorsByCategory = {};\n\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     const newRounds = [];\n\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       const heats = [];\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         heats.push({\n//           id: `heat-${heats.length + 1}`,\n//           name: `Heat ${heats.length + 1}`,\n//           competitors: heatCompetitors,\n//         });\n//       }\n\n//       newRounds.push({\n//         id: `round-${newRounds.length + 1}`,\n//         name: `Round 1 (${key})`,\n//         category: competitorsList[0].category,\n//         sub_category: competitorsList[0].sub_category,\n//         board_type: competitorsList[0].board_type,\n//         gender: competitorsList[0].gender,\n//         age_category: competitorsList[0].age_category,\n//         heats,\n//       });\n//     });\n\n//     setRounds(newRounds);\n//     console.log(\"Created rounds:\", newRounds);\n//   };\n\n//   const handleDragEnd = async (result) => {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const sourceHeatId = result.source.droppableId.split('-')[1];\n//     const destinationHeatId = result.destination.droppableId.split('-')[1];\n\n//     const sourceRoundIndex = rounds.findIndex((round) =>\n//       round.heats.some((heat) => heat.id === parseInt(sourceHeatId))\n//     );\n//     const destinationRoundIndex = rounds.findIndex((round) =>\n//       round.heats.some((heat) => heat.id === parseInt(destinationHeatId))\n//     );\n\n//     if (sourceRoundIndex === -1 || destinationRoundIndex === -1) {\n//       return;\n//     }\n\n//     const sourceRound = rounds[sourceRoundIndex];\n//     const destinationRound = rounds[destinationRoundIndex];\n\n//     const sourceHeat = sourceRound.heats.find(\n//       (heat) => heat.id === parseInt(sourceHeatId)\n//     );\n//     const destinationHeat = destinationRound.heats.find(\n//       (heat) => heat.id === parseInt(destinationHeatId)\n//     );\n\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n//     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n\n//     const updatedRounds = rounds.map((round) => {\n//       if (round.id === sourceRound.id) {\n//         return sourceRound;\n//       }\n//       if (round.id === destinationRound.id) {\n//         return destinationRound;\n//       }\n//       return round;\n//     });\n\n//     setRounds(updatedRounds);\n\n//     // Send the update to the backend\n//     try {\n//       await axios.post('http://localhost:3000/event-admin/move-competitor', {\n//         fromHeatId: sourceHeatId,\n//         toHeatId: destinationHeatId,\n//         competitorId: movedItem.id,\n//       });\n//     } catch (error) {\n//       console.error('Error moving competitor:', error);\n//       // Optionally, revert the state change if the backend update fails\n//       setRounds(rounds);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h2>Manage Events</h2>\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//         <div className=\"form-group\">\n//           <label>Event Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Date:</label>\n//           <input\n//             type=\"date\"\n//             className=\"form-control\"\n//             value={date}\n//             onChange={(e) => setDate(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Location:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={location}\n//             onChange={(e) => setLocation(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//           Create Event\n//         </button>\n//       </form>\n\n//       <h3>Existing Events</h3>\n//       {events.length === 0 ? (\n//         <p>No events available. Please create an event.</p>\n//       ) : (\n//         <ul className=\"list-group\">\n//           {events.map((event) => (\n//             <li\n//               key={event.id}\n//               className={`list-group-item d-flex justify-content-between align-items-center ${\n//                 eventId === event.id ? \"active\" : \"\"\n//               }`}\n//               style={{ cursor: \"pointer\" }}\n//               onClick={() => {\n//                 fetchCompetitors(event.id, event.name);\n//                 fetchJudges(event.id);\n//               }}\n//             >\n//               {event.name}\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() => handleDeleteEvent(event.id)}\n//               >\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {eventId ? (\n//         <>\n//           <h3>Manage Competitors for {selectedEventName}</h3>\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Competitor Name:</label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 value={competitorName}\n//                 onChange={(e) => setCompetitorName(e.target.value)}\n//                 required\n//               />\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Category</option>\n//                 {categories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Sub Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={subCategory}\n//                 onChange={(e) => setSubCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Sub Category</option>\n//                 {subCategories.map((subCat) => (\n//                   <option key={subCat} value={subCat}>\n//                     {subCat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Board Type:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={boardType}\n//                 onChange={(e) => setBoardType(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Board Type</option>\n//                 {categories.map((type) => (\n//                   <option key={type} value={type}>\n//                     {type}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Gender:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={gender}\n//                 onChange={(e) => setGender(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Gender</option>\n//                 {subCategories.map((g) => (\n//                   <option key={g} value={g}>\n//                     {g}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Age Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={ageCategory}\n//                 onChange={(e) => setAgeCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Age Category</option>\n//                 {ageCategories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Competitor\n//             </button>\n//           </form>\n\n//           <h3>Existing Competitors</h3>\n//           <ul className=\"list-group\">\n//             {competitors.map((competitor) => (\n//               <li\n//                 key={competitor.id}\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n//               >\n//                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\n//                 {competitor.category}, Sub Category: {competitor.sub_category},\n//                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\n//                 , Age Category: {competitor.age_category})\n//                 <button\n//                   className=\"btn btn-danger\"\n//                   onClick={() => handleDeleteCompetitor(competitor.id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Manage Judges for {selectedEventName}</h3>\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Judge Name:</label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 value={judgeName}\n//                 onChange={(e) => setJudgeName(e.target.value)}\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Judge\n//             </button>\n//           </form>\n\n//           <h3>Existing Judges</h3>\n//           <ul className=\"list-group\">\n//             {judges.map((judge) => (\n//               <li\n//                 key={judge.id}\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n//               >\n//                 {judge.name} (Event: {selectedEventName})\n//                 <button\n//                   className=\"btn btn-danger\"\n//                   onClick={() => handleDeleteJudge(judge.id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Rounds</h3>\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//             Create Rounds\n//           </button>\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//             Save Rounds\n//           </button>\n//           {/* <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\n//             Show All Rounds\n//           </button> */}\n\n//           <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\n//             Generate PDF\n//           </button>\n\n//           <RoundsDisplay eventId={eventId} />\n\n//           <DragDropContext onDragEnd={handleDragEnd}>\n//             {rounds.map((round) => (\n//               <Droppable droppableId={round.id.toString()} key={round.id}>\n//                 {(provided) => (\n//                   <div\n//                     ref={provided.innerRef}\n//                     {...provided.droppableProps}\n//                     className=\"mb-4\"\n//                   >\n//                     <h4>{round.name}</h4>\n//                     {round.heats.map((heat, index) => (\n//                       <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\n//                         {(provided) => (\n//                           <div\n//                             ref={provided.innerRef}\n//                             {...provided.droppableProps}\n//                             className=\"list-group mb-3\"\n//                           >\n//                             <h5>Heat {index + 1}</h5>\n//                             {heat.competitors.map((competitor, idx) => (\n//                               <Draggable\n//                                 key={competitor.id}\n//                                 draggableId={competitor.id.toString()}\n//                                 index={idx}\n//                               >\n//                                 {(provided) => (\n//                                   <div\n//                                     ref={provided.innerRef}\n//                                     {...provided.draggableProps}\n//                                     {...provided.dragHandleProps}\n//                                     className=\"list-group-item\"\n//                                   >\n//                                     {competitor.name}\n//                                   </div>\n//                                 )}\n//                               </Draggable>\n//                             ))}\n//                             {provided.placeholder}\n//                           </div>\n//                         )}\n//                       </Droppable>\n//                     ))}\n//                     {provided.placeholder}\n//                   </div>\n//                 )}\n//               </Droppable>\n//             ))}\n//           </DragDropContext>\n\n//           {showRounds && (\n//             <>\n//               <h3>Rounds for {selectedEventName}</h3>\n//               {rounds.map((round, roundIndex) => (\n//                 <div key={roundIndex} className=\"mb-4\">\n//                   <h4>\n//                     Round {roundIndex + 1} ({round.category}, {round.sub_category}, {round.board_type}, {round.gender}, {round.age_category})\n//                   </h4>\n//                   {round.heats.map((heat, heatIndex) => (\n//                     <div key={heatIndex} className=\"mb-2\">\n//                       <h5>Heat {heatIndex + 1}</h5>\n//                       <ul className=\"list-group\">\n//                         {heat.competitors.map((competitor, competitorIndex) => (\n//                           <li key={competitorIndex} className=\"list-group-item\">\n//                             {competitor.name}\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ))}\n//             </>\n//           )}\n//         </>\n//       ) : (\n//         <p className=\"mt-4\">\n//           Please select an event to manage competitors and judges.\n//         </p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EventManagement;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport RoundsDisplay from \"./RoundsDisplay\";\nimport EventsList from \"/EventList\";\nimport CompetitorsList from \"./CompetitorsList\";\nimport AddCompetitorForm from \"./AddCompetitorForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst categories = [\"Shortboard\", \"Longboard\"];\nconst subCategories = [\"Men\", \"Women\"];\nconst ageCategories = [\"Open\", \"Sub12\", \"Sub14\", \"Sub18\", \"Professional\", \"+40\", \"+45\", \"+50\", \"+60\", \"+65\", \"+70\"];\nconst EventManagement = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [competitors, setCompetitors] = useState([]);\n  const [judges, setJudges] = useState([]);\n  const [rounds, setRounds] = useState([]);\n  const [showRounds, setShowRounds] = useState(false);\n  const [eventId, setEventId] = useState(null);\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [createdBy, setCreatedBy] = useState(1);\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n  const fetchCompetitors = async (eventId, eventName) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\n      setCompetitors(response.data);\n      setEventId(eventId);\n      setSelectedEventName(eventName);\n    } catch (error) {\n      console.error(\"Error fetching competitors:\", error);\n    }\n  };\n  const fetchJudges = async eventId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\n      setJudges(response.data);\n    } catch (error) {\n      console.error(\"Error fetching judges:\", error);\n    }\n  };\n  const handleCreateEvent = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n        name,\n        date,\n        location,\n        created_by: createdBy\n      });\n      alert(\"Event created successfully\");\n      setName(\"\");\n      setDate(\"\");\n      setLocation(\"\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      alert(\"Error creating event\");\n    }\n  };\n  const handleDeleteEvent = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\n      alert(\"Event deleted successfully\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      alert(\"Error deleting event\");\n    }\n  };\n  const handleDeleteCompetitor = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\n      alert(\"Competitor deleted successfully\");\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error deleting competitor:\", error);\n      alert(\"Error deleting competitor\");\n    }\n  };\n  const handleAddJudge = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n        name: judgeName,\n        event_id: eventId\n      });\n      alert(\"Judge added successfully\");\n      setJudgeName(\"\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error adding judge:\", error);\n      alert(\"Error adding judge\");\n    }\n  };\n  const handleDeleteJudge = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\n      alert(\"Judge deleted successfully\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error deleting judge:\", error);\n      alert(\"Error deleting judge\");\n    }\n  };\n  const handleSaveRounds = async () => {\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\n        eventId,\n        rounds: rounds.map(round => ({\n          name: round.name,\n          category: round.category,\n          sub_category: round.sub_category,\n          board_type: round.board_type,\n          gender: round.gender,\n          age_category: round.age_category,\n          heats: round.heats.map(heat => ({\n            heat_name: heat.name,\n            competitors: heat.competitors.map(competitor => ({\n              id: competitor.id,\n              name: competitor.name\n            }))\n          }))\n        }))\n      });\n      alert(\"Rounds saved successfully\");\n    } catch (error) {\n      console.error(\"Error saving rounds:\", error);\n      alert(\"Error saving rounds\");\n    }\n  };\n  const handleGeneratePDF = async () => {\n    try {\n      const response = await axios.post(`http://localhost:3000/event-admin/generate-rounds-pdf`, {\n        eventId,\n        rounds\n      }, {\n        responseType: \"blob\"\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"rounds.pdf\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      alert(\"Error generating PDF\");\n    }\n  };\n  const handleCreateRounds = () => {\n    if (!eventId) {\n      alert(\"Please select an event first.\");\n      return;\n    }\n    const competitorsByCategory = {};\n    competitors.forEach(competitor => {\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n      if (!competitorsByCategory[key]) {\n        competitorsByCategory[key] = [];\n      }\n      competitorsByCategory[key].push(competitor);\n    });\n    const newRounds = [];\n    Object.keys(competitorsByCategory).forEach(key => {\n      const competitorsList = competitorsByCategory[key];\n      const heats = [];\n      for (let i = 0; i < competitorsList.length; i += 4) {\n        const heatCompetitors = competitorsList.slice(i, i + 4);\n        heats.push({\n          id: `heat-${heats.length + 1}`,\n          name: `Heat ${heats.length + 1}`,\n          competitors: heatCompetitors\n        });\n      }\n      newRounds.push({\n        id: `round-${newRounds.length + 1}`,\n        name: `Round 1 (${key})`,\n        category: competitorsList[0].category,\n        sub_category: competitorsList[0].sub_category,\n        board_type: competitorsList[0].board_type,\n        gender: competitorsList[0].gender,\n        age_category: competitorsList[0].age_category,\n        heats\n      });\n    });\n    setRounds(newRounds);\n    console.log(\"Created rounds:\", newRounds);\n  };\n  const handleDragEnd = async result => {\n    if (!result.destination) {\n      return;\n    }\n    const sourceHeatId = result.source.droppableId.split(\"-\")[1];\n    const destinationHeatId = result.destination.droppableId.split(\"-\")[1];\n    const sourceRoundIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === parseInt(sourceHeatId)));\n    const destinationRoundIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === parseInt(destinationHeatId)));\n    if (sourceRoundIndex === -1 || destinationRoundIndex === -1) {\n      return;\n    }\n    const sourceRound = rounds[sourceRoundIndex];\n    const destinationRound = rounds[destinationRoundIndex];\n    const sourceHeat = sourceRound.heats.find(heat => heat.id === parseInt(sourceHeatId));\n    const destinationHeat = destinationRound.heats.find(heat => heat.id === parseInt(destinationHeatId));\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n    destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n    const updatedRounds = rounds.map(round => {\n      if (round.id === sourceRound.id) {\n        return sourceRound;\n      }\n      if (round.id === destinationRound.id) {\n        return destinationRound;\n      }\n      return round;\n    });\n    setRounds(updatedRounds);\n\n    // Send the update to the backend\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/move-competitor\", {\n        fromHeatId: sourceHeatId,\n        toHeatId: destinationHeatId,\n        competitorId: movedItem.id\n      });\n    } catch (error) {\n      console.error(\"Error moving competitor:\", error);\n      // Optionally, revert the state change if the backend update fails\n      setRounds(rounds);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateEvent,\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: location,\n          onChange: e => setLocation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Existing Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 7\n    }, this), events.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No events available. Please create an event.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events,\n      fetchCompetitors: fetchCompetitors,\n      fetchJudges: fetchJudges,\n      handleDeleteEvent: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 9\n    }, this), eventId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Competitors for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddCompetitorForm, {\n        eventId: eventId,\n        fetchCompetitors: fetchCompetitors,\n        selectedEventName: selectedEventName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CompetitorsList, {\n        competitors: competitors,\n        selectedEventName: selectedEventName,\n        handleDeleteCompetitor: handleDeleteCompetitor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Judges for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddJudge,\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Judge Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1055,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: judgeName,\n            onChange: e => setJudgeName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Add Judge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Judges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: judges.map(judge => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item d-flex justify-content-between align-items-center\",\n          children: [judge.name, \" (Event: \", selectedEventName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => handleDeleteJudge(judge.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1077,\n            columnNumber: 17\n          }, this)]\n        }, judge.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1070,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mb-0\",\n        onClick: handleCreateRounds,\n        children: \"Create Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mt-0\",\n        onClick: handleSaveRounds,\n        children: \"Save Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mt-0\",\n        onClick: handleGeneratePDF,\n        children: \"Generate PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RoundsDisplay, {\n        eventId: eventId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragEnd,\n        children: rounds.map(round => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: round.id.toString(),\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: round.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1113,\n              columnNumber: 21\n            }, this), round.heats.map((heat, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: `heat-${heat.id}`,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.droppableProps,\n                className: \"list-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: [\"Heat \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 29\n                }, this), heat.competitors.map((competitor, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: competitor.id.toString(),\n                  index: idx,\n                  children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    className: \"list-group-item\",\n                    children: competitor.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1130,\n                    columnNumber: 35\n                  }, this)\n                }, competitor.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1124,\n                  columnNumber: 31\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1117,\n                columnNumber: 27\n              }, this)\n            }, heat.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1108,\n            columnNumber: 19\n          }, this)\n        }, round.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 11\n      }, this), showRounds && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rounds for \", selectedEventName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 15\n        }, this), rounds.map((round, roundIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Round \", roundIndex + 1, \" (\", round.category, \", \", round.sub_category, \", \", round.board_type, \", \", round.gender, \", \", round.age_category, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 19\n          }, this), round.heats.map((heat, heatIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Heat \", heatIndex + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group\",\n              children: heat.competitors.map((competitor, competitorIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"list-group-item\",\n                children: competitor.name\n              }, competitorIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1166,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1164,\n              columnNumber: 23\n            }, this)]\n          }, heatIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1162,\n            columnNumber: 21\n          }, this))]\n        }, roundIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Please select an event to manage competitors and judges.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 988,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"7SCci3RiBbNdHBTZxkUy7ugevM8=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","DragDropContext","Droppable","Draggable","RoundsDisplay","EventsList","CompetitorsList","AddCompetitorForm","jsxDEV","_jsxDEV","Fragment","_Fragment","categories","subCategories","ageCategories","EventManagement","_s","events","setEvents","competitors","setCompetitors","judges","setJudges","rounds","setRounds","showRounds","setShowRounds","eventId","setEventId","selectedEventName","setSelectedEventName","name","setName","date","setDate","location","setLocation","createdBy","setCreatedBy","fetchEvents","response","get","data","error","console","fetchCompetitors","eventName","fetchJudges","handleCreateEvent","e","preventDefault","post","created_by","alert","handleDeleteEvent","id","delete","handleDeleteCompetitor","handleAddJudge","judgeName","event_id","setJudgeName","handleDeleteJudge","handleSaveRounds","map","round","category","sub_category","board_type","gender","age_category","heats","heat","heat_name","competitor","handleGeneratePDF","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","handleCreateRounds","competitorsByCategory","forEach","key","push","newRounds","Object","keys","competitorsList","i","length","heatCompetitors","slice","log","handleDragEnd","result","destination","sourceHeatId","source","droppableId","split","destinationHeatId","sourceRoundIndex","findIndex","some","parseInt","destinationRoundIndex","sourceRound","destinationRound","sourceHeat","find","destinationHeat","movedItem","splice","index","updatedRounds","fromHeatId","toHeatId","competitorId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","judge","onClick","onDragEnd","toString","provided","ref","innerRef","droppableProps","idx","draggableId","draggableProps","dragHandleProps","placeholder","roundIndex","heatIndex","competitorIndex","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/React_Projects/event-platform/client/src/components/EventManagement.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import RoundsDisplay from \"./RoundsDisplay\";\r\n// import EventsList from \"./EventsList\"; \r\n\r\n\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [showRounds, setShowRounds] = useState(false);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [competitorName, setCompetitorName] = useState(\"\");\r\n//   const [category, setCategory] = useState(categories[0]);\r\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n//   const [boardType, setBoardType] = useState(categories[0]);\r\n//   const [gender, setGender] = useState(subCategories[0]);\r\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n//   const [judgeName, setJudgeName] = useState(\"\");\r\n//   const [createdBy, setCreatedBy] = useState(1);\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // const fetchEvents = async () => {\r\n//   //   try {\r\n//   //     const response = await axios.get(\r\n//   //       \"http://localhost:3000/event-admin/get-events\"\r\n//   //     );\r\n//   //     setEvents(response.data);\r\n//   //   } catch (error) {\r\n//   //     console.error(\"Error fetching events:\", error);\r\n//   //   }\r\n//   // };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n//       );\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n//       );\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//         created_by: createdBy,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-event/${id}`\r\n//       );\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddCompetitor = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n//         name: competitorName,\r\n//         event_id: eventId,\r\n//         category,\r\n//         sub_category: subCategory,\r\n//         board_type: boardType,\r\n//         gender,\r\n//         age_category: ageCategory,\r\n//       });\r\n//       alert(\"Competitor added successfully\");\r\n//       setCompetitorName(\"\");\r\n//       setCategory(categories[0]);\r\n//       setSubCategory(subCategories[0]);\r\n//       setBoardType(categories[0]);\r\n//       setGender(subCategories[0]);\r\n//       setAgeCategory(ageCategories[0]);\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding competitor:\", error);\r\n//       alert(\"Error adding competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n//       );\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddJudge = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n//         name: judgeName,\r\n//         event_id: eventId,\r\n//       });\r\n//       alert(\"Judge added successfully\");\r\n//       setJudgeName(\"\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding judge:\", error);\r\n//       alert(\"Error adding judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n//       );\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       await axios.post(\r\n//         \"http://localhost:3000/event-admin/save-rounds\",\r\n//         {\r\n//           eventId,\r\n//           rounds: rounds.map((round) => ({\r\n//             name: round.name,\r\n//             category: round.category,\r\n//             sub_category: round.sub_category,\r\n//             board_type: round.board_type,\r\n//             gender: round.gender,\r\n//             age_category: round.age_category,\r\n//             heats: round.heats.map((heat) => ({\r\n//               heat_name: heat.name,\r\n//               competitors: heat.competitors.map((competitor) => ({\r\n//                 id: competitor.id,\r\n//                 name: competitor.name,\r\n//               })),\r\n//             })),\r\n//           })),\r\n//         }\r\n//       );\r\n//       alert(\"Rounds saved successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n   \r\n//   const handleGeneratePDF = async () => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         `http://localhost:3000/event-admin/generate-rounds-pdf`,\r\n//         {\r\n//           eventId,\r\n//           rounds\r\n//         },\r\n//         { responseType: \"blob\" }\r\n//       );\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement(\"a\");\r\n//       link.href = url;\r\n//       link.setAttribute(\"download\", \"rounds.pdf\");\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//     } catch (error) {\r\n//       console.error(\"Error generating PDF:\", error);\r\n//       alert(\"Error generating PDF\");\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateRounds = () => {\r\n//     if (!eventId) {\r\n//       alert(\"Please select an event first.\");\r\n//       return;\r\n//     }\r\n\r\n//     const competitorsByCategory = {};\r\n\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n\r\n//     const newRounds = [];\r\n\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       const heats = [];\r\n\r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n//         heats.push({\r\n//           id: `heat-${heats.length + 1}`,\r\n//           name: `Heat ${heats.length + 1}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n//       }\r\n\r\n//       newRounds.push({\r\n//         id: `round-${newRounds.length + 1}`,\r\n//         name: `Round 1 (${key})`,\r\n//         category: competitorsList[0].category,\r\n//         sub_category: competitorsList[0].sub_category,\r\n//         board_type: competitorsList[0].board_type,\r\n//         gender: competitorsList[0].gender,\r\n//         age_category: competitorsList[0].age_category,\r\n//         heats,\r\n//       });\r\n//     });\r\n\r\n//     setRounds(newRounds);\r\n//     console.log(\"Created rounds:\", newRounds);\r\n//   };\r\n\r\n  \r\n  \r\n//   const handleDragEnd = async (result) => {\r\n//     if (!result.destination) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceHeatId = result.source.droppableId.split('-')[1];\r\n//     const destinationHeatId = result.destination.droppableId.split('-')[1];\r\n\r\n//     const sourceRoundIndex = rounds.findIndex((round) =>\r\n//       round.heats.some((heat) => heat.id === parseInt(sourceHeatId))\r\n//     );\r\n//     const destinationRoundIndex = rounds.findIndex((round) =>\r\n//       round.heats.some((heat) => heat.id === parseInt(destinationHeatId))\r\n//     );\r\n\r\n//     if (sourceRoundIndex === -1 || destinationRoundIndex === -1) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceRound = rounds[sourceRoundIndex];\r\n//     const destinationRound = rounds[destinationRoundIndex];\r\n\r\n//     const sourceHeat = sourceRound.heats.find(\r\n//       (heat) => heat.id === parseInt(sourceHeatId)\r\n//     );\r\n//     const destinationHeat = destinationRound.heats.find(\r\n//       (heat) => heat.id === parseInt(destinationHeatId)\r\n//     );\r\n\r\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n//     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\r\n\r\n//     const updatedRounds = rounds.map((round) => {\r\n//       if (round.id === sourceRound.id) {\r\n//         return sourceRound;\r\n//       }\r\n//       if (round.id === destinationRound.id) {\r\n//         return destinationRound;\r\n//       }\r\n//       return round;\r\n//     });\r\n\r\n//     setRounds(updatedRounds);\r\n\r\n//     // Send the update to the backend\r\n//     try {\r\n//       await axios.post('http://localhost:3000/event-admin/move-competitor', {\r\n//         fromHeatId: sourceHeatId,\r\n//         toHeatId: destinationHeatId,\r\n//         competitorId: movedItem.id,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error moving competitor:', error);\r\n//       // Optionally, revert the state change if the backend update fails\r\n//       setRounds(rounds);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h2>Manage Events</h2>\r\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//         <div className=\"form-group\">\r\n//           <label>Event Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={name}\r\n//             onChange={(e) => setName(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             className=\"form-control\"\r\n//             value={date}\r\n//             onChange={(e) => setDate(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Location:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={location}\r\n//             onChange={(e) => setLocation(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//           Create Event\r\n//         </button>\r\n//       </form>\r\n\r\n//       <h3>Existing Events</h3>\r\n//       {events.length === 0 ? (\r\n//         <p>No events available. Please create an event.</p>\r\n//       ) : (\r\n//         <ul className=\"list-group\">\r\n//           {events.map((event) => (\r\n//             <li\r\n//               key={event.id}\r\n//               className={`list-group-item d-flex justify-content-between align-items-center ${\r\n//                 eventId === event.id ? \"active\" : \"\"\r\n//               }`}\r\n//               style={{ cursor: \"pointer\" }}\r\n//               onClick={() => {\r\n//                 fetchCompetitors(event.id, event.name);\r\n//                 fetchJudges(event.id);\r\n//               }}\r\n//             >\r\n//               {event.name}\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() => handleDeleteEvent(event.id)}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n\r\n//       {eventId ? (\r\n//         <>\r\n//           <h3>Manage Competitors for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Competitor Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"form-control\"\r\n//                 value={competitorName}\r\n//                 onChange={(e) => setCompetitorName(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={category}\r\n//                 onChange={(e) => setCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Category</option>\r\n//                 {categories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Sub Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={subCategory}\r\n//                 onChange={(e) => setSubCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Sub Category</option>\r\n//                 {subCategories.map((subCat) => (\r\n//                   <option key={subCat} value={subCat}>\r\n//                     {subCat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Board Type:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={boardType}\r\n//                 onChange={(e) => setBoardType(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Board Type</option>\r\n//                 {categories.map((type) => (\r\n//                   <option key={type} value={type}>\r\n//                     {type}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Gender:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={gender}\r\n//                 onChange={(e) => setGender(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Gender</option>\r\n//                 {subCategories.map((g) => (\r\n//                   <option key={g} value={g}>\r\n//                     {g}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Age Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={ageCategory}\r\n//                 onChange={(e) => setAgeCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Age Category</option>\r\n//                 {ageCategories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Competitor\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Competitors</h3>\r\n//           <ul className=\"list-group\">\r\n//             {competitors.map((competitor) => (\r\n//               <li\r\n//                 key={competitor.id}\r\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//               >\r\n//                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n//                 {competitor.category}, Sub Category: {competitor.sub_category},\r\n//                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n//                 , Age Category: {competitor.age_category})\r\n//                 <button\r\n//                   className=\"btn btn-danger\"\r\n//                   onClick={() => handleDeleteCompetitor(competitor.id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Manage Judges for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Judge Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"form-control\"\r\n//                 value={judgeName}\r\n//                 onChange={(e) => setJudgeName(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Judge\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Judges</h3>\r\n//           <ul className=\"list-group\">\r\n//             {judges.map((judge) => (\r\n//               <li\r\n//                 key={judge.id}\r\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//               >\r\n//                 {judge.name} (Event: {selectedEventName})\r\n//                 <button\r\n//                   className=\"btn btn-danger\"\r\n//                   onClick={() => handleDeleteJudge(judge.id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Rounds</h3>\r\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//             Create Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//             Save Rounds\r\n//           </button>\r\n//           {/* <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n//             Show All Rounds\r\n//           </button> */}\r\n\r\n//           <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\r\n//             Generate PDF\r\n//           </button>\r\n\r\n//           <RoundsDisplay eventId={eventId} />\r\n\r\n//           <DragDropContext onDragEnd={handleDragEnd}>\r\n//             {rounds.map((round) => (\r\n//               <Droppable droppableId={round.id.toString()} key={round.id}>\r\n//                 {(provided) => (\r\n//                   <div\r\n//                     ref={provided.innerRef}\r\n//                     {...provided.droppableProps}\r\n//                     className=\"mb-4\"\r\n//                   >\r\n//                     <h4>{round.name}</h4>\r\n//                     {round.heats.map((heat, index) => (\r\n//                       <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\r\n//                         {(provided) => (\r\n//                           <div\r\n//                             ref={provided.innerRef}\r\n//                             {...provided.droppableProps}\r\n//                             className=\"list-group mb-3\"\r\n//                           >\r\n//                             <h5>Heat {index + 1}</h5>\r\n//                             {heat.competitors.map((competitor, idx) => (\r\n//                               <Draggable\r\n//                                 key={competitor.id}\r\n//                                 draggableId={competitor.id.toString()}\r\n//                                 index={idx}\r\n//                               >\r\n//                                 {(provided) => (\r\n//                                   <div\r\n//                                     ref={provided.innerRef}\r\n//                                     {...provided.draggableProps}\r\n//                                     {...provided.dragHandleProps}\r\n//                                     className=\"list-group-item\"\r\n//                                   >\r\n//                                     {competitor.name}\r\n//                                   </div>\r\n//                                 )}\r\n//                               </Draggable>\r\n//                             ))}\r\n//                             {provided.placeholder}\r\n//                           </div>\r\n//                         )}\r\n//                       </Droppable>\r\n//                     ))}\r\n//                     {provided.placeholder}\r\n//                   </div>\r\n//                 )}\r\n//               </Droppable>\r\n//             ))}\r\n//           </DragDropContext>\r\n\r\n//           {showRounds && (\r\n//             <>\r\n//               <h3>Rounds for {selectedEventName}</h3>\r\n//               {rounds.map((round, roundIndex) => (\r\n//                 <div key={roundIndex} className=\"mb-4\">\r\n//                   <h4>\r\n//                     Round {roundIndex + 1} ({round.category}, {round.sub_category}, {round.board_type}, {round.gender}, {round.age_category})\r\n//                   </h4>\r\n//                   {round.heats.map((heat, heatIndex) => (\r\n//                     <div key={heatIndex} className=\"mb-2\">\r\n//                       <h5>Heat {heatIndex + 1}</h5>\r\n//                       <ul className=\"list-group\">\r\n//                         {heat.competitors.map((competitor, competitorIndex) => (\r\n//                           <li key={competitorIndex} className=\"list-group-item\">\r\n//                             {competitor.name}\r\n//                           </li>\r\n//                         ))}\r\n//                       </ul>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               ))}\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       ) : (\r\n//         <p className=\"mt-4\">\r\n//           Please select an event to manage competitors and judges.\r\n//         </p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport RoundsDisplay from \"./RoundsDisplay\";\r\nimport EventsList from \"/EventList\";\r\nimport CompetitorsList from \"./CompetitorsList\";\r\nimport AddCompetitorForm from \"./AddCompetitorForm\";\r\n\r\nconst categories = [\"Shortboard\", \"Longboard\"];\r\nconst subCategories = [\"Men\", \"Women\"];\r\nconst ageCategories = [\r\n  \"Open\",\r\n  \"Sub12\",\r\n  \"Sub14\",\r\n  \"Sub18\",\r\n  \"Professional\",\r\n  \"+40\",\r\n  \"+45\",\r\n  \"+50\",\r\n  \"+60\",\r\n  \"+65\",\r\n  \"+70\",\r\n];\r\n\r\nconst EventManagement = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [competitors, setCompetitors] = useState([]);\r\n  const [judges, setJudges] = useState([]);\r\n  const [rounds, setRounds] = useState([]);\r\n  const [showRounds, setShowRounds] = useState(false);\r\n  const [eventId, setEventId] = useState(null);\r\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [createdBy, setCreatedBy] = useState(1);\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3000/event-admin/get-events\"\r\n      );\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching events:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchCompetitors = async (eventId, eventName) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n      );\r\n      setCompetitors(response.data);\r\n      setEventId(eventId);\r\n      setSelectedEventName(eventName);\r\n    } catch (error) {\r\n      console.error(\"Error fetching competitors:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchJudges = async (eventId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n      );\r\n      setJudges(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching judges:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCreateEvent = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n        name,\r\n        date,\r\n        location,\r\n        created_by: createdBy,\r\n      });\r\n      alert(\"Event created successfully\");\r\n      setName(\"\");\r\n      setDate(\"\");\r\n      setLocation(\"\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error creating event:\", error);\r\n      alert(\"Error creating event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-event/${id}`\r\n      );\r\n      alert(\"Event deleted successfully\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n      alert(\"Error deleting event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteCompetitor = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n      );\r\n      alert(\"Competitor deleted successfully\");\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error deleting competitor:\", error);\r\n      alert(\"Error deleting competitor\");\r\n    }\r\n  };\r\n\r\n  const handleAddJudge = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n        name: judgeName,\r\n        event_id: eventId,\r\n      });\r\n      alert(\"Judge added successfully\");\r\n      setJudgeName(\"\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error adding judge:\", error);\r\n      alert(\"Error adding judge\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteJudge = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-judge/${id}`\r\n      );\r\n      alert(\"Judge deleted successfully\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error deleting judge:\", error);\r\n      alert(\"Error deleting judge\");\r\n    }\r\n  };\r\n\r\n  const handleSaveRounds = async () => {\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\r\n        eventId,\r\n        rounds: rounds.map((round) => ({\r\n          name: round.name,\r\n          category: round.category,\r\n          sub_category: round.sub_category,\r\n          board_type: round.board_type,\r\n          gender: round.gender,\r\n          age_category: round.age_category,\r\n          heats: round.heats.map((heat) => ({\r\n            heat_name: heat.name,\r\n            competitors: heat.competitors.map((competitor) => ({\r\n              id: competitor.id,\r\n              name: competitor.name,\r\n            })),\r\n          })),\r\n        })),\r\n      });\r\n      alert(\"Rounds saved successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error saving rounds:\", error);\r\n      alert(\"Error saving rounds\");\r\n    }\r\n  };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        `http://localhost:3000/event-admin/generate-rounds-pdf`,\r\n        {\r\n          eventId,\r\n          rounds,\r\n        },\r\n        { responseType: \"blob\" }\r\n      );\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", \"rounds.pdf\");\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error);\r\n      alert(\"Error generating PDF\");\r\n    }\r\n  };\r\n\r\n  const handleCreateRounds = () => {\r\n    if (!eventId) {\r\n      alert(\"Please select an event first.\");\r\n      return;\r\n    }\r\n\r\n    const competitorsByCategory = {};\r\n\r\n    competitors.forEach((competitor) => {\r\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n      if (!competitorsByCategory[key]) {\r\n        competitorsByCategory[key] = [];\r\n      }\r\n      competitorsByCategory[key].push(competitor);\r\n    });\r\n\r\n    const newRounds = [];\r\n\r\n    Object.keys(competitorsByCategory).forEach((key) => {\r\n      const competitorsList = competitorsByCategory[key];\r\n      const heats = [];\r\n\r\n      for (let i = 0; i < competitorsList.length; i += 4) {\r\n        const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n        heats.push({\r\n          id: `heat-${heats.length + 1}`,\r\n          name: `Heat ${heats.length + 1}`,\r\n          competitors: heatCompetitors,\r\n        });\r\n      }\r\n\r\n      newRounds.push({\r\n        id: `round-${newRounds.length + 1}`,\r\n        name: `Round 1 (${key})`,\r\n        category: competitorsList[0].category,\r\n        sub_category: competitorsList[0].sub_category,\r\n        board_type: competitorsList[0].board_type,\r\n        gender: competitorsList[0].gender,\r\n        age_category: competitorsList[0].age_category,\r\n        heats,\r\n      });\r\n    });\r\n\r\n    setRounds(newRounds);\r\n    console.log(\"Created rounds:\", newRounds);\r\n  };\r\n\r\n  const handleDragEnd = async (result) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const sourceHeatId = result.source.droppableId.split(\"-\")[1];\r\n    const destinationHeatId = result.destination.droppableId.split(\"-\")[1];\r\n\r\n    const sourceRoundIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === parseInt(sourceHeatId))\r\n    );\r\n    const destinationRoundIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === parseInt(destinationHeatId))\r\n    );\r\n\r\n    if (sourceRoundIndex === -1 || destinationRoundIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const sourceRound = rounds[sourceRoundIndex];\r\n    const destinationRound = rounds[destinationRoundIndex];\r\n\r\n    const sourceHeat = sourceRound.heats.find(\r\n      (heat) => heat.id === parseInt(sourceHeatId)\r\n    );\r\n    const destinationHeat = destinationRound.heats.find(\r\n      (heat) => heat.id === parseInt(destinationHeatId)\r\n    );\r\n\r\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n    destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\r\n\r\n    const updatedRounds = rounds.map((round) => {\r\n      if (round.id === sourceRound.id) {\r\n        return sourceRound;\r\n      }\r\n      if (round.id === destinationRound.id) {\r\n        return destinationRound;\r\n      }\r\n      return round;\r\n    });\r\n\r\n    setRounds(updatedRounds);\r\n\r\n    // Send the update to the backend\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/move-competitor\", {\r\n        fromHeatId: sourceHeatId,\r\n        toHeatId: destinationHeatId,\r\n        competitorId: movedItem.id,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error moving competitor:\", error);\r\n      // Optionally, revert the state change if the backend update fails\r\n      setRounds(rounds);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2>Manage Events</h2>\r\n      <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <label>Event Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={location}\r\n            onChange={(e) => setLocation(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n          Create Event\r\n        </button>\r\n      </form>\r\n\r\n      <h3>Existing Events</h3>\r\n      {events.length === 0 ? (\r\n        <p>No events available. Please create an event.</p>\r\n      ) : (\r\n        <EventsList\r\n          events={events}\r\n          fetchCompetitors={fetchCompetitors}\r\n          fetchJudges={fetchJudges}\r\n          handleDeleteEvent={handleDeleteEvent}\r\n        />\r\n      )}\r\n\r\n      {eventId ? (\r\n        <>\r\n          <h3>Manage Competitors for {selectedEventName}</h3>\r\n          <AddCompetitorForm\r\n            eventId={eventId}\r\n            fetchCompetitors={fetchCompetitors}\r\n            selectedEventName={selectedEventName}\r\n          />\r\n          <CompetitorsList\r\n            competitors={competitors}\r\n            selectedEventName={selectedEventName}\r\n            handleDeleteCompetitor={handleDeleteCompetitor}\r\n          />\r\n\r\n          <h3>Manage Judges for {selectedEventName}</h3>\r\n          <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n              <label>Judge Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={judgeName}\r\n                onChange={(e) => setJudgeName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n              Add Judge\r\n            </button>\r\n          </form>\r\n\r\n          <h3>Existing Judges</h3>\r\n          <ul className=\"list-group\">\r\n            {judges.map((judge) => (\r\n              <li\r\n                key={judge.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              >\r\n                {judge.name} (Event: {selectedEventName})\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteJudge(judge.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h3>Rounds</h3>\r\n          <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n            Create Rounds\r\n          </button>\r\n          <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n            Save Rounds\r\n          </button>\r\n          {/* <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n            Show All Rounds\r\n          </button> */}\r\n\r\n          <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\r\n            Generate PDF\r\n          </button>\r\n\r\n          <RoundsDisplay eventId={eventId} />\r\n\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            {rounds.map((round) => (\r\n              <Droppable droppableId={round.id.toString()} key={round.id}>\r\n                {(provided) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    className=\"mb-4\"\r\n                  >\r\n                    <h4>{round.name}</h4>\r\n                    {round.heats.map((heat, index) => (\r\n                      <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\r\n                        {(provided) => (\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                            className=\"list-group mb-3\"\r\n                          >\r\n                            <h5>Heat {index + 1}</h5>\r\n                            {heat.competitors.map((competitor, idx) => (\r\n                              <Draggable\r\n                                key={competitor.id}\r\n                                draggableId={competitor.id.toString()}\r\n                                index={idx}\r\n                              >\r\n                                {(provided) => (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                    className=\"list-group-item\"\r\n                                  >\r\n                                    {competitor.name}\r\n                                  </div>\r\n                                )}\r\n                              </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                          </div>\r\n                        )}\r\n                      </Droppable>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </DragDropContext>\r\n\r\n          {showRounds && (\r\n            <>\r\n              <h3>Rounds for {selectedEventName}</h3>\r\n              {rounds.map((round, roundIndex) => (\r\n                <div key={roundIndex} className=\"mb-4\">\r\n                  <h4>\r\n                    Round {roundIndex + 1} ({round.category}, {round.sub_category}, {round.board_type}, {round.gender}, {round.age_category})\r\n                  </h4>\r\n                  {round.heats.map((heat, heatIndex) => (\r\n                    <div key={heatIndex} className=\"mb-2\">\r\n                      <h5>Heat {heatIndex + 1}</h5>\r\n                      <ul className=\"list-group\">\r\n                        {heat.competitors.map((competitor, competitorIndex) => (\r\n                          <li key={competitorIndex} className=\"list-group-item\">\r\n                            {competitor.name}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p className=\"mt-4\">\r\n          Please select an event to manage competitors and judges.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,OAAO,sCAAsC;AAC7C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,iBAAiB,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC;AAC9C,MAAMC,aAAa,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;AACtC,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}