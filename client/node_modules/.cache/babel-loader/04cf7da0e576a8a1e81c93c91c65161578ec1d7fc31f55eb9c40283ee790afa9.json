{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React_Projects\\\\event-platform\\\\client\\\\src\\\\components\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [heats, setHeats] = useState([]);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [competitorName, setCompetitorName] = useState(\"\");\n//   const [category, setCategory] = useState(categories[0]);\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\n//   const [boardType, setBoardType] = useState(categories[0]);\n//   const [gender, setGender] = useState(subCategories[0]);\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n//   const [judgeName, setJudgeName] = useState(\"\");\n//   const [createdBy, setCreatedBy] = useState(1);\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/event-admin/get-events\"\n//       );\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n//       );\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\n//       );\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//         created_by: createdBy,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-event/${id}`\n//       );\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleAddCompetitor = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n//         name: competitorName,\n//         event_id: eventId,\n//         category,\n//         sub_category: subCategory,\n//         board_type: boardType,\n//         gender,\n//         age_category: ageCategory,\n//       });\n//       alert(\"Competitor added successfully\");\n//       setCompetitorName(\"\");\n//       setCategory(categories[0]);\n//       setSubCategory(subCategories[0]);\n//       setBoardType(categories[0]);\n//       setGender(subCategories[0]);\n//       setAgeCategory(ageCategories[0]);\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error adding competitor:\", error);\n//       alert(\"Error adding competitor\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\n//       );\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleAddJudge = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n//         name: judgeName,\n//         event_id: eventId,\n//       });\n//       alert(\"Judge added successfully\");\n//       setJudgeName(\"\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error adding judge:\", error);\n//       alert(\"Error adding judge\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\n//       );\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3000/event-admin/save-rounds\",\n//         {\n//           eventId,\n//           rounds: rounds.map((round) => ({\n//             name: round.name,\n//             category: round.category,\n//             sub_category: round.sub_category,\n//             board_type: round.board_type,\n//             gender: round.gender,\n//             age_category: round.age_category,\n//             heats: round.heats.map((heat) => ({\n//               heat_name: heat.name,\n//               competitors: heat.competitors,\n//             })),\n//           })),\n//         }\n//       );\n//       alert(\"Rounds saved successfully\");\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const handleFetchRounds = async () => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\n//       );\n//       const { rounds } = response.data;\n\n//       const processedRounds = rounds.map((round) => {\n//         return {\n//           ...round,\n//           heats: round.heats.map((heat) => ({\n//             ...heat,\n//             competitors: heat.competitors.map((competitor) => ({\n//               id: competitor.id,\n//               name: competitor.name,\n//               category: competitor.category,\n//               sub_category: competitor.sub_category,\n//               board_type: competitor.board_type,\n//               gender: competitor.gender,\n//               age_category: competitor.age_category,\n//             })),\n//           })),\n//         };\n//       });\n\n//       setRounds(processedRounds);\n//     } catch (error) {\n//       console.error(\"Error fetching rounds:\", error);\n//       alert(\"Error fetching rounds\");\n//     }\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\n//         { responseType: \"blob\" }\n//       );\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement(\"a\");\n//       link.href = url;\n//       link.setAttribute(\"download\", \"rounds.pdf\");\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       alert(\"Error generating PDF\");\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     const newRounds = [];\n//     const competitorsByCategory = {};\n\n//     // Organize competitors by their categories and sub-categories\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     // Create rounds and heats for each category\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       let roundNumber = 1;\n//       let heatNumber = 1;\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const roundName = `Round ${roundNumber} (${key})`;\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         let round = newRounds.find((r) => r.name === roundName);\n//         if (!round) {\n//           round = {\n//             name: roundName,\n//             category: competitorsList[0].category,\n//             sub_category: competitorsList[0].sub_category,\n//             board_type: competitorsList[0].board_type,\n//             gender: competitorsList[0].gender,\n//             age_category: competitorsList[0].age_category,\n//             heats: [],\n//           };\n//           newRounds.push(round);\n//         }\n\n//         round.heats.push({\n//           id: `heat-${roundNumber}-${heatNumber}`,\n//           name: `Heat ${heatNumber}`,\n//           competitors: heatCompetitors,\n//         });\n\n//         heatNumber++;\n//         if (heatNumber > 4) {\n//           heatNumber = 1;\n//           roundNumber++;\n//         }\n//       }\n//     });\n\n//     setRounds(newRounds);\n//   };\n\n//   const handleDragEnd = (result) => {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const sourceHeatIndex = heats.findIndex(\n//       (heat) => heat.id === result.source.droppableId\n//     );\n//     const destinationHeatIndex = heats.findIndex(\n//       (heat) => heat.id === result.destination.droppableId\n//     );\n\n//     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\n//       return;\n//     }\n\n//     const sourceHeat = heats[sourceHeatIndex];\n//     const destinationHeat = heats[destinationHeatIndex];\n\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n//     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n\n//     const updatedHeats = heats.map((heat) => {\n//       if (heat.id === sourceHeat.id) {\n//         return sourceHeat;\n//       }\n//       if (heat.id === destinationHeat.id) {\n//         return destinationHeat;\n//       }\n//       return heat;\n//     });\n\n//     setHeats(updatedHeats);\n//   };\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h2>Manage Events</h2>\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//         <div className=\"form-group\">\n//           <label>Event Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Date:</label>\n//           <input\n//             type=\"date\"\n//             className=\"form-control\"\n//             value={date}\n//             onChange={(e) => setDate(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Location:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={location}\n//             onChange={(e) => setLocation(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//           Create Event\n//         </button>\n//       </form>\n\n//       <h3>Existing Events</h3>\n//       {events.length === 0 ? (\n//         <p>No events available. Please create an event.</p>\n//       ) : (\n//         <ul className=\"list-group\">\n//           {events.map((event) => (\n//             <li\n//               key={event.id}\n//               className={`list-group-item d-flex justify-content-between align-items-center ${\n//                 eventId === event.id ? \"active\" : \"\"\n//               }`}\n//               style={{ cursor: \"pointer\" }}\n//               onClick={() => {\n//                 fetchCompetitors(event.id, event.name);\n//                 fetchJudges(event.id);\n//               }}\n//             >\n//               {event.name}\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() => handleDeleteEvent(event.id)}\n//               >\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {eventId ? (\n//         <>\n//           <h3>Manage Competitors for {selectedEventName}</h3>\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Competitor Name:</label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 value={competitorName}\n//                 onChange={(e) => setCompetitorName(e.target.value)}\n//                 required\n//               />\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={category}\n//                 onChange={(e) => setCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Category</option>\n//                 {categories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Sub Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={subCategory}\n//                 onChange={(e) => setSubCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Sub Category</option>\n//                 {subCategories.map((subCat) => (\n//                   <option key={subCat} value={subCat}>\n//                     {subCat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Board Type:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={boardType}\n//                 onChange={(e) => setBoardType(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Board Type</option>\n//                 {categories.map((type) => (\n//                   <option key={type} value={type}>\n//                     {type}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Gender:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={gender}\n//                 onChange={(e) => setGender(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Gender</option>\n//                 {subCategories.map((g) => (\n//                   <option key={g} value={g}>\n//                     {g}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Age Category:</label>\n//               <select\n//                 className=\"form-control\"\n//                 value={ageCategory}\n//                 onChange={(e) => setAgeCategory(e.target.value)}\n//                 required\n//               >\n//                 <option value=\"\">Select Age Category</option>\n//                 {ageCategories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Competitor\n//             </button>\n//           </form>\n\n//           <h3>Existing Competitors</h3>\n//           <ul className=\"list-group\">\n//             {competitors.map((competitor) => (\n//               <li\n//                 key={competitor.id}\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n//               >\n//                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\n//                 {competitor.category}, Sub Category: {competitor.sub_category},\n//                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\n//                 , Age Category: {competitor.age_category})\n//                 <button\n//                   className=\"btn btn-danger\"\n//                   onClick={() => handleDeleteCompetitor(competitor.id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Manage Judges for {selectedEventName}</h3>\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Judge Name:</label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 value={judgeName}\n//                 onChange={(e) => setJudgeName(e.target.value)}\n//                 required\n//               />\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Judge\n//             </button>\n//           </form>\n\n//           <h3>Existing Judges</h3>\n//           <ul className=\"list-group\">\n//             {judges.map((judge) => (\n//               <li\n//                 key={judge.id}\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n//               >\n//                 {judge.name} (Event: {selectedEventName})\n//                 <button\n//                   className=\"btn btn-danger\"\n//                   onClick={() => handleDeleteJudge(judge.id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Rounds</h3>\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//             Create Rounds\n//           </button>\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//             Save Rounds\n//           </button>\n//           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\n//             Show All Rounds\n//           </button>\n//           <button\n//             className=\"btn btn-secondary mt-0\"\n//             onClick={handleGeneratePDF}\n//           >\n//             Generate PDF\n//           </button>\n\n//           <DragDropContext onDragEnd={handleDragEnd}>\n//             {rounds.map((round) => (\n//               <Droppable droppableId={round.id} key={round.id}>\n//                 {(provided) => (\n//                   <div\n//                     ref={provided.innerRef}\n//                     {...provided.droppableProps}\n//                     className=\"mb-4\"\n//                   >\n//                     <h4>{round.name}</h4>\n//                     {heats\n//                       .filter((heat) => heat.id.startsWith(`heat-${round.id}`))\n//                       .map((heat, index) => (\n//                         <div key={heat.id}>\n//                           <h5>Heat {index + 1}</h5>\n//                           <Droppable droppableId={heat.id}>\n//                             {(provided) => (\n//                               <div\n//                                 ref={provided.innerRef}\n//                                 {...provided.droppableProps}\n//                                 className=\"list-group\"\n//                               >\n//                                 {heat.competitors.map((competitor, idx) => (\n//                                   <Draggable\n//                                     key={competitor.id}\n//                                     draggableId={competitor.id.toString()}\n//                                     index={idx}\n//                                   >\n//                                     {(provided) => (\n//                                       <div\n//                                         ref={provided.innerRef}\n//                                         {...provided.draggableProps}\n//                                         {...provided.dragHandleProps}\n//                                         className=\"list-group-item\"\n//                                       >\n//                                         {competitor.name}\n//                                       </div>\n//                                     )}\n//                                   </Draggable>\n//                                 ))}\n//                                 {provided.placeholder}\n//                               </div>\n//                             )}\n//                           </Droppable>\n//                         </div>\n//                       ))}\n//                     {provided.placeholder}\n//                   </div>\n//                 )}\n//               </Droppable>\n//             ))}\n//           </DragDropContext>\n\n//           <h3>Rounds for {selectedEventName}</h3>\n//           {rounds.map((round, roundIndex) => (\n//             <div key={roundIndex} className=\"mb-4\">\n//               <h4>\n//                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\n//                 {round.board_type}, {round.gender}, {round.age_category})\n//               </h4>\n//               {round.heats.map((heat, heatIndex) => (\n//                 <div key={heatIndex} className=\"mb-2\">\n//                   <h5>Heat {heatIndex + 1}</h5>\n//                   <ul className=\"list-group\">\n//                     {heat.competitors.map((competitor, competitorIndex) => (\n//                       <li key={competitorIndex} className=\"list-group-item\">\n//                         {competitor.name}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 </div>\n//               ))}\n//             </div>\n//           ))}\n//         </>\n//       ) : (\n//         <p className=\"mt-4\">\n//           Please select an event to manage competitors and judges.\n//         </p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EventManagement;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// // import \"bootstrap/dist/css/bootstrap.min.css\";\n\n// // const categories = [\"Shortboard\", \"Longboard\"];\n// // const subCategories = [\"Men\", \"Women\"];\n// // const ageCategories = [\n// //   \"Open\",\n// //   \"Sub12\",\n// //   \"Sub14\",\n// //   \"Sub18\",\n// //   \"Professional\",\n// //   \"+40\",\n// //   \"+45\",\n// //   \"+50\",\n// //   \"+60\",\n// //   \"+65\",\n// //   \"+70\",\n// // ];\n\n// // const EventManagement = () => {\n// //   const [events, setEvents] = useState([]);\n// //   const [competitors, setCompetitors] = useState([]);\n// //   const [judges, setJudges] = useState([]);\n// //   const [rounds, setRounds] = useState([]);\n// //   const [heats, setHeats] = useState([]);\n// //   const [eventId, setEventId] = useState(null);\n// //   const [name, setName] = useState(\"\");\n// //   const [date, setDate] = useState(\"\");\n// //   const [location, setLocation] = useState(\"\");\n// //   const [competitorName, setCompetitorName] = useState(\"\");\n// //   const [category, setCategory] = useState(categories[0]);\n// //   const [subCategory, setSubCategory] = useState(subCategories[0]);\n// //   const [boardType, setBoardType] = useState(categories[0]);\n// //   const [gender, setGender] = useState(subCategories[0]);\n// //   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n// //   const [judgeName, setJudgeName] = useState(\"\");\n// //   const [createdBy, setCreatedBy] = useState(1);\n// //   const [selectedEventName, setSelectedEventName] = useState(\"\");\n\n// //   useEffect(() => {\n// //     fetchEvents();\n// //   }, []);\n\n// //   const fetchEvents = async () => {\n// //     try {\n// //       const response = await axios.get(\n// //         \"http://localhost:3000/event-admin/get-events\"\n// //       );\n// //       setEvents(response.data);\n// //     } catch (error) {\n// //       console.error(\"Error fetching events:\", error);\n// //     }\n// //   };\n\n// //   const fetchCompetitors = async (eventId, eventName) => {\n// //     try {\n// //       const response = await axios.get(\n// //         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n// //       );\n// //       setCompetitors(response.data);\n// //       setEventId(eventId);\n// //       setSelectedEventName(eventName);\n// //     } catch (error) {\n// //       console.error(\"Error fetching competitors:\", error);\n// //     }\n// //   };\n\n// //   const fetchJudges = async (eventId) => {\n// //     try {\n// //       const response = await axios.get(\n// //         `http://localhost:3000/event-admin/get-judges/${eventId}`\n// //       );\n// //       setJudges(response.data);\n// //     } catch (error) {\n// //       console.error(\"Error fetching judges:\", error);\n// //     }\n// //   };\n\n// //   const handleCreateEvent = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n// //         name,\n// //         date,\n// //         location,\n// //         created_by: createdBy,\n// //       });\n// //       alert(\"Event created successfully\");\n// //       setName(\"\");\n// //       setDate(\"\");\n// //       setLocation(\"\");\n// //       fetchEvents();\n// //     } catch (error) {\n// //       console.error(\"Error creating event:\", error);\n// //       alert(\"Error creating event\");\n// //     }\n// //   };\n\n// //   const handleDeleteEvent = async (id) => {\n// //     try {\n// //       await axios.delete(\n// //         `http://localhost:3000/event-admin/delete-event/${id}`\n// //       );\n// //       alert(\"Event deleted successfully\");\n// //       fetchEvents();\n// //     } catch (error) {\n// //       console.error(\"Error deleting event:\", error);\n// //       alert(\"Error deleting event\");\n// //     }\n// //   };\n\n// //   const handleAddCompetitor = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n// //         name: competitorName,\n// //         event_id: eventId,\n// //         category,\n// //         sub_category: subCategory,\n// //         board_type: boardType,\n// //         gender,\n// //         age_category: ageCategory,\n// //       });\n// //       alert(\"Competitor added successfully\");\n// //       setCompetitorName(\"\");\n// //       setCategory(categories[0]);\n// //       setSubCategory(subCategories[0]);\n// //       setBoardType(categories[0]);\n// //       setGender(subCategories[0]);\n// //       setAgeCategory(ageCategories[0]);\n// //       fetchCompetitors(eventId, selectedEventName);\n// //     } catch (error) {\n// //       console.error(\"Error adding competitor:\", error);\n// //       alert(\"Error adding competitor\");\n// //     }\n// //   };\n\n// //   const handleDeleteCompetitor = async (id) => {\n// //     try {\n// //       await axios.delete(\n// //         `http://localhost:3000/event-admin/delete-competitor/${id}`\n// //       );\n// //       alert(\"Competitor deleted successfully\");\n// //       fetchCompetitors(eventId, selectedEventName);\n// //     } catch (error) {\n// //       console.error(\"Error deleting competitor:\", error);\n// //       alert(\"Error deleting competitor\");\n// //     }\n// //   };\n\n// //   const handleAddJudge = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n// //         name: judgeName,\n// //         event_id: eventId,\n// //       });\n// //       alert(\"Judge added successfully\");\n// //       setJudgeName(\"\");\n// //       fetchJudges(eventId);\n// //     } catch (error) {\n// //       console.error(\"Error adding judge:\", error);\n// //       alert(\"Error adding judge\");\n// //     }\n// //   };\n\n// //   const handleDeleteJudge = async (id) => {\n// //     try {\n// //       await axios.delete(\n// //         `http://localhost:3000/event-admin/delete-judge/${id}`\n// //       );\n// //       alert(\"Judge deleted successfully\");\n// //       fetchJudges(eventId);\n// //     } catch (error) {\n// //       console.error(\"Error deleting judge:\", error);\n// //       alert(\"Error deleting judge\");\n// //     }\n// //   };\n\n// //   const handleSaveRounds = async () => {\n// //     try {\n// //       const response = await axios.post(\n// //         \"http://localhost:3000/event-admin/save-rounds\",\n// //         {\n// //           eventId,\n// //           rounds: rounds.map((round) => ({\n// //             name: round.name,\n// //             category: round.category,\n// //             sub_category: round.sub_category,\n// //             board_type: round.board_type,\n// //             gender: round.gender,\n// //             age_category: round.age_category,\n// //             heats: round.heats.map((heat) => ({\n// //               heat_name: heat.name,\n// //               competitors: heat.competitors,\n// //             })),\n// //           })),\n// //         }\n// //       );\n// //       alert(\"Rounds saved successfully\");\n// //     } catch (error) {\n// //       console.error(\"Error saving rounds:\", error);\n// //       alert(\"Error saving rounds\");\n// //     }\n// //   };\n\n// //   const handleFetchRounds = async () => {\n// //     try {\n// //       const response = await axios.get(\n// //         `http://localhost:3000/event-admin/get-rounds/${eventId}`\n// //       );\n\n// //       const rounds = response.data;\n// //       const processedRounds = rounds.map((round) => {\n// //         return {\n// //           ...round,\n// //           heats: round.heats.map((heat) => ({\n// //             ...heat,\n// //             competitors: heat.competitors.map((competitor) => ({\n// //               id: competitor.id,\n// //               name: competitor.name,\n// //             })),\n// //           })),\n// //         };\n// //       });\n\n// //       setRounds(processedRounds);\n// //     } catch (error) {\n// //       console.error(\"Error fetching rounds:\", error);\n// //       alert(\"Error fetching rounds\");\n// //     }\n// //   };\n\n// //   const handleGeneratePDF = async () => {\n// //     try {\n// //       const response = await axios.get(\n// //         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\n// //         { responseType: \"blob\" }\n// //       );\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\n// //       const link = document.createElement(\"a\");\n// //       link.href = url;\n// //       link.setAttribute(\"download\", \"rounds.pdf\");\n// //       document.body.appendChild(link);\n// //       link.click();\n// //     } catch (error) {\n// //       console.error(\"Error generating PDF:\", error);\n// //       alert(\"Error generating PDF\");\n// //     }\n// //   };\n\n// //   const handleCreateRounds = () => {\n// //     const newRounds = [];\n// //     const competitorsByCategory = {};\n\n// //     // Organize competitors by their categories and sub-categories\n// //     competitors.forEach((competitor) => {\n// //       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n// //       if (!competitorsByCategory[key]) {\n// //         competitorsByCategory[key] = [];\n// //       }\n// //       competitorsByCategory[key].push(competitor);\n// //     });\n\n// //     // Create rounds and heats for each category\n// //     Object.keys(competitorsByCategory).forEach((key) => {\n// //       const competitorsList = competitorsByCategory[key];\n// //       let roundNumber = 1;\n// //       let heatNumber = 1;\n\n// //       for (let i = 0; i < competitorsList.length; i += 4) {\n// //         const roundName = `Round ${roundNumber} (${key})`;\n// //         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n// //         let round = newRounds.find((r) => r.name === roundName);\n// //         if (!round) {\n// //           round = {\n// //             name: roundName,\n// //             category: competitorsList[0].category,\n// //             sub_category: competitorsList[0].sub_category,\n// //             board_type: competitorsList[0].board_type,\n// //             gender: competitorsList[0].gender,\n// //             age_category: competitorsList[0].age_category,\n// //             heats: [],\n// //           };\n// //           newRounds.push(round);\n// //         }\n\n// //         round.heats.push({\n// //           id: `heat-${roundNumber}-${heatNumber}`,\n// //           name: `Heat ${heatNumber}`,\n// //           competitors: heatCompetitors,\n// //         });\n\n// //         heatNumber++;\n// //         if (heatNumber > 4) {\n// //           heatNumber = 1;\n// //           roundNumber++;\n// //         }\n// //       }\n// //     });\n\n// //     setRounds(newRounds);\n// //   };\n\n// //   const handleDragEnd = (result) => {\n// //     if (!result.destination) {\n// //       return;\n// //     }\n\n// //     const sourceHeatIndex = heats.findIndex(\n// //       (heat) => heat.id === result.source.droppableId\n// //     );\n// //     const destinationHeatIndex = heats.findIndex(\n// //       (heat) => heat.id === result.destination.droppableId\n// //     );\n\n// //     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\n// //       return;\n// //     }\n\n// //     const sourceHeat = heats[sourceHeatIndex];\n// //     const destinationHeat = heats[destinationHeatIndex];\n\n// //     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n// //     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n\n// //     const updatedHeats = heats.map((heat) => {\n// //       if (heat.id === sourceHeat.id) {\n// //         return sourceHeat;\n// //       }\n// //       if (heat.id === destinationHeat.id) {\n// //         return destinationHeat;\n// //       }\n// //       return heat;\n// //     });\n\n// //     setHeats(updatedHeats);\n// //   };\n\n// //   return (\n// //     <div className=\"container mt-5\">\n// //       <h2>Manage Events</h2>\n// //       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n// //         <div className=\"form-group\">\n// //           <label>Event Name:</label>\n// //           <input\n// //             type=\"text\"\n// //             className=\"form-control\"\n// //             value={name}\n// //             onChange={(e) => setName(e.target.value)}\n// //             required\n// //           />\n// //         </div>\n// //         <div className=\"form-group mt-3\">\n// //           <label>Date:</label>\n// //           <input\n// //             type=\"date\"\n// //             className=\"form-control\"\n// //             value={date}\n// //             onChange={(e) => setDate(e.target.value)}\n// //             required\n// //           />\n// //         </div>\n// //         <div className=\"form-group mt-3\">\n// //           <label>Location:</label>\n// //           <input\n// //             type=\"text\"\n// //             className=\"form-control\"\n// //             value={location}\n// //             onChange={(e) => setLocation(e.target.value)}\n// //             required\n// //           />\n// //         </div>\n// //         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n// //           Create Event\n// //         </button>\n// //       </form>\n\n// //       <h3>Existing Events</h3>\n// //       {events.length === 0 ? (\n// //         <p>No events available. Please create an event.</p>\n// //       ) : (\n// //         <ul className=\"list-group\">\n// //           {events.map((event) => (\n// //             <li\n// //               key={event.id}\n// //               className={`list-group-item d-flex justify-content-between align-items-center ${\n// //                 eventId === event.id ? \"active\" : \"\"\n// //               }`}\n// //               style={{ cursor: \"pointer\" }}\n// //               onClick={() => {\n// //                 fetchCompetitors(event.id, event.name);\n// //                 fetchJudges(event.id);\n// //               }}\n// //             >\n// //               {event.name}\n// //               <button\n// //                 className=\"btn btn-danger\"\n// //                 onClick={() => handleDeleteEvent(event.id)}\n// //               >\n// //                 Delete\n// //               </button>\n// //             </li>\n// //           ))}\n// //         </ul>\n// //       )}\n\n// //       {eventId ? (\n// //         <>\n// //           <h3>Manage Competitors for {selectedEventName}</h3>\n// //           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\n// //             <div className=\"form-group\">\n// //               <label>Competitor Name:</label>\n// //               <input\n// //                 type=\"text\"\n// //                 className=\"form-control\"\n// //                 value={competitorName}\n// //                 onChange={(e) => setCompetitorName(e.target.value)}\n// //                 required\n// //               />\n// //             </div>\n// //             <div className=\"form-group mt-3\">\n// //               <label>Category:</label>\n// //               <select\n// //                 className=\"form-control\"\n// //                 value={category}\n// //                 onChange={(e) => setCategory(e.target.value)}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Category</option>\n// //                 {categories.map((cat) => (\n// //                   <option key={cat} value={cat}>\n// //                     {cat}\n// //                   </option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //             <div className=\"form-group mt-3\">\n// //               <label>Sub Category:</label>\n// //               <select\n// //                 className=\"form-control\"\n// //                 value={subCategory}\n// //                 onChange={(e) => setSubCategory(e.target.value)}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Sub Category</option>\n// //                 {subCategories.map((subCat) => (\n// //                   <option key={subCat} value={subCat}>\n// //                     {subCat}\n// //                   </option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //             <div className=\"form-group mt-3\">\n// //               <label>Board Type:</label>\n// //               <select\n// //                 className=\"form-control\"\n// //                 value={boardType}\n// //                 onChange={(e) => setBoardType(e.target.value)}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Board Type</option>\n// //                 {categories.map((type) => (\n// //                   <option key={type} value={type}>\n// //                     {type}\n// //                   </option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //             <div className=\"form-group mt-3\">\n// //               <label>Gender:</label>\n// //               <select\n// //                 className=\"form-control\"\n// //                 value={gender}\n// //                 onChange={(e) => setGender(e.target.value)}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Gender</option>\n// //                 {subCategories.map((g) => (\n// //                   <option key={g} value={g}>\n// //                     {g}\n// //                   </option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //             <div className=\"form-group mt-3\">\n// //               <label>Age Category:</label>\n// //               <select\n// //                 className=\"form-control\"\n// //                 value={ageCategory}\n// //                 onChange={(e) => setAgeCategory(e.target.value)}\n// //                 required\n// //               >\n// //                 <option value=\"\">Select Age Category</option>\n// //                 {ageCategories.map((cat) => (\n// //                   <option key={cat} value={cat}>\n// //                     {cat}\n// //                   </option>\n// //                 ))}\n// //               </select>\n// //             </div>\n// //             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n// //               Add Competitor\n// //             </button>\n// //           </form>\n\n// //           <h3>Existing Competitors</h3>\n// //           <ul className=\"list-group\">\n// //             {competitors.map((competitor) => (\n// //               <li\n// //                 key={competitor.id}\n// //                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n// //               >\n// //                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\n// //                 {competitor.category}, Sub Category: {competitor.sub_category},\n// //                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\n// //                 , Age Category: {competitor.age_category})\n// //                 <button\n// //                   className=\"btn btn-danger\"\n// //                   onClick={() => handleDeleteCompetitor(competitor.id)}\n// //                 >\n// //                   Delete\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n\n// //           <h3>Manage Judges for {selectedEventName}</h3>\n// //           <form onSubmit={handleAddJudge} className=\"mb-4\">\n// //             <div className=\"form-group\">\n// //               <label>Judge Name:</label>\n// //               <input\n// //                 type=\"text\"\n// //                 className=\"form-control\"\n// //                 value={judgeName}\n// //                 onChange={(e) => setJudgeName(e.target.value)}\n// //                 required\n// //               />\n// //             </div>\n// //             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n// //               Add Judge\n// //             </button>\n// //           </form>\n\n// //           <h3>Existing Judges</h3>\n// //           <ul className=\"list-group\">\n// //             {judges.map((judge) => (\n// //               <li\n// //                 key={judge.id}\n// //                 className=\"list-group-item d-flex justify-content-between align-items-center\"\n// //               >\n// //                 {judge.name} (Event: {selectedEventName})\n// //                 <button\n// //                   className=\"btn btn-danger\"\n// //                   onClick={() => handleDeleteJudge(judge.id)}\n// //                 >\n// //                   Delete\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n\n// //           <h3>Rounds</h3>\n// //           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n// //             Create Rounds\n// //           </button>\n// //           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n// //             Save Rounds\n// //           </button>\n// //           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\n// //             Show All Rounds\n// //           </button>\n// //           <button\n// //             className=\"btn btn-secondary mt-0\"\n// //             onClick={handleGeneratePDF}\n// //           >\n// //             Generate PDF\n// //           </button>\n\n// //           <DragDropContext onDragEnd={handleDragEnd}>\n// //             {rounds.map((round) => (\n// //               <Droppable droppableId={round.id} key={round.id}>\n// //                 {(provided) => (\n// //                   <div\n// //                     ref={provided.innerRef}\n// //                     {...provided.droppableProps}\n// //                     className=\"mb-4\"\n// //                   >\n// //                     <h4>{round.name}</h4>\n// //                     {round.heats.map((heat, index) => (\n// //                       <div key={heat.id}>\n// //                         <h5>Heat {index + 1}</h5>\n// //                         <Droppable droppableId={heat.id}>\n// //                           {(provided) => (\n// //                             <div\n// //                               ref={provided.innerRef}\n// //                               {...provided.droppableProps}\n// //                               className=\"list-group\"\n// //                             >\n// //                               {heat.competitors.map((competitor, idx) => (\n// //                                 <Draggable\n// //                                   key={competitor.id}\n// //                                   draggableId={competitor.id.toString()}\n// //                                   index={idx}\n// //                                 >\n// //                                   {(provided) => (\n// //                                     <div\n// //                                       ref={provided.innerRef}\n// //                                       {...provided.draggableProps}\n// //                                       {...provided.dragHandleProps}\n// //                                       className=\"list-group-item\"\n// //                                     >\n// //                                       {competitor.name}\n// //                                     </div>\n// //                                   )}\n// //                                 </Draggable>\n// //                               ))}\n// //                               {provided.placeholder}\n// //                             </div>\n// //                           )}\n// //                         </Droppable>\n// //                       </div>\n// //                     ))}\n// //                     {provided.placeholder}\n// //                   </div>\n// //                 )}\n// //               </Droppable>\n// //             ))}\n// //           </DragDropContext>\n\n// //           <h3>Rounds for {selectedEventName}</h3>\n// //           {rounds.map((round, roundIndex) => (\n// //             <div key={roundIndex} className=\"mb-4\">\n// //               <h4>\n// //                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\n// //                 {round.board_type}, {round.gender}, {round.age_category})\n// //               </h4>\n// //               {round.heats.map((heat, heatIndex) => (\n// //                 <div key={heatIndex} className=\"mb-2\">\n// //                   <h5>Heat {heatIndex + 1}</h5>\n// //                   <ul className=\"list-group\">\n// //                     {heat.competitors.map((competitor, competitorIndex) => (\n// //                       <li key={competitorIndex} className=\"list-group-item\">\n// //                         {competitor.name}\n// //                       </li>\n// //                     ))}\n// //                   </ul>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //           ))}\n// //         </>\n// //       ) : (\n// //         <p className=\"mt-4\">\n// //           Please select an event to manage competitors and judges.\n// //         </p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EventManagement;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst categories = [\"Shortboard\", \"Longboard\"];\nconst subCategories = [\"Men\", \"Women\"];\nconst ageCategories = [\"Open\", \"Sub12\", \"Sub14\", \"Sub18\", \"Professional\", \"+40\", \"+45\", \"+50\", \"+60\", \"+65\", \"+70\"];\nconst EventManagement = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [competitors, setCompetitors] = useState([]);\n  const [judges, setJudges] = useState([]);\n  const [rounds, setRounds] = useState([]);\n  const [eventId, setEventId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [competitorName, setCompetitorName] = useState(\"\");\n  const [category, setCategory] = useState(categories[0]);\n  const [subCategory, setSubCategory] = useState(subCategories[0]);\n  const [boardType, setBoardType] = useState(categories[0]);\n  const [gender, setGender] = useState(subCategories[0]);\n  const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n  const [judgeName, setJudgeName] = useState(\"\");\n  const [createdBy, setCreatedBy] = useState(1);\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n  const fetchCompetitors = async (eventId, eventName) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\n      setCompetitors(response.data);\n      setEventId(eventId);\n      setSelectedEventName(eventName);\n    } catch (error) {\n      console.error(\"Error fetching competitors:\", error);\n    }\n  };\n  const fetchJudges = async eventId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\n      setJudges(response.data);\n    } catch (error) {\n      console.error(\"Error fetching judges:\", error);\n    }\n  };\n  const handleCreateEvent = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n        name,\n        date,\n        location,\n        created_by: createdBy\n      });\n      alert(\"Event created successfully\");\n      setName(\"\");\n      setDate(\"\");\n      setLocation(\"\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      alert(\"Error creating event\");\n    }\n  };\n  const handleDeleteEvent = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\n      alert(\"Event deleted successfully\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      alert(\"Error deleting event\");\n    }\n  };\n  const handleAddCompetitor = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n        name: competitorName,\n        event_id: eventId,\n        category,\n        sub_category: subCategory,\n        board_type: boardType,\n        gender,\n        age_category: ageCategory\n      });\n      alert(\"Competitor added successfully\");\n      setCompetitorName(\"\");\n      setCategory(categories[0]);\n      setSubCategory(subCategories[0]);\n      setBoardType(categories[0]);\n      setGender(subCategories[0]);\n      setAgeCategory(ageCategories[0]);\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error adding competitor:\", error);\n      alert(\"Error adding competitor\");\n    }\n  };\n  const handleDeleteCompetitor = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\n      alert(\"Competitor deleted successfully\");\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error deleting competitor:\", error);\n      alert(\"Error deleting competitor\");\n    }\n  };\n  const handleAddJudge = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n        name: judgeName,\n        event_id: eventId\n      });\n      alert(\"Judge added successfully\");\n      setJudgeName(\"\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error adding judge:\", error);\n      alert(\"Error adding judge\");\n    }\n  };\n  const handleDeleteJudge = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\n      alert(\"Judge deleted successfully\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error deleting judge:\", error);\n      alert(\"Error deleting judge\");\n    }\n  };\n  const handleSaveRounds = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\n        eventId,\n        rounds: rounds.map(round => ({\n          name: round.name,\n          category: round.category,\n          sub_category: round.sub_category,\n          board_type: round.board_type,\n          gender: round.gender,\n          age_category: round.age_category,\n          heats: round.heats.map(heat => ({\n            heat_name: heat.name,\n            competitors: heat.competitors\n          }))\n        }))\n      });\n      alert(\"Rounds saved successfully\");\n    } catch (error) {\n      console.error(\"Error saving rounds:\", error);\n      alert(\"Error saving rounds\");\n    }\n  };\n  const handleFetchRounds = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\n      const rounds = response.data;\n      const processedRounds = rounds.map(round => {\n        return {\n          ...round,\n          heats: round.heats.map(heat => ({\n            ...heat,\n            competitors: heat.competitors.map(competitor => ({\n              id: competitor.id,\n              name: competitor.name\n            }))\n          }))\n        };\n      });\n      setRounds(processedRounds);\n    } catch (error) {\n      console.error(\"Error fetching rounds:\", error);\n      alert(\"Error fetching rounds\");\n    }\n  };\n\n  // const handleFetchRounds = async () => {\n  //   try {\n  //     const response = await axios.get(\n  //       `http://localhost:3000/event-admin/get-rounds/${eventId}`\n  //     );\n  //     const { rounds } = response.data;\n\n  //     const processedRounds = rounds.map((round) => {\n  //       return {\n  //         ...round,\n  //         heats: round.heats.map((heat) => ({\n  //           ...heat,\n  //           competitors: heat.competitors.map((competitor) => ({\n  //             id: competitor.id,\n  //             name: competitor.name,\n  //           })),\n  //         })),\n  //       };\n  //     });\n\n  //     setRounds(processedRounds);\n  //   } catch (error) {\n  //     console.error(\"Error fetching rounds:\", error);\n  //     alert(\"Error fetching rounds\");\n  //   }\n  // };\n\n  const handleGeneratePDF = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`, {\n        responseType: \"blob\"\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"rounds.pdf\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      alert(\"Error generating PDF\");\n    }\n  };\n  const handleCreateRounds = () => {\n    const newRounds = [];\n    const competitorsByCategory = {};\n\n    // Organize competitors by their categories and sub-categories\n    competitors.forEach(competitor => {\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n      if (!competitorsByCategory[key]) {\n        competitorsByCategory[key] = [];\n      }\n      competitorsByCategory[key].push(competitor);\n    });\n\n    // Create rounds and heats for each category\n    Object.keys(competitorsByCategory).forEach(key => {\n      const competitorsList = competitorsByCategory[key];\n      let roundNumber = 1;\n      let heatNumber = 1;\n      for (let i = 0; i < competitorsList.length; i += 4) {\n        const roundName = `Round ${roundNumber} (${key})`;\n        const heatCompetitors = competitorsList.slice(i, i + 4);\n        let round = newRounds.find(r => r.name === roundName);\n        if (!round) {\n          round = {\n            name: roundName,\n            category: competitorsList[0].category,\n            sub_category: competitorsList[0].sub_category,\n            board_type: competitorsList[0].board_type,\n            gender: competitorsList[0].gender,\n            age_category: competitorsList[0].age_category,\n            heats: []\n          };\n          newRounds.push(round);\n        }\n        round.heats.push({\n          id: `heat-${roundNumber}-${heatNumber}`,\n          name: `Heat ${heatNumber}`,\n          competitors: heatCompetitors\n        });\n        heatNumber++;\n        if (heatNumber > 4) {\n          heatNumber = 1;\n          roundNumber++;\n        }\n      }\n    });\n    setRounds(newRounds);\n  };\n  const handleDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n    const sourceHeatIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === result.source.droppableId));\n    const destinationHeatIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === result.destination.droppableId));\n    if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\n      return;\n    }\n    const sourceRound = rounds[sourceHeatIndex];\n    const destinationRound = rounds[destinationHeatIndex];\n    const sourceHeat = sourceRound.heats.find(heat => heat.id === result.source.droppableId);\n    const destinationHeat = destinationRound.heats.find(heat => heat.id === result.destination.droppableId);\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n    destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n    const updatedRounds = rounds.map(round => {\n      if (round.id === sourceRound.id) {\n        return sourceRound;\n      }\n      if (round.id === destinationRound.id) {\n        return destinationRound;\n      }\n      return round;\n    });\n    setRounds(updatedRounds);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1722,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateEvent,\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1726,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1736,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1734,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1745,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: location,\n          onChange: e => setLocation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1746,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1744,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1754,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1723,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Existing Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1759,\n      columnNumber: 7\n    }, this), events.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No events available. Please create an event.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1761,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `list-group-item d-flex justify-content-between align-items-center ${eventId === event.id ? \"active\" : \"\"}`,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          fetchCompetitors(event.id, event.name);\n          fetchJudges(event.id);\n        },\n        children: [event.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: () => handleDeleteEvent(event.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1777,\n          columnNumber: 15\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1765,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1763,\n      columnNumber: 9\n    }, this), eventId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Competitors for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1790,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddCompetitor,\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Competitor Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1793,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: competitorName,\n            onChange: e => setCompetitorName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1794,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1792,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1803,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: category,\n            onChange: e => setCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1810,\n              columnNumber: 17\n            }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat,\n              children: cat\n            }, cat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1812,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1804,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1802,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sub Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1819,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: subCategory,\n            onChange: e => setSubCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Sub Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1826,\n              columnNumber: 17\n            }, this), subCategories.map(subCat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: subCat,\n              children: subCat\n            }, subCat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1828,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1820,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1818,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Board Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1835,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: boardType,\n            onChange: e => setBoardType(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Board Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1842,\n              columnNumber: 17\n            }, this), categories.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: type,\n              children: type\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1844,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1836,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1834,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Gender:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1851,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: gender,\n            onChange: e => setGender(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Gender\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1858,\n              columnNumber: 17\n            }, this), subCategories.map(g => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: g,\n              children: g\n            }, g, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1860,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1852,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1850,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Age Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1867,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: ageCategory,\n            onChange: e => setAgeCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Age Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1874,\n              columnNumber: 17\n            }, this), ageCategories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat,\n              children: cat\n            }, cat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1876,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1868,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1866,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Add Competitor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1882,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1791,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Competitors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1887,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: competitors.map(competitor => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item d-flex justify-content-between align-items-center\",\n          children: [competitor.name, \" (Event: \", selectedEventName, \", Category:\", \" \", competitor.category, \", Sub Category: \", competitor.sub_category, \", Board Type: \", competitor.board_type, \", Gender: \", competitor.gender, \", Age Category: \", competitor.age_category, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => handleDeleteCompetitor(competitor.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1898,\n            columnNumber: 17\n          }, this)]\n        }, competitor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1890,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1888,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Judges for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1908,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddJudge,\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Judge Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1911,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: judgeName,\n            onChange: e => setJudgeName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1912,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1910,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Add Judge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1920,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1909,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Judges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1925,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: judges.map(judge => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item d-flex justify-content-between align-items-center\",\n          children: [judge.name, \" (Event: \", selectedEventName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => handleDeleteJudge(judge.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1933,\n            columnNumber: 17\n          }, this)]\n        }, judge.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1928,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1926,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1943,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mb-0\",\n        onClick: handleCreateRounds,\n        children: \"Create Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1944,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mt-0\",\n        onClick: handleSaveRounds,\n        children: \"Save Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1947,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info mt-0\",\n        onClick: handleFetchRounds,\n        children: \"Show All Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mt-0\",\n        onClick: handleGeneratePDF,\n        children: \"Generate PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1953,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragEnd,\n        children: rounds.map(round => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: round.id,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: round.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1969,\n              columnNumber: 21\n            }, this), round.heats.map((heat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: [\"Heat \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1972,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n                droppableId: heat.id,\n                children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.droppableProps,\n                  className: \"list-group\",\n                  children: [heat.competitors.map((competitor, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: competitor.id.toString(),\n                    index: idx,\n                    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: provided.innerRef,\n                      ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      className: \"list-group-item\",\n                      children: competitor.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1987,\n                      columnNumber: 37\n                    }, this)\n                  }, competitor.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1981,\n                    columnNumber: 33\n                  }, this)), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1975,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1973,\n                columnNumber: 25\n              }, this)]\n            }, heat.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1971,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1964,\n            columnNumber: 19\n          }, this)\n        }, round.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1962,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1960,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Saved Rounds for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2011,\n        columnNumber: 11\n      }, this), rounds.map((round, roundIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Round \", roundIndex + 1, \" (\", round.category, \", \", round.sub_category, \", \", round.age_category, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2014,\n          columnNumber: 15\n        }, this), round.heats.map((heat, heatIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"Heat \", heatIndex + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2020,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-group\",\n            children: heat.competitors.map((competitor, competitorIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"list-group-item\",\n              children: competitor.name\n            }, competitorIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2023,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2021,\n            columnNumber: 19\n          }, this)]\n        }, heatIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2019,\n          columnNumber: 17\n        }, this))]\n      }, roundIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2013,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Please select an event to manage competitors and judges.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2034,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1721,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"DDLEHJuAEYyQOeCvP2nhpy5nKyw=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","Fragment","_Fragment","categories","subCategories","ageCategories","EventManagement","_s","events","setEvents","competitors","setCompetitors","judges","setJudges","rounds","setRounds","eventId","setEventId","name","setName","date","setDate","location","setLocation","competitorName","setCompetitorName","category","setCategory","subCategory","setSubCategory","boardType","setBoardType","gender","setGender","ageCategory","setAgeCategory","judgeName","setJudgeName","createdBy","setCreatedBy","selectedEventName","setSelectedEventName","fetchEvents","response","get","data","error","console","fetchCompetitors","eventName","fetchJudges","handleCreateEvent","e","preventDefault","post","created_by","alert","handleDeleteEvent","id","delete","handleAddCompetitor","event_id","sub_category","board_type","age_category","handleDeleteCompetitor","handleAddJudge","handleDeleteJudge","handleSaveRounds","map","round","heats","heat","heat_name","handleFetchRounds","processedRounds","competitor","handleGeneratePDF","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","handleCreateRounds","newRounds","competitorsByCategory","forEach","key","push","Object","keys","competitorsList","roundNumber","heatNumber","i","length","roundName","heatCompetitors","slice","find","r","handleDragEnd","result","destination","sourceHeatIndex","findIndex","some","source","droppableId","destinationHeatIndex","sourceRound","destinationRound","sourceHeat","destinationHeat","movedItem","splice","index","updatedRounds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","event","style","cursor","onClick","cat","subCat","g","judge","onDragEnd","provided","ref","innerRef","droppableProps","idx","draggableId","toString","draggableProps","dragHandleProps","placeholder","roundIndex","heatIndex","competitorIndex","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/React_Projects/event-platform/client/src/components/EventManagement.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [heats, setHeats] = useState([]);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [competitorName, setCompetitorName] = useState(\"\");\r\n//   const [category, setCategory] = useState(categories[0]);\r\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n//   const [boardType, setBoardType] = useState(categories[0]);\r\n//   const [gender, setGender] = useState(subCategories[0]);\r\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n//   const [judgeName, setJudgeName] = useState(\"\");\r\n//   const [createdBy, setCreatedBy] = useState(1);\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"http://localhost:3000/event-admin/get-events\"\r\n//       );\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n//       );\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n//       );\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//         created_by: createdBy,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-event/${id}`\r\n//       );\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddCompetitor = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n//         name: competitorName,\r\n//         event_id: eventId,\r\n//         category,\r\n//         sub_category: subCategory,\r\n//         board_type: boardType,\r\n//         gender,\r\n//         age_category: ageCategory,\r\n//       });\r\n//       alert(\"Competitor added successfully\");\r\n//       setCompetitorName(\"\");\r\n//       setCategory(categories[0]);\r\n//       setSubCategory(subCategories[0]);\r\n//       setBoardType(categories[0]);\r\n//       setGender(subCategories[0]);\r\n//       setAgeCategory(ageCategories[0]);\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding competitor:\", error);\r\n//       alert(\"Error adding competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n//       );\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddJudge = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n//         name: judgeName,\r\n//         event_id: eventId,\r\n//       });\r\n//       alert(\"Judge added successfully\");\r\n//       setJudgeName(\"\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding judge:\", error);\r\n//       alert(\"Error adding judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n//       );\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:3000/event-admin/save-rounds\",\r\n//         {\r\n//           eventId,\r\n//           rounds: rounds.map((round) => ({\r\n//             name: round.name,\r\n//             category: round.category,\r\n//             sub_category: round.sub_category,\r\n//             board_type: round.board_type,\r\n//             gender: round.gender,\r\n//             age_category: round.age_category,\r\n//             heats: round.heats.map((heat) => ({\r\n//               heat_name: heat.name,\r\n//               competitors: heat.competitors,\r\n//             })),\r\n//           })),\r\n//         }\r\n//       );\r\n//       alert(\"Rounds saved successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFetchRounds = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n//       );\r\n//       const { rounds } = response.data;\r\n  \r\n//       const processedRounds = rounds.map((round) => {\r\n//         return {\r\n//           ...round,\r\n//           heats: round.heats.map((heat) => ({\r\n//             ...heat,\r\n//             competitors: heat.competitors.map((competitor) => ({\r\n//               id: competitor.id,\r\n//               name: competitor.name,\r\n//               category: competitor.category,\r\n//               sub_category: competitor.sub_category,\r\n//               board_type: competitor.board_type,\r\n//               gender: competitor.gender,\r\n//               age_category: competitor.age_category,\r\n//             })),\r\n//           })),\r\n//         };\r\n//       });\r\n  \r\n//       setRounds(processedRounds);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rounds:\", error);\r\n//       alert(\"Error fetching rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const handleGeneratePDF = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\r\n//         { responseType: \"blob\" }\r\n//       );\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement(\"a\");\r\n//       link.href = url;\r\n//       link.setAttribute(\"download\", \"rounds.pdf\");\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//     } catch (error) {\r\n//       console.error(\"Error generating PDF:\", error);\r\n//       alert(\"Error generating PDF\");\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateRounds = () => {\r\n//     const newRounds = [];\r\n//     const competitorsByCategory = {};\r\n\r\n//     // Organize competitors by their categories and sub-categories\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n\r\n//     // Create rounds and heats for each category\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       let roundNumber = 1;\r\n//       let heatNumber = 1;\r\n\r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const roundName = `Round ${roundNumber} (${key})`;\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n//         let round = newRounds.find((r) => r.name === roundName);\r\n//         if (!round) {\r\n//           round = {\r\n//             name: roundName,\r\n//             category: competitorsList[0].category,\r\n//             sub_category: competitorsList[0].sub_category,\r\n//             board_type: competitorsList[0].board_type,\r\n//             gender: competitorsList[0].gender,\r\n//             age_category: competitorsList[0].age_category,\r\n//             heats: [],\r\n//           };\r\n//           newRounds.push(round);\r\n//         }\r\n\r\n//         round.heats.push({\r\n//           id: `heat-${roundNumber}-${heatNumber}`,\r\n//           name: `Heat ${heatNumber}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n\r\n//         heatNumber++;\r\n//         if (heatNumber > 4) {\r\n//           heatNumber = 1;\r\n//           roundNumber++;\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     setRounds(newRounds);\r\n//   };\r\n\r\n//   const handleDragEnd = (result) => {\r\n//     if (!result.destination) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceHeatIndex = heats.findIndex(\r\n//       (heat) => heat.id === result.source.droppableId\r\n//     );\r\n//     const destinationHeatIndex = heats.findIndex(\r\n//       (heat) => heat.id === result.destination.droppableId\r\n//     );\r\n\r\n//     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceHeat = heats[sourceHeatIndex];\r\n//     const destinationHeat = heats[destinationHeatIndex];\r\n\r\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n//     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\r\n\r\n//     const updatedHeats = heats.map((heat) => {\r\n//       if (heat.id === sourceHeat.id) {\r\n//         return sourceHeat;\r\n//       }\r\n//       if (heat.id === destinationHeat.id) {\r\n//         return destinationHeat;\r\n//       }\r\n//       return heat;\r\n//     });\r\n\r\n//     setHeats(updatedHeats);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h2>Manage Events</h2>\r\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//         <div className=\"form-group\">\r\n//           <label>Event Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={name}\r\n//             onChange={(e) => setName(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             className=\"form-control\"\r\n//             value={date}\r\n//             onChange={(e) => setDate(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Location:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={location}\r\n//             onChange={(e) => setLocation(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//           Create Event\r\n//         </button>\r\n//       </form>\r\n\r\n//       <h3>Existing Events</h3>\r\n//       {events.length === 0 ? (\r\n//         <p>No events available. Please create an event.</p>\r\n//       ) : (\r\n//         <ul className=\"list-group\">\r\n//           {events.map((event) => (\r\n//             <li\r\n//               key={event.id}\r\n//               className={`list-group-item d-flex justify-content-between align-items-center ${\r\n//                 eventId === event.id ? \"active\" : \"\"\r\n//               }`}\r\n//               style={{ cursor: \"pointer\" }}\r\n//               onClick={() => {\r\n//                 fetchCompetitors(event.id, event.name);\r\n//                 fetchJudges(event.id);\r\n//               }}\r\n//             >\r\n//               {event.name}\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() => handleDeleteEvent(event.id)}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n\r\n//       {eventId ? (\r\n//         <>\r\n//           <h3>Manage Competitors for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Competitor Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"form-control\"\r\n//                 value={competitorName}\r\n//                 onChange={(e) => setCompetitorName(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={category}\r\n//                 onChange={(e) => setCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Category</option>\r\n//                 {categories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Sub Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={subCategory}\r\n//                 onChange={(e) => setSubCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Sub Category</option>\r\n//                 {subCategories.map((subCat) => (\r\n//                   <option key={subCat} value={subCat}>\r\n//                     {subCat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Board Type:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={boardType}\r\n//                 onChange={(e) => setBoardType(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Board Type</option>\r\n//                 {categories.map((type) => (\r\n//                   <option key={type} value={type}>\r\n//                     {type}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Gender:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={gender}\r\n//                 onChange={(e) => setGender(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Gender</option>\r\n//                 {subCategories.map((g) => (\r\n//                   <option key={g} value={g}>\r\n//                     {g}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Age Category:</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 value={ageCategory}\r\n//                 onChange={(e) => setAgeCategory(e.target.value)}\r\n//                 required\r\n//               >\r\n//                 <option value=\"\">Select Age Category</option>\r\n//                 {ageCategories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Competitor\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Competitors</h3>\r\n//           <ul className=\"list-group\">\r\n//             {competitors.map((competitor) => (\r\n//               <li\r\n//                 key={competitor.id}\r\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//               >\r\n//                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n//                 {competitor.category}, Sub Category: {competitor.sub_category},\r\n//                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n//                 , Age Category: {competitor.age_category})\r\n//                 <button\r\n//                   className=\"btn btn-danger\"\r\n//                   onClick={() => handleDeleteCompetitor(competitor.id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Manage Judges for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Judge Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"form-control\"\r\n//                 value={judgeName}\r\n//                 onChange={(e) => setJudgeName(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Judge\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Judges</h3>\r\n//           <ul className=\"list-group\">\r\n//             {judges.map((judge) => (\r\n//               <li\r\n//                 key={judge.id}\r\n//                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//               >\r\n//                 {judge.name} (Event: {selectedEventName})\r\n//                 <button\r\n//                   className=\"btn btn-danger\"\r\n//                   onClick={() => handleDeleteJudge(judge.id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Rounds</h3>\r\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//             Create Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//             Save Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n//             Show All Rounds\r\n//           </button>\r\n//           <button\r\n//             className=\"btn btn-secondary mt-0\"\r\n//             onClick={handleGeneratePDF}\r\n//           >\r\n//             Generate PDF\r\n//           </button>\r\n\r\n//           <DragDropContext onDragEnd={handleDragEnd}>\r\n//             {rounds.map((round) => (\r\n//               <Droppable droppableId={round.id} key={round.id}>\r\n//                 {(provided) => (\r\n//                   <div\r\n//                     ref={provided.innerRef}\r\n//                     {...provided.droppableProps}\r\n//                     className=\"mb-4\"\r\n//                   >\r\n//                     <h4>{round.name}</h4>\r\n//                     {heats\r\n//                       .filter((heat) => heat.id.startsWith(`heat-${round.id}`))\r\n//                       .map((heat, index) => (\r\n//                         <div key={heat.id}>\r\n//                           <h5>Heat {index + 1}</h5>\r\n//                           <Droppable droppableId={heat.id}>\r\n//                             {(provided) => (\r\n//                               <div\r\n//                                 ref={provided.innerRef}\r\n//                                 {...provided.droppableProps}\r\n//                                 className=\"list-group\"\r\n//                               >\r\n//                                 {heat.competitors.map((competitor, idx) => (\r\n//                                   <Draggable\r\n//                                     key={competitor.id}\r\n//                                     draggableId={competitor.id.toString()}\r\n//                                     index={idx}\r\n//                                   >\r\n//                                     {(provided) => (\r\n//                                       <div\r\n//                                         ref={provided.innerRef}\r\n//                                         {...provided.draggableProps}\r\n//                                         {...provided.dragHandleProps}\r\n//                                         className=\"list-group-item\"\r\n//                                       >\r\n//                                         {competitor.name}\r\n//                                       </div>\r\n//                                     )}\r\n//                                   </Draggable>\r\n//                                 ))}\r\n//                                 {provided.placeholder}\r\n//                               </div>\r\n//                             )}\r\n//                           </Droppable>\r\n//                         </div>\r\n//                       ))}\r\n//                     {provided.placeholder}\r\n//                   </div>\r\n//                 )}\r\n//               </Droppable>\r\n//             ))}\r\n//           </DragDropContext>\r\n\r\n//           <h3>Rounds for {selectedEventName}</h3>\r\n//           {rounds.map((round, roundIndex) => (\r\n//             <div key={roundIndex} className=\"mb-4\">\r\n//               <h4>\r\n//                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\r\n//                 {round.board_type}, {round.gender}, {round.age_category})\r\n//               </h4>\r\n//               {round.heats.map((heat, heatIndex) => (\r\n//                 <div key={heatIndex} className=\"mb-2\">\r\n//                   <h5>Heat {heatIndex + 1}</h5>\r\n//                   <ul className=\"list-group\">\r\n//                     {heat.competitors.map((competitor, competitorIndex) => (\r\n//                       <li key={competitorIndex} className=\"list-group-item\">\r\n//                         {competitor.name}\r\n//                       </li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ))}\r\n//         </>\r\n//       ) : (\r\n//         <p className=\"mt-4\">\r\n//           Please select an event to manage competitors and judges.\r\n//         </p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import axios from \"axios\";\r\n// // import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// // import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// // const categories = [\"Shortboard\", \"Longboard\"];\r\n// // const subCategories = [\"Men\", \"Women\"];\r\n// // const ageCategories = [\r\n// //   \"Open\",\r\n// //   \"Sub12\",\r\n// //   \"Sub14\",\r\n// //   \"Sub18\",\r\n// //   \"Professional\",\r\n// //   \"+40\",\r\n// //   \"+45\",\r\n// //   \"+50\",\r\n// //   \"+60\",\r\n// //   \"+65\",\r\n// //   \"+70\",\r\n// // ];\r\n\r\n// // const EventManagement = () => {\r\n// //   const [events, setEvents] = useState([]);\r\n// //   const [competitors, setCompetitors] = useState([]);\r\n// //   const [judges, setJudges] = useState([]);\r\n// //   const [rounds, setRounds] = useState([]);\r\n// //   const [heats, setHeats] = useState([]);\r\n// //   const [eventId, setEventId] = useState(null);\r\n// //   const [name, setName] = useState(\"\");\r\n// //   const [date, setDate] = useState(\"\");\r\n// //   const [location, setLocation] = useState(\"\");\r\n// //   const [competitorName, setCompetitorName] = useState(\"\");\r\n// //   const [category, setCategory] = useState(categories[0]);\r\n// //   const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n// //   const [boardType, setBoardType] = useState(categories[0]);\r\n// //   const [gender, setGender] = useState(subCategories[0]);\r\n// //   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n// //   const [judgeName, setJudgeName] = useState(\"\");\r\n// //   const [createdBy, setCreatedBy] = useState(1);\r\n// //   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n// //   useEffect(() => {\r\n// //     fetchEvents();\r\n// //   }, []);\r\n\r\n// //   const fetchEvents = async () => {\r\n// //     try {\r\n// //       const response = await axios.get(\r\n// //         \"http://localhost:3000/event-admin/get-events\"\r\n// //       );\r\n// //       setEvents(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching events:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchCompetitors = async (eventId, eventName) => {\r\n// //     try {\r\n// //       const response = await axios.get(\r\n// //         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n// //       );\r\n// //       setCompetitors(response.data);\r\n// //       setEventId(eventId);\r\n// //       setSelectedEventName(eventName);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching competitors:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchJudges = async (eventId) => {\r\n// //     try {\r\n// //       const response = await axios.get(\r\n// //         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n// //       );\r\n// //       setJudges(response.data);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching judges:\", error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleCreateEvent = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n// //         name,\r\n// //         date,\r\n// //         location,\r\n// //         created_by: createdBy,\r\n// //       });\r\n// //       alert(\"Event created successfully\");\r\n// //       setName(\"\");\r\n// //       setDate(\"\");\r\n// //       setLocation(\"\");\r\n// //       fetchEvents();\r\n// //     } catch (error) {\r\n// //       console.error(\"Error creating event:\", error);\r\n// //       alert(\"Error creating event\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleDeleteEvent = async (id) => {\r\n// //     try {\r\n// //       await axios.delete(\r\n// //         `http://localhost:3000/event-admin/delete-event/${id}`\r\n// //       );\r\n// //       alert(\"Event deleted successfully\");\r\n// //       fetchEvents();\r\n// //     } catch (error) {\r\n// //       console.error(\"Error deleting event:\", error);\r\n// //       alert(\"Error deleting event\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleAddCompetitor = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n// //         name: competitorName,\r\n// //         event_id: eventId,\r\n// //         category,\r\n// //         sub_category: subCategory,\r\n// //         board_type: boardType,\r\n// //         gender,\r\n// //         age_category: ageCategory,\r\n// //       });\r\n// //       alert(\"Competitor added successfully\");\r\n// //       setCompetitorName(\"\");\r\n// //       setCategory(categories[0]);\r\n// //       setSubCategory(subCategories[0]);\r\n// //       setBoardType(categories[0]);\r\n// //       setGender(subCategories[0]);\r\n// //       setAgeCategory(ageCategories[0]);\r\n// //       fetchCompetitors(eventId, selectedEventName);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error adding competitor:\", error);\r\n// //       alert(\"Error adding competitor\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleDeleteCompetitor = async (id) => {\r\n// //     try {\r\n// //       await axios.delete(\r\n// //         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n// //       );\r\n// //       alert(\"Competitor deleted successfully\");\r\n// //       fetchCompetitors(eventId, selectedEventName);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error deleting competitor:\", error);\r\n// //       alert(\"Error deleting competitor\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleAddJudge = async (e) => {\r\n// //     e.preventDefault();\r\n// //     try {\r\n// //       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n// //         name: judgeName,\r\n// //         event_id: eventId,\r\n// //       });\r\n// //       alert(\"Judge added successfully\");\r\n// //       setJudgeName(\"\");\r\n// //       fetchJudges(eventId);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error adding judge:\", error);\r\n// //       alert(\"Error adding judge\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleDeleteJudge = async (id) => {\r\n// //     try {\r\n// //       await axios.delete(\r\n// //         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n// //       );\r\n// //       alert(\"Judge deleted successfully\");\r\n// //       fetchJudges(eventId);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error deleting judge:\", error);\r\n// //       alert(\"Error deleting judge\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleSaveRounds = async () => {\r\n// //     try {\r\n// //       const response = await axios.post(\r\n// //         \"http://localhost:3000/event-admin/save-rounds\",\r\n// //         {\r\n// //           eventId,\r\n// //           rounds: rounds.map((round) => ({\r\n// //             name: round.name,\r\n// //             category: round.category,\r\n// //             sub_category: round.sub_category,\r\n// //             board_type: round.board_type,\r\n// //             gender: round.gender,\r\n// //             age_category: round.age_category,\r\n// //             heats: round.heats.map((heat) => ({\r\n// //               heat_name: heat.name,\r\n// //               competitors: heat.competitors,\r\n// //             })),\r\n// //           })),\r\n// //         }\r\n// //       );\r\n// //       alert(\"Rounds saved successfully\");\r\n// //     } catch (error) {\r\n// //       console.error(\"Error saving rounds:\", error);\r\n// //       alert(\"Error saving rounds\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleFetchRounds = async () => {\r\n// //     try {\r\n// //       const response = await axios.get(\r\n// //         `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n// //       );\r\n\r\n// //       const rounds = response.data;\r\n// //       const processedRounds = rounds.map((round) => {\r\n// //         return {\r\n// //           ...round,\r\n// //           heats: round.heats.map((heat) => ({\r\n// //             ...heat,\r\n// //             competitors: heat.competitors.map((competitor) => ({\r\n// //               id: competitor.id,\r\n// //               name: competitor.name,\r\n// //             })),\r\n// //           })),\r\n// //         };\r\n// //       });\r\n\r\n// //       setRounds(processedRounds);\r\n// //     } catch (error) {\r\n// //       console.error(\"Error fetching rounds:\", error);\r\n// //       alert(\"Error fetching rounds\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleGeneratePDF = async () => {\r\n// //     try {\r\n// //       const response = await axios.get(\r\n// //         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\r\n// //         { responseType: \"blob\" }\r\n// //       );\r\n// //       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n// //       const link = document.createElement(\"a\");\r\n// //       link.href = url;\r\n// //       link.setAttribute(\"download\", \"rounds.pdf\");\r\n// //       document.body.appendChild(link);\r\n// //       link.click();\r\n// //     } catch (error) {\r\n// //       console.error(\"Error generating PDF:\", error);\r\n// //       alert(\"Error generating PDF\");\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleCreateRounds = () => {\r\n// //     const newRounds = [];\r\n// //     const competitorsByCategory = {};\r\n\r\n// //     // Organize competitors by their categories and sub-categories\r\n// //     competitors.forEach((competitor) => {\r\n// //       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n// //       if (!competitorsByCategory[key]) {\r\n// //         competitorsByCategory[key] = [];\r\n// //       }\r\n// //       competitorsByCategory[key].push(competitor);\r\n// //     });\r\n\r\n// //     // Create rounds and heats for each category\r\n// //     Object.keys(competitorsByCategory).forEach((key) => {\r\n// //       const competitorsList = competitorsByCategory[key];\r\n// //       let roundNumber = 1;\r\n// //       let heatNumber = 1;\r\n\r\n// //       for (let i = 0; i < competitorsList.length; i += 4) {\r\n// //         const roundName = `Round ${roundNumber} (${key})`;\r\n// //         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n// //         let round = newRounds.find((r) => r.name === roundName);\r\n// //         if (!round) {\r\n// //           round = {\r\n// //             name: roundName,\r\n// //             category: competitorsList[0].category,\r\n// //             sub_category: competitorsList[0].sub_category,\r\n// //             board_type: competitorsList[0].board_type,\r\n// //             gender: competitorsList[0].gender,\r\n// //             age_category: competitorsList[0].age_category,\r\n// //             heats: [],\r\n// //           };\r\n// //           newRounds.push(round);\r\n// //         }\r\n\r\n// //         round.heats.push({\r\n// //           id: `heat-${roundNumber}-${heatNumber}`,\r\n// //           name: `Heat ${heatNumber}`,\r\n// //           competitors: heatCompetitors,\r\n// //         });\r\n\r\n// //         heatNumber++;\r\n// //         if (heatNumber > 4) {\r\n// //           heatNumber = 1;\r\n// //           roundNumber++;\r\n// //         }\r\n// //       }\r\n// //     });\r\n\r\n// //     setRounds(newRounds);\r\n// //   };\r\n\r\n// //   const handleDragEnd = (result) => {\r\n// //     if (!result.destination) {\r\n// //       return;\r\n// //     }\r\n\r\n// //     const sourceHeatIndex = heats.findIndex(\r\n// //       (heat) => heat.id === result.source.droppableId\r\n// //     );\r\n// //     const destinationHeatIndex = heats.findIndex(\r\n// //       (heat) => heat.id === result.destination.droppableId\r\n// //     );\r\n\r\n// //     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\r\n// //       return;\r\n// //     }\r\n\r\n// //     const sourceHeat = heats[sourceHeatIndex];\r\n// //     const destinationHeat = heats[destinationHeatIndex];\r\n\r\n// //     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n// //     destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\r\n\r\n// //     const updatedHeats = heats.map((heat) => {\r\n// //       if (heat.id === sourceHeat.id) {\r\n// //         return sourceHeat;\r\n// //       }\r\n// //       if (heat.id === destinationHeat.id) {\r\n// //         return destinationHeat;\r\n// //       }\r\n// //       return heat;\r\n// //     });\r\n\r\n// //     setHeats(updatedHeats);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"container mt-5\">\r\n// //       <h2>Manage Events</h2>\r\n// //       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n// //         <div className=\"form-group\">\r\n// //           <label>Event Name:</label>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             className=\"form-control\"\r\n// //             value={name}\r\n// //             onChange={(e) => setName(e.target.value)}\r\n// //             required\r\n// //           />\r\n// //         </div>\r\n// //         <div className=\"form-group mt-3\">\r\n// //           <label>Date:</label>\r\n// //           <input\r\n// //             type=\"date\"\r\n// //             className=\"form-control\"\r\n// //             value={date}\r\n// //             onChange={(e) => setDate(e.target.value)}\r\n// //             required\r\n// //           />\r\n// //         </div>\r\n// //         <div className=\"form-group mt-3\">\r\n// //           <label>Location:</label>\r\n// //           <input\r\n// //             type=\"text\"\r\n// //             className=\"form-control\"\r\n// //             value={location}\r\n// //             onChange={(e) => setLocation(e.target.value)}\r\n// //             required\r\n// //           />\r\n// //         </div>\r\n// //         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n// //           Create Event\r\n// //         </button>\r\n// //       </form>\r\n\r\n// //       <h3>Existing Events</h3>\r\n// //       {events.length === 0 ? (\r\n// //         <p>No events available. Please create an event.</p>\r\n// //       ) : (\r\n// //         <ul className=\"list-group\">\r\n// //           {events.map((event) => (\r\n// //             <li\r\n// //               key={event.id}\r\n// //               className={`list-group-item d-flex justify-content-between align-items-center ${\r\n// //                 eventId === event.id ? \"active\" : \"\"\r\n// //               }`}\r\n// //               style={{ cursor: \"pointer\" }}\r\n// //               onClick={() => {\r\n// //                 fetchCompetitors(event.id, event.name);\r\n// //                 fetchJudges(event.id);\r\n// //               }}\r\n// //             >\r\n// //               {event.name}\r\n// //               <button\r\n// //                 className=\"btn btn-danger\"\r\n// //                 onClick={() => handleDeleteEvent(event.id)}\r\n// //               >\r\n// //                 Delete\r\n// //               </button>\r\n// //             </li>\r\n// //           ))}\r\n// //         </ul>\r\n// //       )}\r\n\r\n// //       {eventId ? (\r\n// //         <>\r\n// //           <h3>Manage Competitors for {selectedEventName}</h3>\r\n// //           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n// //             <div className=\"form-group\">\r\n// //               <label>Competitor Name:</label>\r\n// //               <input\r\n// //                 type=\"text\"\r\n// //                 className=\"form-control\"\r\n// //                 value={competitorName}\r\n// //                 onChange={(e) => setCompetitorName(e.target.value)}\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //             <div className=\"form-group mt-3\">\r\n// //               <label>Category:</label>\r\n// //               <select\r\n// //                 className=\"form-control\"\r\n// //                 value={category}\r\n// //                 onChange={(e) => setCategory(e.target.value)}\r\n// //                 required\r\n// //               >\r\n// //                 <option value=\"\">Select Category</option>\r\n// //                 {categories.map((cat) => (\r\n// //                   <option key={cat} value={cat}>\r\n// //                     {cat}\r\n// //                   </option>\r\n// //                 ))}\r\n// //               </select>\r\n// //             </div>\r\n// //             <div className=\"form-group mt-3\">\r\n// //               <label>Sub Category:</label>\r\n// //               <select\r\n// //                 className=\"form-control\"\r\n// //                 value={subCategory}\r\n// //                 onChange={(e) => setSubCategory(e.target.value)}\r\n// //                 required\r\n// //               >\r\n// //                 <option value=\"\">Select Sub Category</option>\r\n// //                 {subCategories.map((subCat) => (\r\n// //                   <option key={subCat} value={subCat}>\r\n// //                     {subCat}\r\n// //                   </option>\r\n// //                 ))}\r\n// //               </select>\r\n// //             </div>\r\n// //             <div className=\"form-group mt-3\">\r\n// //               <label>Board Type:</label>\r\n// //               <select\r\n// //                 className=\"form-control\"\r\n// //                 value={boardType}\r\n// //                 onChange={(e) => setBoardType(e.target.value)}\r\n// //                 required\r\n// //               >\r\n// //                 <option value=\"\">Select Board Type</option>\r\n// //                 {categories.map((type) => (\r\n// //                   <option key={type} value={type}>\r\n// //                     {type}\r\n// //                   </option>\r\n// //                 ))}\r\n// //               </select>\r\n// //             </div>\r\n// //             <div className=\"form-group mt-3\">\r\n// //               <label>Gender:</label>\r\n// //               <select\r\n// //                 className=\"form-control\"\r\n// //                 value={gender}\r\n// //                 onChange={(e) => setGender(e.target.value)}\r\n// //                 required\r\n// //               >\r\n// //                 <option value=\"\">Select Gender</option>\r\n// //                 {subCategories.map((g) => (\r\n// //                   <option key={g} value={g}>\r\n// //                     {g}\r\n// //                   </option>\r\n// //                 ))}\r\n// //               </select>\r\n// //             </div>\r\n// //             <div className=\"form-group mt-3\">\r\n// //               <label>Age Category:</label>\r\n// //               <select\r\n// //                 className=\"form-control\"\r\n// //                 value={ageCategory}\r\n// //                 onChange={(e) => setAgeCategory(e.target.value)}\r\n// //                 required\r\n// //               >\r\n// //                 <option value=\"\">Select Age Category</option>\r\n// //                 {ageCategories.map((cat) => (\r\n// //                   <option key={cat} value={cat}>\r\n// //                     {cat}\r\n// //                   </option>\r\n// //                 ))}\r\n// //               </select>\r\n// //             </div>\r\n// //             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n// //               Add Competitor\r\n// //             </button>\r\n// //           </form>\r\n\r\n// //           <h3>Existing Competitors</h3>\r\n// //           <ul className=\"list-group\">\r\n// //             {competitors.map((competitor) => (\r\n// //               <li\r\n// //                 key={competitor.id}\r\n// //                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n// //               >\r\n// //                 {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n// //                 {competitor.category}, Sub Category: {competitor.sub_category},\r\n// //                 Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n// //                 , Age Category: {competitor.age_category})\r\n// //                 <button\r\n// //                   className=\"btn btn-danger\"\r\n// //                   onClick={() => handleDeleteCompetitor(competitor.id)}\r\n// //                 >\r\n// //                   Delete\r\n// //                 </button>\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n\r\n// //           <h3>Manage Judges for {selectedEventName}</h3>\r\n// //           <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n// //             <div className=\"form-group\">\r\n// //               <label>Judge Name:</label>\r\n// //               <input\r\n// //                 type=\"text\"\r\n// //                 className=\"form-control\"\r\n// //                 value={judgeName}\r\n// //                 onChange={(e) => setJudgeName(e.target.value)}\r\n// //                 required\r\n// //               />\r\n// //             </div>\r\n// //             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n// //               Add Judge\r\n// //             </button>\r\n// //           </form>\r\n\r\n// //           <h3>Existing Judges</h3>\r\n// //           <ul className=\"list-group\">\r\n// //             {judges.map((judge) => (\r\n// //               <li\r\n// //                 key={judge.id}\r\n// //                 className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n// //               >\r\n// //                 {judge.name} (Event: {selectedEventName})\r\n// //                 <button\r\n// //                   className=\"btn btn-danger\"\r\n// //                   onClick={() => handleDeleteJudge(judge.id)}\r\n// //                 >\r\n// //                   Delete\r\n// //                 </button>\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n\r\n// //           <h3>Rounds</h3>\r\n// //           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n// //             Create Rounds\r\n// //           </button>\r\n// //           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n// //             Save Rounds\r\n// //           </button>\r\n// //           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n// //             Show All Rounds\r\n// //           </button>\r\n// //           <button\r\n// //             className=\"btn btn-secondary mt-0\"\r\n// //             onClick={handleGeneratePDF}\r\n// //           >\r\n// //             Generate PDF\r\n// //           </button>\r\n\r\n// //           <DragDropContext onDragEnd={handleDragEnd}>\r\n// //             {rounds.map((round) => (\r\n// //               <Droppable droppableId={round.id} key={round.id}>\r\n// //                 {(provided) => (\r\n// //                   <div\r\n// //                     ref={provided.innerRef}\r\n// //                     {...provided.droppableProps}\r\n// //                     className=\"mb-4\"\r\n// //                   >\r\n// //                     <h4>{round.name}</h4>\r\n// //                     {round.heats.map((heat, index) => (\r\n// //                       <div key={heat.id}>\r\n// //                         <h5>Heat {index + 1}</h5>\r\n// //                         <Droppable droppableId={heat.id}>\r\n// //                           {(provided) => (\r\n// //                             <div\r\n// //                               ref={provided.innerRef}\r\n// //                               {...provided.droppableProps}\r\n// //                               className=\"list-group\"\r\n// //                             >\r\n// //                               {heat.competitors.map((competitor, idx) => (\r\n// //                                 <Draggable\r\n// //                                   key={competitor.id}\r\n// //                                   draggableId={competitor.id.toString()}\r\n// //                                   index={idx}\r\n// //                                 >\r\n// //                                   {(provided) => (\r\n// //                                     <div\r\n// //                                       ref={provided.innerRef}\r\n// //                                       {...provided.draggableProps}\r\n// //                                       {...provided.dragHandleProps}\r\n// //                                       className=\"list-group-item\"\r\n// //                                     >\r\n// //                                       {competitor.name}\r\n// //                                     </div>\r\n// //                                   )}\r\n// //                                 </Draggable>\r\n// //                               ))}\r\n// //                               {provided.placeholder}\r\n// //                             </div>\r\n// //                           )}\r\n// //                         </Droppable>\r\n// //                       </div>\r\n// //                     ))}\r\n// //                     {provided.placeholder}\r\n// //                   </div>\r\n// //                 )}\r\n// //               </Droppable>\r\n// //             ))}\r\n// //           </DragDropContext>\r\n\r\n// //           <h3>Rounds for {selectedEventName}</h3>\r\n// //           {rounds.map((round, roundIndex) => (\r\n// //             <div key={roundIndex} className=\"mb-4\">\r\n// //               <h4>\r\n// //                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\r\n// //                 {round.board_type}, {round.gender}, {round.age_category})\r\n// //               </h4>\r\n// //               {round.heats.map((heat, heatIndex) => (\r\n// //                 <div key={heatIndex} className=\"mb-2\">\r\n// //                   <h5>Heat {heatIndex + 1}</h5>\r\n// //                   <ul className=\"list-group\">\r\n// //                     {heat.competitors.map((competitor, competitorIndex) => (\r\n// //                       <li key={competitorIndex} className=\"list-group-item\">\r\n// //                         {competitor.name}\r\n// //                       </li>\r\n// //                     ))}\r\n// //                   </ul>\r\n// //                 </div>\r\n// //               ))}\r\n// //             </div>\r\n// //           ))}\r\n// //         </>\r\n// //       ) : (\r\n// //         <p className=\"mt-4\">\r\n// //           Please select an event to manage competitors and judges.\r\n// //         </p>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EventManagement;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst categories = [\"Shortboard\", \"Longboard\"];\r\nconst subCategories = [\"Men\", \"Women\"];\r\nconst ageCategories = [\r\n  \"Open\",\r\n  \"Sub12\",\r\n  \"Sub14\",\r\n  \"Sub18\",\r\n  \"Professional\",\r\n  \"+40\",\r\n  \"+45\",\r\n  \"+50\",\r\n  \"+60\",\r\n  \"+65\",\r\n  \"+70\",\r\n];\r\n\r\nconst EventManagement = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [competitors, setCompetitors] = useState([]);\r\n  const [judges, setJudges] = useState([]);\r\n  const [rounds, setRounds] = useState([]);\r\n  \r\n  const [eventId, setEventId] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [competitorName, setCompetitorName] = useState(\"\");\r\n  const [category, setCategory] = useState(categories[0]);\r\n  const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n  const [boardType, setBoardType] = useState(categories[0]);\r\n  const [gender, setGender] = useState(subCategories[0]);\r\n  const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n  const [judgeName, setJudgeName] = useState(\"\");\r\n  const [createdBy, setCreatedBy] = useState(1);\r\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3000/event-admin/get-events\"\r\n      );\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching events:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchCompetitors = async (eventId, eventName) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n      );\r\n      setCompetitors(response.data);\r\n      setEventId(eventId);\r\n      setSelectedEventName(eventName);\r\n    } catch (error) {\r\n      console.error(\"Error fetching competitors:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchJudges = async (eventId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n      );\r\n      setJudges(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching judges:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCreateEvent = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n        name,\r\n        date,\r\n        location,\r\n        created_by: createdBy,\r\n      });\r\n      alert(\"Event created successfully\");\r\n      setName(\"\");\r\n      setDate(\"\");\r\n      setLocation(\"\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error creating event:\", error);\r\n      alert(\"Error creating event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-event/${id}`\r\n      );\r\n      alert(\"Event deleted successfully\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n      alert(\"Error deleting event\");\r\n    }\r\n  };\r\n\r\n  const handleAddCompetitor = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n        name: competitorName,\r\n        event_id: eventId,\r\n        category,\r\n        sub_category: subCategory,\r\n        board_type: boardType,\r\n        gender,\r\n        age_category: ageCategory,\r\n      });\r\n      alert(\"Competitor added successfully\");\r\n      setCompetitorName(\"\");\r\n      setCategory(categories[0]);\r\n      setSubCategory(subCategories[0]);\r\n      setBoardType(categories[0]);\r\n      setGender(subCategories[0]);\r\n      setAgeCategory(ageCategories[0]);\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error adding competitor:\", error);\r\n      alert(\"Error adding competitor\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteCompetitor = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n      );\r\n      alert(\"Competitor deleted successfully\");\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error deleting competitor:\", error);\r\n      alert(\"Error deleting competitor\");\r\n    }\r\n  };\r\n\r\n  const handleAddJudge = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n        name: judgeName,\r\n        event_id: eventId,\r\n      });\r\n      alert(\"Judge added successfully\");\r\n      setJudgeName(\"\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error adding judge:\", error);\r\n      alert(\"Error adding judge\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteJudge = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-judge/${id}`\r\n      );\r\n      alert(\"Judge deleted successfully\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error deleting judge:\", error);\r\n      alert(\"Error deleting judge\");\r\n    }\r\n  };\r\n\r\n  const handleSaveRounds = async () => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:3000/event-admin/save-rounds\",\r\n        {\r\n          eventId,\r\n          rounds: rounds.map((round) => ({\r\n            name: round.name,\r\n            category: round.category,\r\n            sub_category: round.sub_category,\r\n            board_type: round.board_type,\r\n            gender: round.gender,\r\n            age_category: round.age_category,\r\n            heats: round.heats.map((heat) => ({\r\n              heat_name: heat.name,\r\n              competitors: heat.competitors,\r\n            })),\r\n          })),\r\n        }\r\n      );\r\n      alert(\"Rounds saved successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error saving rounds:\", error);\r\n      alert(\"Error saving rounds\");\r\n    }\r\n  };\r\n\r\n  const handleFetchRounds = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n      );\r\n      const rounds = response.data;\r\n  \r\n      const processedRounds = rounds.map((round) => {\r\n        return {\r\n          ...round,\r\n          heats: round.heats.map((heat) => ({\r\n            ...heat,\r\n            competitors: heat.competitors.map((competitor) => ({\r\n              id: competitor.id,\r\n              name: competitor.name,\r\n            })),\r\n          })),\r\n        };\r\n      });\r\n  \r\n      setRounds(processedRounds);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rounds:\", error);\r\n      alert(\"Error fetching rounds\");\r\n    }\r\n  };\r\n\r\n  // const handleFetchRounds = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n  //     );\r\n  //     const { rounds } = response.data;\r\n\r\n  //     const processedRounds = rounds.map((round) => {\r\n  //       return {\r\n  //         ...round,\r\n  //         heats: round.heats.map((heat) => ({\r\n  //           ...heat,\r\n  //           competitors: heat.competitors.map((competitor) => ({\r\n  //             id: competitor.id,\r\n  //             name: competitor.name,\r\n  //           })),\r\n  //         })),\r\n  //       };\r\n  //     });\r\n\r\n  //     setRounds(processedRounds);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching rounds:\", error);\r\n  //     alert(\"Error fetching rounds\");\r\n  //   }\r\n  // };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\r\n        { responseType: \"blob\" }\r\n      );\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", \"rounds.pdf\");\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error);\r\n      alert(\"Error generating PDF\");\r\n    }\r\n  };\r\n\r\n  const handleCreateRounds = () => {\r\n    const newRounds = [];\r\n    const competitorsByCategory = {};\r\n\r\n    // Organize competitors by their categories and sub-categories\r\n    competitors.forEach((competitor) => {\r\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n      if (!competitorsByCategory[key]) {\r\n        competitorsByCategory[key] = [];\r\n      }\r\n      competitorsByCategory[key].push(competitor);\r\n    });\r\n\r\n    // Create rounds and heats for each category\r\n    Object.keys(competitorsByCategory).forEach((key) => {\r\n      const competitorsList = competitorsByCategory[key];\r\n      let roundNumber = 1;\r\n      let heatNumber = 1;\r\n\r\n      for (let i = 0; i < competitorsList.length; i += 4) {\r\n        const roundName = `Round ${roundNumber} (${key})`;\r\n        const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n        let round = newRounds.find((r) => r.name === roundName);\r\n        if (!round) {\r\n          round = {\r\n            name: roundName,\r\n            category: competitorsList[0].category,\r\n            sub_category: competitorsList[0].sub_category,\r\n            board_type: competitorsList[0].board_type,\r\n            gender: competitorsList[0].gender,\r\n            age_category: competitorsList[0].age_category,\r\n            heats: [],\r\n          };\r\n          newRounds.push(round);\r\n        }\r\n\r\n        round.heats.push({\r\n          id: `heat-${roundNumber}-${heatNumber}`,\r\n          name: `Heat ${heatNumber}`,\r\n          competitors: heatCompetitors,\r\n        });\r\n\r\n        heatNumber++;\r\n        if (heatNumber > 4) {\r\n          heatNumber = 1;\r\n          roundNumber++;\r\n        }\r\n      }\r\n    });\r\n\r\n    setRounds(newRounds);\r\n  };\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const sourceHeatIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === result.source.droppableId)\r\n    );\r\n    const destinationHeatIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === result.destination.droppableId)\r\n    );\r\n\r\n    if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const sourceRound = rounds[sourceHeatIndex];\r\n    const destinationRound = rounds[destinationHeatIndex];\r\n\r\n    const sourceHeat = sourceRound.heats.find(\r\n      (heat) => heat.id === result.source.droppableId\r\n    );\r\n    const destinationHeat = destinationRound.heats.find(\r\n      (heat) => heat.id === result.destination.droppableId\r\n    );\r\n\r\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n    destinationHeat.competitors.splice(\r\n      result.destination.index,\r\n      0,\r\n      movedItem\r\n    );\r\n\r\n    const updatedRounds = rounds.map((round) => {\r\n      if (round.id === sourceRound.id) {\r\n        return sourceRound;\r\n      }\r\n      if (round.id === destinationRound.id) {\r\n        return destinationRound;\r\n      }\r\n      return round;\r\n    });\r\n\r\n    setRounds(updatedRounds);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2>Manage Events</h2>\r\n      <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <label>Event Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={location}\r\n            onChange={(e) => setLocation(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n          Create Event\r\n        </button>\r\n      </form>\r\n\r\n      <h3>Existing Events</h3>\r\n      {events.length === 0 ? (\r\n        <p>No events available. Please create an event.</p>\r\n      ) : (\r\n        <ul className=\"list-group\">\r\n          {events.map((event) => (\r\n            <li\r\n              key={event.id}\r\n              className={`list-group-item d-flex justify-content-between align-items-center ${\r\n                eventId === event.id ? \"active\" : \"\"\r\n              }`}\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                fetchCompetitors(event.id, event.name);\r\n                fetchJudges(event.id);\r\n              }}\r\n            >\r\n              {event.name}\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => handleDeleteEvent(event.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {eventId ? (\r\n        <>\r\n          <h3>Manage Competitors for {selectedEventName}</h3>\r\n          <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n              <label>Competitor Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={competitorName}\r\n                onChange={(e) => setCompetitorName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Category</option>\r\n                {categories.map((cat) => (\r\n                  <option key={cat} value={cat}>\r\n                    {cat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Sub Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={subCategory}\r\n                onChange={(e) => setSubCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Sub Category</option>\r\n                {subCategories.map((subCat) => (\r\n                  <option key={subCat} value={subCat}>\r\n                    {subCat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Board Type:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={boardType}\r\n                onChange={(e) => setBoardType(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Board Type</option>\r\n                {categories.map((type) => (\r\n                  <option key={type} value={type}>\r\n                    {type}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Gender:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={gender}\r\n                onChange={(e) => setGender(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Gender</option>\r\n                {subCategories.map((g) => (\r\n                  <option key={g} value={g}>\r\n                    {g}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Age Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={ageCategory}\r\n                onChange={(e) => setAgeCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Age Category</option>\r\n                {ageCategories.map((cat) => (\r\n                  <option key={cat} value={cat}>\r\n                    {cat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n              Add Competitor\r\n            </button>\r\n          </form>\r\n\r\n          <h3>Existing Competitors</h3>\r\n          <ul className=\"list-group\">\r\n            {competitors.map((competitor) => (\r\n              <li\r\n                key={competitor.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              >\r\n                {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n                {competitor.category}, Sub Category: {competitor.sub_category},\r\n                Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n                , Age Category: {competitor.age_category})\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteCompetitor(competitor.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h3>Manage Judges for {selectedEventName}</h3>\r\n          <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n              <label>Judge Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={judgeName}\r\n                onChange={(e) => setJudgeName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n              Add Judge\r\n            </button>\r\n          </form>\r\n\r\n          <h3>Existing Judges</h3>\r\n          <ul className=\"list-group\">\r\n            {judges.map((judge) => (\r\n              <li\r\n                key={judge.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              >\r\n                {judge.name} (Event: {selectedEventName})\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteJudge(judge.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h3>Rounds</h3>\r\n          <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n            Create Rounds\r\n          </button>\r\n          <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n            Save Rounds\r\n          </button>\r\n          <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n            Show All Rounds\r\n          </button>\r\n          <button\r\n            className=\"btn btn-secondary mt-0\"\r\n            onClick={handleGeneratePDF}\r\n          >\r\n            Generate PDF\r\n          </button>\r\n\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            {rounds.map((round) => (\r\n              <Droppable droppableId={round.id} key={round.id}>\r\n                {(provided) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    className=\"mb-4\"\r\n                  >\r\n                    <h4>{round.name}</h4>\r\n                    {round.heats.map((heat, index) => (\r\n                      <div key={heat.id}>\r\n                        <h5>Heat {index + 1}</h5>\r\n                        <Droppable droppableId={heat.id}>\r\n                          {(provided) => (\r\n                            <div\r\n                              ref={provided.innerRef}\r\n                              {...provided.droppableProps}\r\n                              className=\"list-group\"\r\n                            >\r\n                              {heat.competitors.map((competitor, idx) => (\r\n                                <Draggable\r\n                                  key={competitor.id}\r\n                                  draggableId={competitor.id.toString()}\r\n                                  index={idx}\r\n                                >\r\n                                  {(provided) => (\r\n                                    <div\r\n                                      ref={provided.innerRef}\r\n                                      {...provided.draggableProps}\r\n                                      {...provided.dragHandleProps}\r\n                                      className=\"list-group-item\"\r\n                                    >\r\n                                      {competitor.name}\r\n                                    </div>\r\n                                  )}\r\n                                </Draggable>\r\n                              ))}\r\n                              {provided.placeholder}\r\n                            </div>\r\n                          )}\r\n                        </Droppable>\r\n                      </div>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </DragDropContext>\r\n\r\n          <h3>Saved Rounds for {selectedEventName}</h3>\r\n          {rounds.map((round, roundIndex) => (\r\n            <div key={roundIndex} className=\"mb-4\">\r\n              <h4>\r\n                Round {roundIndex + 1} ({round.category}, {round.sub_category}\r\n                , {round.age_category})\r\n              </h4>\r\n              {round.heats.map((heat, heatIndex) => (\r\n                <div key={heatIndex} className=\"mb-2\">\r\n                  <h5>Heat {heatIndex + 1}</h5>\r\n                  <ul className=\"list-group\">\r\n                    {heat.competitors.map((competitor, competitorIndex) => (\r\n                      <li key={competitorIndex} className=\"list-group-item\">\r\n                        {competitor.name}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <p className=\"mt-4\">\r\n          Please select an event to manage competitors and judges.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}