{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React_Projects\\\\event-platform\\\\client\\\\src\\\\components\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [showRounds, setShowRounds] = useState(false);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [competitorName, setCompetitorName] = useState(\"\");\n//   const [category, setCategory] = useState(categories[0]);\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\n//   const [boardType, setBoardType] = useState(categories[0]);\n//   const [gender, setGender] = useState(subCategories[0]);\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n//   const [judgeName, setJudgeName] = useState(\"\");\n//   const [createdBy, setCreatedBy] = useState(1);\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/event-admin/get-events\"\n//       );\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n//       );\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\n//       );\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//         created_by: createdBy,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-event/${id}`\n//       );\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleAddCompetitor = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n//         name: competitorName,\n//         event_id: eventId,\n//         category,\n//         sub_category: subCategory,\n//         board_type: boardType,\n//         gender,\n//         age_category: ageCategory,\n//       });\n//       alert(\"Competitor added successfully\");\n//       setCompetitorName(\"\");\n//       setCategory(categories[0]);\n//       setSubCategory(subCategories[0]);\n//       setBoardType(categories[0]);\n//       setGender(subCategories[0]);\n//       setAgeCategory(ageCategories[0]);\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error adding competitor:\", error);\n//       alert(\"Error adding competitor\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\n//       );\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleAddJudge = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n//         name: judgeName,\n//         event_id: eventId,\n//       });\n//       alert(\"Judge added successfully\");\n//       setJudgeName(\"\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error adding judge:\", error);\n//       alert(\"Error adding judge\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\n//       );\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3000/event-admin/save-rounds\",\n//         {\n//           eventId,\n//           rounds: rounds.map((round) => ({\n//             name: round.name,\n//             category: round.category,\n//             sub_category: round.sub_category,\n//             board_type: round.board_type,\n//             gender: round.gender,\n//             age_category: round.age_category,\n//             heats: round.heats.map((heat) => ({\n//               heat_name: heat.name,\n//               competitors: heat.competitors.map((competitor) => ({\n//                 id: competitor.id,\n//                 name: competitor.name,\n//               })),\n//             })),\n//           })),\n//         }\n//       );\n\n//       console.log(\"Rounds and heats saved successfully:\", response.data);\n//       alert(\"Rounds saved successfully\");\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const handleFetchRounds = async () => {\n//     try {\n//       console.log(\"Fetching rounds for event ID:\", eventId);\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\n//       );\n//       console.log(\"Response received from server:\", response);\n\n//       const rounds = response.data;\n//       console.log(\"Rounds data:\", rounds);\n\n//       const processedRounds = rounds.map((round) => {\n//         console.log(\"Processing round:\", round);\n//         return {\n//           ...round,\n//           heats: round.heats.map((heat) => {\n//             console.log(\"Processing heat:\", heat);\n//             return {\n//               ...heat,\n//               competitors: heat.competitors.map((competitor) => ({\n//                 id: competitor.id,\n//                 name: competitor.name,\n//               })),\n//             };\n//           }),\n//         };\n//       });\n\n//       console.log(\"Processed rounds:\", processedRounds);\n//       setRounds(processedRounds);\n//       setShowRounds(true);\n//     } catch (error) {\n//       console.error(\"Error fetching rounds:\", error);\n//       alert(\"Error fetching rounds\");\n//     }\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\n//         { responseType: \"blob\" }\n//       );\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement(\"a\");\n//       link.href = url;\n//       link.setAttribute(\"download\", \"rounds.pdf\");\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       alert(\"Error generating PDF\");\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     if (!eventId) {\n//       alert(\"Please select an event first.\");\n//       return;\n//     }\n\n//     const competitorsByCategory = {};\n\n//     // Organize competitors by their categories and sub-categories\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     const newRounds = [];\n\n//     // Create one round for each category and add heats\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       const heats = [];\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         heats.push({\n//           id: `heat-1-${heats.length + 1}`,\n//           name: `Heat ${heats.length + 1}`,\n//           competitors: heatCompetitors,\n//         });\n//       }\n\n//       newRounds.push({\n//         name: `Round 1 (${key})`,\n//         category: competitorsList[0].category,\n//         sub_category: competitorsList[0].sub_category,\n//         board_type: competitorsList[0].board_type,\n//         gender: competitorsList[0].gender,\n//         age_category: competitorsList[0].age_category,\n//         heats,\n//       });\n//     });\n\n//     setRounds(newRounds);\n//     console.log(\"Created rounds:\", newRounds);\n//   };\n\n//   const handleDragEnd = (result) => {\n//     if (!result.destination) {\n//       return;\n//     }\n\n//     const sourceHeatIndex = rounds.findIndex((round) =>\n//       round.heats.some((heat) => heat.id === result.source.droppableId)\n//     );\n//     const destinationHeatIndex = rounds.findIndex((round) =>\n//       round.heats.some((heat) => heat.id === result.destination.droppableId)\n//     );\n\n//     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\n//       return;\n//     }\n\n//     const sourceRound = rounds[sourceHeatIndex];\n//     const destinationRound = rounds[destinationHeatIndex];\n\n//     const sourceHeat = sourceRound.heats.find(\n//       (heat) => heat.id === result.source.droppableId\n//     );\n//     const destinationHeat = destinationRound.heats.find(\n//       (heat) => heat.id === result.destination.droppableId\n//     );\n\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n//     destinationHeat.competitors.splice(\n//       result.destination.index,\n//       0,\n//       movedItem\n//     );\n\n//     const updatedRounds = rounds.map((round) => {\n//       if (round.id === sourceRound.id) {\n//         return sourceRound;\n//       }\n//       if (round.id === destinationRound.id) {\n//         return destinationRound;\n//       }\n//       return round;\n//     });\n\n//     setRounds(updatedRounds);\n//   };\n\n//   return (\n//   <div className=\"container mt-5\">\n//     <h2>Manage Events</h2>\n//     <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//       <div className=\"form-group\">\n//         <label>Event Name:</label>\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           value={name}\n//           onChange={(e) => setName(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div className=\"form-group mt-3\">\n//         <label>Date:</label>\n//         <input\n//           type=\"date\"\n//           className=\"form-control\"\n//           value={date}\n//           onChange={(e) => setDate(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div className=\"form-group mt-3\">\n//         <label>Location:</label>\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           value={location}\n//           onChange={(e) => setLocation(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//         Create Event\n//       </button>\n//     </form>\n\n//     <h3>Existing Events</h3>\n//     {events.length === 0 ? (\n//       <p>No events available. Please create an event.</p>\n//     ) : (\n//       <ul className=\"list-group\">\n//         {events.map((event) => (\n//           <li\n//             key={event.id}\n//             className={`list-group-item d-flex justify-content-between align-items-center ${\n//               eventId === event.id ? \"active\" : \"\"\n//             }`}\n//             style={{ cursor: \"pointer\" }}\n//             onClick={() => {\n//               fetchCompetitors(event.id, event.name);\n//               fetchJudges(event.id);\n//             }}\n//           >\n//             {event.name}\n//             <button\n//               className=\"btn btn-danger\"\n//               onClick={() => handleDeleteEvent(event.id)}\n//             >\n//               Delete\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     )}\n\n//     {eventId ? (\n//       <>\n//         <h3>Manage Competitors for {selectedEventName}</h3>\n//         <form onSubmit={handleAddCompetitor} className=\"mb-4\">\n//           <div className=\"form-group\">\n//             <label>Competitor Name:</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               value={competitorName}\n//               onChange={(e) => setCompetitorName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <div className=\"form-group mt-3\">\n//             <label>Category:</label>\n//             <select\n//               className=\"form-control\"\n//               value={category}\n//               onChange={(e) => setCategory(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Category</option>\n//               {categories.map((cat) => (\n//                 <option key={cat} value={cat}>\n//                   {cat}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group mt-3\">\n//             <label>Sub Category:</label>\n//             <select\n//               className=\"form-control\"\n//               value={subCategory}\n//               onChange={(e) => setSubCategory(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Sub Category</option>\n//               {subCategories.map((subCat) => (\n//                 <option key={subCat} value={subCat}>\n//                   {subCat}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group mt-3\">\n//             <label>Board Type:</label>\n//             <select\n//               className=\"form-control\"\n//               value={boardType}\n//               onChange={(e) => setBoardType(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Board Type</option>\n//               {categories.map((type) => (\n//                 <option key={type} value={type}>\n//                   {type}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group mt-3\">\n//             <label>Gender:</label>\n//             <select\n//               className=\"form-control\"\n//               value={gender}\n//               onChange={(e) => setGender(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Gender</option>\n//               {subCategories.map((g) => (\n//                 <option key={g} value={g}>\n//                   {g}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"form-group mt-3\">\n//             <label>Age Category:</label>\n//             <select\n//               className=\"form-control\"\n//               value={ageCategory}\n//               onChange={(e) => setAgeCategory(e.target.value)}\n//               required\n//             >\n//               <option value=\"\">Select Age Category</option>\n//               {ageCategories.map((cat) => (\n//                 <option key={cat} value={cat}>\n//                   {cat}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//           <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//             Add Competitor\n//           </button>\n//         </form>\n\n//         <h3>Existing Competitors</h3>\n//         <ul className=\"list-group\">\n//           {competitors.map((competitor) => (\n//             <li\n//               key={competitor.id}\n//               className=\"list-group-item d-flex justify-content-between align-items-center\"\n//             >\n//               {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\n//               {competitor.category}, Sub Category: {competitor.sub_category},\n//               Board Type: {competitor.board_type}, Gender: {competitor.gender}\n//               , Age Category: {competitor.age_category})\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() => handleDeleteCompetitor(competitor.id)}\n//               >\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n\n//         <h3>Manage Judges for {selectedEventName}</h3>\n//         <form onSubmit={handleAddJudge} className=\"mb-4\">\n//           <div className=\"form-group\">\n//             <label>Judge Name:</label>\n//             <input\n//               type=\"text\"\n//               className=\"form-control\"\n//               value={judgeName}\n//               onChange={(e) => setJudgeName(e.target.value)}\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//             Add Judge\n//           </button>\n//         </form>\n\n//         <h3>Existing Judges</h3>\n//         <ul className=\"list-group\">\n//           {judges.map((judge) => (\n//             <li\n//               key={judge.id}\n//               className=\"list-group-item d-flex justify-content-between align-items-center\"\n//             >\n//               {judge.name} (Event: {selectedEventName})\n//               <button\n//                 className=\"btn btn-danger\"\n//                 onClick={() => handleDeleteJudge(judge.id)}\n//               >\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n\n//         <h3>Rounds</h3>\n//       <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//         Create Rounds\n//       </button>\n//       <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//         Save Rounds\n//       </button>\n//       <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\n//         Show All Rounds\n//       </button>\n//       <button\n//         className=\"btn btn-secondary mt-0\"\n//         onClick={handleGeneratePDF}\n//       >\n//         Generate PDF\n//       </button>\n\n//       <DragDropContext onDragEnd={handleDragEnd}>\n//         {rounds.map((round) => (\n//           <Droppable droppableId={round.id.toString()} key={round.id}>\n//             {(provided) => (\n//               <div\n//                 ref={provided.innerRef}\n//                 {...provided.droppableProps}\n//                 className=\"mb-4\"\n//               >\n//                 <h4>{round.name}</h4>\n//                 {round.heats.map((heat, index) => (\n//                   <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\n//                     {(provided) => (\n//                       <div\n//                         ref={provided.innerRef}\n//                         {...provided.droppableProps}\n//                         className=\"list-group mb-3\"\n//                       >\n//                         <h5>Heat {index + 1}</h5>\n//                         {heat.competitors.map((competitor, idx) => (\n//                           <Draggable\n//                             key={competitor.id}\n//                             draggableId={competitor.id.toString()}\n//                             index={idx}\n//                           >\n//                             {(provided) => (\n//                               <div\n//                                 ref={provided.innerRef}\n//                                 {...provided.draggableProps}\n//                                 {...provided.dragHandleProps}\n//                                 className=\"list-group-item\"\n//                               >\n//                                 {competitor.name}\n//                               </div>\n//                             )}\n//                           </Draggable>\n//                         ))}\n//                         {provided.placeholder}\n//                       </div>\n//                     )}\n//                   </Droppable>\n//                 ))}\n//                 {provided.placeholder}\n//               </div>\n//             )}\n//           </Droppable>\n//         ))}\n//       </DragDropContext>\n\n//       {showRounds && (\n//         <>\n//           <h3>Rounds for {selectedEventName}</h3>\n//           {rounds.map((round, roundIndex) => (\n//             <div key={roundIndex} className=\"mb-4\">\n//               <h4>\n//                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\n//                 {round.board_type}, {round.gender}, {round.age_category})\n//               </h4>\n//               {round.heats.map((heat, heatIndex) => (\n//                 <div key={heatIndex} className=\"mb-2\">\n//                   <h5>Heat {heatIndex + 1}</h5>\n//                   <ul className=\"list-group\">\n//                     {heat.competitors.map((competitor, competitorIndex) => (\n//                       <li key={competitorIndex} className=\"list-group-item\">\n//                         {competitor.name}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 </div>\n//               ))}\n//             </div>\n//           ))}\n//         </>\n//         )}\n//       </>\n//     ) : (\n//       <p className=\"mt-4\">\n//         Please select an event to manage competitors and judges.\n//       </p>\n//     )}\n//   </div>\n// );\n// };\n\n// export default EventManagement;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [showRounds, setShowRounds] = useState(false);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [competitorName, setCompetitorName] = useState(\"\");\n//   const [category, setCategory] = useState(categories[0]);\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\n//   const [boardType, setBoardType] = useState(categories[0]);\n//   const [gender, setGender] = useState(subCategories[0]);\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n//   const [judgeName, setJudgeName] = useState(\"\");\n//   const [createdBy, setCreatedBy] = useState(1);\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//         created_by: createdBy,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleAddCompetitor = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n//         name: competitorName,\n//         event_id: eventId,\n//         category,\n//         sub_category: subCategory,\n//         board_type: boardType,\n//         gender,\n//         age_category: ageCategory,\n//       });\n//       alert(\"Competitor added successfully\");\n//       setCompetitorName(\"\");\n//       setCategory(categories[0]);\n//       setSubCategory(subCategories[0]);\n//       setBoardType(categories[0]);\n//       setGender(subCategories[0]);\n//       setAgeCategory(ageCategories[0]);\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error adding competitor:\", error);\n//       alert(\"Error adding competitor\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleAddJudge = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n//         name: judgeName,\n//         event_id: eventId,\n//       });\n//       alert(\"Judge added successfully\");\n//       setJudgeName(\"\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error adding judge:\", error);\n//       alert(\"Error adding judge\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\n//         eventId,\n//         rounds: rounds.map((round) => ({\n//           name: round.name,\n//           category: round.category,\n//           sub_category: round.sub_category,\n//           board_type: round.board_type,\n//           gender: round.gender,\n//           age_category: round.age_category,\n//           heats: round.heats.map((heat) => ({\n//             heat_name: heat.name,\n//             competitors: heat.competitors.map((competitor) => ({\n//               id: competitor.id,\n//               name: competitor.name,\n//             })),\n//           })),\n//         })),\n//       });\n\n//       console.log(\"Rounds and heats saved successfully:\", response.data);\n//       alert(\"Rounds saved successfully\");\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const handleFetchRounds = async () => {\n//     try {\n//       console.log(\"Fetching rounds for event ID:\", eventId);\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\n//       console.log(\"Response received from server:\", response);\n\n//       const rounds = response.data;\n//       console.log(\"Rounds data:\", rounds);\n\n//       const processedRounds = rounds.map((round) => {\n//         console.log(\"Processing round:\", round);\n//         return {\n//           ...round,\n//           heats: round.heats.map((heat) => {\n//             console.log(\"Processing heat:\", heat);\n//             return {\n//               ...heat,\n//               competitors: heat.competitors.map((competitor) => ({\n//                 id: competitor.id,\n//                 name: competitor.name,\n//               })),\n//             };\n//           }),\n//         };\n//       });\n\n//       console.log(\"Processed rounds:\", processedRounds);\n//       setRounds(processedRounds);\n//       setShowRounds(true);\n//     } catch (error) {\n//       console.error(\"Error fetching rounds:\", error);\n//       alert(\"Error fetching rounds\");\n//     }\n//   };\n\n//   const handleGeneratePDF = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`, { responseType: \"blob\" });\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\n//       const link = document.createElement(\"a\");\n//       link.href = url;\n//       link.setAttribute(\"download\", \"rounds.pdf\");\n//       document.body.appendChild(link);\n//       link.click();\n//     } catch (error) {\n//       console.error(\"Error generating PDF:\", error);\n//       alert(\"Error generating PDF\");\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     if (!eventId) {\n//       alert(\"Please select an event first.\");\n//       return;\n//     }\n\n//     const competitorsByCategory = {};\n\n//     // Organize competitors by their categories and sub-categories\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     const newRounds = [];\n\n//     // Create one round for each category and add heats\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       const heats = [];\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         heats.push({\n//           id: `heat-1-${heats.length + 1}`,\n//           name: `Heat ${heats.length + 1}`,\n//           competitors: heatCompetitors,\n//         });\n//       }\n\n//       newRounds.push({\n//         name: `Round 1 (${key})`,\n//         category: competitorsList[0].category,\n//         sub_category: competitorsList[0].sub_category,\n//         board_type: competitorsList[0].board_type,\n//         gender: competitorsList[0].gender,\n//         age_category: competitorsList[0].age_category,\n//         heats,\n//       });\n//     });\n\n//     setRounds(newRounds);\n//     console.log(\"Created rounds:\", newRounds);\n//   };\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h2>Manage Events</h2>\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//         <div className=\"form-group\">\n//           <label>Event Name:</label>\n//           <input type=\"text\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} required />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Date:</label>\n//           <input type=\"date\" className=\"form-control\" value={date} onChange={(e) => setDate(e.target.value)} required />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Location:</label>\n//           <input type=\"text\" className=\"form-control\" value={location} onChange={(e) => setLocation(e.target.value)} required />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//           Create Event\n//         </button>\n//       </form>\n\n//       <h3>Existing Events</h3>\n//       {events.length === 0 ? (\n//         <p>No events available. Please create an event.</p>\n//       ) : (\n//         <ul className=\"list-group\">\n//           {events.map((event) => (\n//             <li\n//               key={event.id}\n//               className={`list-group-item d-flex justify-content-between align-items-center ${eventId === event.id ? \"active\" : \"\"}`}\n//               style={{ cursor: \"pointer\" }}\n//               onClick={() => {\n//                 fetchCompetitors(event.id, event.name);\n//                 fetchJudges(event.id);\n//               }}\n//             >\n//               {event.name}\n//               <button className=\"btn btn-danger\" onClick={() => handleDeleteEvent(event.id)}>\n//                 Delete\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {eventId ? (\n//         <>\n//           <h3>Manage Competitors for {selectedEventName}</h3>\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Competitor Name:</label>\n//               <input type=\"text\" className=\"form-control\" value={competitorName} onChange={(e) => setCompetitorName(e.target.value)} required />\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Category:</label>\n//               <select className=\"form-control\" value={category} onChange={(e) => setCategory(e.target.value)} required>\n//                 <option value=\"\">Select Category</option>\n//                 {categories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Sub Category:</label>\n//               <select className=\"form-control\" value={subCategory} onChange={(e) => setSubCategory(e.target.value)} required>\n//                 <option value=\"\">Select Sub Category</option>\n//                 {subCategories.map((subCat) => (\n//                   <option key={subCat} value={subCat}>\n//                     {subCat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Board Type:</label>\n//               <select className=\"form-control\" value={boardType} onChange={(e) => setBoardType(e.target.value)} required>\n//                 <option value=\"\">Select Board Type</option>\n//                 {categories.map((type) => (\n//                   <option key={type} value={type}>\n//                     {type}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Gender:</label>\n//               <select className=\"form-control\" value={gender} onChange={(e) => setGender(e.target.value)} required>\n//                 <option value=\"\">Select Gender</option>\n//                 {subCategories.map((g) => (\n//                   <option key={g} value={g}>\n//                     {g}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"form-group mt-3\">\n//               <label>Age Category:</label>\n//               <select className=\"form-control\" value={ageCategory} onChange={(e) => setAgeCategory(e.target.value)} required>\n//                 <option value=\"\">Select Age Category</option>\n//                 {ageCategories.map((cat) => (\n//                   <option key={cat} value={cat}>\n//                     {cat}\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Competitor\n//             </button>\n//           </form>\n\n//           <h3>Existing Competitors</h3>\n//           <ul className=\"list-group\">\n//             {competitors.map((competitor) => (\n//               <li key={competitor.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n//                 {competitor.name} (Event: {selectedEventName}, Category: {competitor.category}, Sub Category: {competitor.sub_category}, Board Type: {competitor.board_type}, Gender: {competitor.gender}\n//                 , Age Category: {competitor.age_category})\n//                 <button className=\"btn btn-danger\" onClick={() => handleDeleteCompetitor(competitor.id)}>\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Manage Judges for {selectedEventName}</h3>\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\n//             <div className=\"form-group\">\n//               <label>Judge Name:</label>\n//               <input type=\"text\" className=\"form-control\" value={judgeName} onChange={(e) => setJudgeName(e.target.value)} required />\n//             </div>\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//               Add Judge\n//             </button>\n//           </form>\n\n//           <h3>Existing Judges</h3>\n//           <ul className=\"list-group\">\n//             {judges.map((judge) => (\n//               <li key={judge.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n//                 {judge.name} (Event: {selectedEventName})\n//                 <button className=\"btn btn-danger\" onClick={() => handleDeleteJudge(judge.id)}>\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n\n//           <h3>Rounds</h3>\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//             Create Rounds\n//           </button>\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//             Save Rounds\n//           </button>\n//           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\n//             Show All Rounds\n//           </button>\n//           <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\n//             Generate PDF\n//           </button>\n\n//           {showRounds && (\n//             <>\n//               <h3>Rounds for {selectedEventName}</h3>\n//               {rounds.map((round, roundIndex) => (\n//                 <div key={roundIndex} className=\"mb-4\">\n//                   <h4>\n//                     Round 1 : Heat {roundIndex + 1} - {round.age_category} {round.gender}\n//                   </h4>\n//                   {round.heats.map((heat, heatIndex) => (\n//                     <div key={heatIndex} className=\"mb-2\">\n//                       <h5>Heat {heatIndex + 1}</h5>\n//                       <ul className=\"list-group\">\n//                         {heat.competitors.map((competitor, competitorIndex) => (\n//                           <li key={competitorIndex} className=\"list-group-item\">\n//                             {competitor.name}\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ))}\n//             </>\n//           )}\n//         </>\n//       ) : (\n//         <p className=\"mt-4\">Please select an event to manage competitors and judges.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EventManagement;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst categories = [\"Shortboard\", \"Longboard\"];\nconst subCategories = [\"Men\", \"Women\"];\nconst ageCategories = [\"Open\", \"Sub12\", \"Sub14\", \"Sub18\", \"Professional\", \"+40\", \"+45\", \"+50\", \"+60\", \"+65\", \"+70\"];\nconst EventManagement = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [competitors, setCompetitors] = useState([]);\n  const [judges, setJudges] = useState([]);\n  const [rounds, setRounds] = useState([]);\n  const [showRounds, setShowRounds] = useState(false);\n  const [eventId, setEventId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [competitorName, setCompetitorName] = useState(\"\");\n  const [category, setCategory] = useState(categories[0]);\n  const [subCategory, setSubCategory] = useState(subCategories[0]);\n  const [boardType, setBoardType] = useState(categories[0]);\n  const [gender, setGender] = useState(subCategories[0]);\n  const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\n  const [judgeName, setJudgeName] = useState(\"\");\n  const [createdBy, setCreatedBy] = useState(1);\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n  const fetchCompetitors = async (eventId, eventName) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\n      setCompetitors(response.data);\n      setEventId(eventId);\n      setSelectedEventName(eventName);\n    } catch (error) {\n      console.error(\"Error fetching competitors:\", error);\n    }\n  };\n  const fetchJudges = async eventId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\n      setJudges(response.data);\n    } catch (error) {\n      console.error(\"Error fetching judges:\", error);\n    }\n  };\n  const handleCreateEvent = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n        name,\n        date,\n        location,\n        created_by: createdBy\n      });\n      alert(\"Event created successfully\");\n      setName(\"\");\n      setDate(\"\");\n      setLocation(\"\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      alert(\"Error creating event\");\n    }\n  };\n  const handleDeleteEvent = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\n      alert(\"Event deleted successfully\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      alert(\"Error deleting event\");\n    }\n  };\n  const handleAddCompetitor = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\n        name: competitorName,\n        event_id: eventId,\n        category,\n        sub_category: subCategory,\n        board_type: boardType,\n        gender,\n        age_category: ageCategory\n      });\n      alert(\"Competitor added successfully\");\n      setCompetitorName(\"\");\n      setCategory(categories[0]);\n      setSubCategory(subCategories[0]);\n      setBoardType(categories[0]);\n      setGender(subCategories[0]);\n      setAgeCategory(ageCategories[0]);\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error adding competitor:\", error);\n      alert(\"Error adding competitor\");\n    }\n  };\n  const handleDeleteCompetitor = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\n      alert(\"Competitor deleted successfully\");\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error deleting competitor:\", error);\n      alert(\"Error deleting competitor\");\n    }\n  };\n  const handleAddJudge = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\n        name: judgeName,\n        event_id: eventId\n      });\n      alert(\"Judge added successfully\");\n      setJudgeName(\"\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error adding judge:\", error);\n      alert(\"Error adding judge\");\n    }\n  };\n  const handleDeleteJudge = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\n      alert(\"Judge deleted successfully\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error deleting judge:\", error);\n      alert(\"Error deleting judge\");\n    }\n  };\n  const handleSaveRounds = async () => {\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\n        eventId,\n        rounds: rounds.map(round => ({\n          name: round.name,\n          category: round.category,\n          sub_category: round.sub_category,\n          board_type: round.board_type,\n          gender: round.gender,\n          age_category: round.age_category,\n          heats: round.heats.map(heat => ({\n            heat_name: heat.name,\n            competitors: heat.competitors.map(competitor => ({\n              id: competitor.id,\n              name: competitor.name\n            }))\n          }))\n        }))\n      });\n      alert(\"Rounds saved successfully\");\n    } catch (error) {\n      console.error(\"Error saving rounds:\", error);\n      alert(\"Error saving rounds\");\n    }\n  };\n  const handleFetchRounds = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\n      const roundsData = response.data;\n      console.log(\"Initial rounds data:\", roundsData);\n      if (!roundsData || !Array.isArray(roundsData)) {\n        throw new Error(\"Invalid rounds data\");\n      }\n      const processedRounds = roundsData.map(round => {\n        console.log(\"Processing round:\", round);\n        if (!round.heats || !Array.isArray(round.heats)) {\n          console.warn(\"No heats found for round:\", round);\n          return {\n            id: round.id,\n            name: round.round_name,\n            category: round.category,\n            sub_category: round.sub_category,\n            board_type: round.board_type,\n            gender: round.gender,\n            age_category: round.age_category,\n            heats: []\n          };\n        }\n        const processedHeats = round.heats.map(heat => {\n          console.log(\"Processing heat:\", heat);\n          const processedCompetitors = heat.competitors ? heat.competitors.map(competitor => ({\n            id: competitor.id,\n            name: competitor.name\n          })) : [];\n          console.log(\"Processed competitors:\", processedCompetitors);\n          return {\n            id: heat.id,\n            name: heat.heat_name,\n            competitors: processedCompetitors\n          };\n        });\n        console.log(\"Processed heats:\", processedHeats);\n        return {\n          id: round.id,\n          name: round.round_name,\n          category: round.category,\n          sub_category: round.sub_category,\n          board_type: round.board_type,\n          gender: round.gender,\n          age_category: round.age_category,\n          heats: processedHeats\n        };\n      });\n      console.log(\"Processed rounds:\", processedRounds);\n      setRounds(processedRounds);\n      setShowRounds(true);\n    } catch (error) {\n      console.error(\"Error fetching rounds:\", error);\n      alert(\"Error fetching rounds\");\n    }\n  };\n\n  // const handleFetchRounds = async () => {\n  //   try {\n  //     const response = await axios.get(\n  //       `http://localhost:3000/event-admin/get-rounds/${eventId}`\n  //     );\n\n  //     const roundsData = response.data;\n  //     console.log(\"Rounds data:\", roundsData);\n\n  //     if (!roundsData || !Array.isArray(roundsData)) {\n  //       throw new Error(\"Invalid rounds data\");\n  //     }\n\n  //     const processedRounds = roundsData.map((round) => ({\n  //       id: round.id,\n  //       name: round.round_name,\n  //       category: round.category,\n  //       sub_category: round.sub_category,\n  //       board_type: round.board_type,\n  //       gender: round.gender,\n  //       age_category: round.age_category,\n  //       heats: round.heats.map((heat) => ({\n  //         id: heat.id,\n  //         name: heat.heat_name,\n  //         competitors: heat.competitors.map((competitor) => ({\n  //           id: competitor.id,\n  //           name: competitor.name,\n  //         })),\n  //       })),\n  //     }));\n\n  //     console.log(\"Processed rounds:\", processedRounds);\n  //     setRounds(processedRounds);\n  //     setShowRounds(true);\n  //   } catch (error) {\n  //     console.error(\"Error fetching rounds:\", error);\n  //     alert(\"Error fetching rounds\");\n  //   }\n  // };\n\n  const handleGeneratePDF = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`, {\n        responseType: \"blob\"\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"rounds.pdf\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      alert(\"Error generating PDF\");\n    }\n  };\n  const handleCreateRounds = () => {\n    if (!eventId) {\n      alert(\"Please select an event first.\");\n      return;\n    }\n    const competitorsByCategory = {};\n    competitors.forEach(competitor => {\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n      if (!competitorsByCategory[key]) {\n        competitorsByCategory[key] = [];\n      }\n      competitorsByCategory[key].push(competitor);\n    });\n    const newRounds = [];\n    Object.keys(competitorsByCategory).forEach(key => {\n      const competitorsList = competitorsByCategory[key];\n      const heats = [];\n      for (let i = 0; i < competitorsList.length; i += 4) {\n        const heatCompetitors = competitorsList.slice(i, i + 4);\n        heats.push({\n          id: `heat-${heats.length + 1}`,\n          name: `Heat ${heats.length + 1}`,\n          competitors: heatCompetitors\n        });\n      }\n      newRounds.push({\n        id: `round-${newRounds.length + 1}`,\n        name: `Round 1 (${key})`,\n        category: competitorsList[0].category,\n        sub_category: competitorsList[0].sub_category,\n        board_type: competitorsList[0].board_type,\n        gender: competitorsList[0].gender,\n        age_category: competitorsList[0].age_category,\n        heats\n      });\n    });\n    setRounds(newRounds);\n    console.log(\"Created rounds:\", newRounds);\n  };\n  const handleDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n    const sourceHeatIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === result.source.droppableId));\n    const destinationHeatIndex = rounds.findIndex(round => round.heats.some(heat => heat.id === result.destination.droppableId));\n    if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\n      return;\n    }\n    const sourceRound = rounds[sourceHeatIndex];\n    const destinationRound = rounds[destinationHeatIndex];\n    const sourceHeat = sourceRound.heats.find(heat => heat.id === result.source.droppableId);\n    const destinationHeat = destinationRound.heats.find(heat => heat.id === result.destination.droppableId);\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\n    destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\n    const updatedRounds = rounds.map(round => {\n      if (round.id === sourceRound.id) {\n        return sourceRound;\n      }\n      if (round.id === destinationRound.id) {\n        return destinationRound;\n      }\n      return round;\n    });\n    setRounds(updatedRounds);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateEvent,\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1637,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1638,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: location,\n          onChange: e => setLocation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1648,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1656,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1625,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Existing Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1661,\n      columnNumber: 7\n    }, this), events.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No events available. Please create an event.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1663,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `list-group-item d-flex justify-content-between align-items-center ${eventId === event.id ? \"active\" : \"\"}`,\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          fetchCompetitors(event.id, event.name);\n          fetchJudges(event.id);\n        },\n        children: [event.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: () => handleDeleteEvent(event.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1679,\n          columnNumber: 15\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1667,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1665,\n      columnNumber: 9\n    }, this), eventId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Competitors for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1692,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddCompetitor,\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Competitor Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1695,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: competitorName,\n            onChange: e => setCompetitorName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1696,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1694,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1705,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: category,\n            onChange: e => setCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1712,\n              columnNumber: 17\n            }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat,\n              children: cat\n            }, cat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1714,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1706,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1704,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Sub Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1721,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: subCategory,\n            onChange: e => setSubCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Sub Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1728,\n              columnNumber: 17\n            }, this), subCategories.map(subCat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: subCat,\n              children: subCat\n            }, subCat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1730,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1722,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1720,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Board Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1737,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: boardType,\n            onChange: e => setBoardType(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Board Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1744,\n              columnNumber: 17\n            }, this), categories.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: type,\n              children: type\n            }, type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1746,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1738,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Gender:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1753,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: gender,\n            onChange: e => setGender(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Gender\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1760,\n              columnNumber: 17\n            }, this), subCategories.map(g => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: g,\n              children: g\n            }, g, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1762,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1754,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1752,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Age Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1769,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: ageCategory,\n            onChange: e => setAgeCategory(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Age Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1776,\n              columnNumber: 17\n            }, this), ageCategories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat,\n              children: cat\n            }, cat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1778,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1770,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1768,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Add Competitor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1784,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1693,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Competitors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1789,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: competitors.map(competitor => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item d-flex justify-content-between align-items-center\",\n          children: [competitor.name, \" (Event: \", selectedEventName, \", Category:\", \" \", competitor.category, \", Sub Category: \", competitor.sub_category, \", Board Type: \", competitor.board_type, \", Gender: \", competitor.gender, \", Age Category: \", competitor.age_category, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => handleDeleteCompetitor(competitor.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1800,\n            columnNumber: 17\n          }, this)]\n        }, competitor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1792,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1790,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Judges for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1810,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddJudge,\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Judge Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1813,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: judgeName,\n            onChange: e => setJudgeName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1814,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1812,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-3\",\n          children: \"Add Judge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1822,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1811,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Judges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1827,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: judges.map(judge => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item d-flex justify-content-between align-items-center\",\n          children: [judge.name, \" (Event: \", selectedEventName, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: () => handleDeleteJudge(judge.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1835,\n            columnNumber: 17\n          }, this)]\n        }, judge.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1830,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1828,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1845,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mb-0\",\n        onClick: handleCreateRounds,\n        children: \"Create Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1846,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mt-0\",\n        onClick: handleSaveRounds,\n        children: \"Save Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1849,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info mt-0\",\n        onClick: handleFetchRounds,\n        children: \"Show All Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1852,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mt-0\",\n        onClick: handleGeneratePDF,\n        children: \"Generate PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1855,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragEnd,\n        children: rounds.map(round => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: round.id.toString(),\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: round.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1868,\n              columnNumber: 21\n            }, this), round.heats.map((heat, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: `heat-${heat.id}`,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.droppableProps,\n                className: \"list-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: [\"Heat \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1877,\n                  columnNumber: 29\n                }, this), heat.competitors.map((competitor, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: competitor.id.toString(),\n                  index: idx,\n                  children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    className: \"list-group-item\",\n                    children: competitor.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1885,\n                    columnNumber: 35\n                  }, this)\n                }, competitor.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1879,\n                  columnNumber: 31\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1872,\n                columnNumber: 27\n              }, this)\n            }, heat.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1870,\n              columnNumber: 23\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1863,\n            columnNumber: 19\n          }, this)\n        }, round.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1861,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1859,\n        columnNumber: 11\n      }, this), showRounds && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Rounds for \", selectedEventName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1910,\n          columnNumber: 15\n        }, this), rounds.map((round, roundIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Round \", roundIndex + 1, \" (\", round.category, \", \", round.sub_category, \", \", round.board_type, \", \", round.gender, \", \", round.age_category, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1913,\n            columnNumber: 19\n          }, this), round.heats.map((heat, heatIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"Heat \", heatIndex + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1918,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group\",\n              children: heat.competitors.map((competitor, competitorIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"list-group-item\",\n                children: competitor.name\n              }, competitorIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1921,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1919,\n              columnNumber: 23\n            }, this)]\n          }, heatIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1917,\n            columnNumber: 21\n          }, this))]\n        }, roundIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1912,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Please select an event to manage competitors and judges.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1934,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1623,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"fKEHb1GzSuGn3B7JcsIRLDfCECA=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","Fragment","_Fragment","categories","subCategories","ageCategories","EventManagement","_s","events","setEvents","competitors","setCompetitors","judges","setJudges","rounds","setRounds","showRounds","setShowRounds","eventId","setEventId","name","setName","date","setDate","location","setLocation","competitorName","setCompetitorName","category","setCategory","subCategory","setSubCategory","boardType","setBoardType","gender","setGender","ageCategory","setAgeCategory","judgeName","setJudgeName","createdBy","setCreatedBy","selectedEventName","setSelectedEventName","fetchEvents","response","get","data","error","console","fetchCompetitors","eventName","fetchJudges","handleCreateEvent","e","preventDefault","post","created_by","alert","handleDeleteEvent","id","delete","handleAddCompetitor","event_id","sub_category","board_type","age_category","handleDeleteCompetitor","handleAddJudge","handleDeleteJudge","handleSaveRounds","map","round","heats","heat","heat_name","competitor","handleFetchRounds","roundsData","log","Array","isArray","Error","processedRounds","warn","round_name","processedHeats","processedCompetitors","handleGeneratePDF","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","handleCreateRounds","competitorsByCategory","forEach","key","push","newRounds","Object","keys","competitorsList","i","length","heatCompetitors","slice","handleDragEnd","result","destination","sourceHeatIndex","findIndex","some","source","droppableId","destinationHeatIndex","sourceRound","destinationRound","sourceHeat","find","destinationHeat","movedItem","splice","index","updatedRounds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","event","style","cursor","onClick","cat","subCat","g","judge","onDragEnd","toString","provided","ref","innerRef","droppableProps","idx","draggableId","draggableProps","dragHandleProps","placeholder","roundIndex","heatIndex","competitorIndex","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/React_Projects/event-platform/client/src/components/EventManagement.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [showRounds, setShowRounds] = useState(false);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [competitorName, setCompetitorName] = useState(\"\");\r\n//   const [category, setCategory] = useState(categories[0]);\r\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n//   const [boardType, setBoardType] = useState(categories[0]);\r\n//   const [gender, setGender] = useState(subCategories[0]);\r\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n//   const [judgeName, setJudgeName] = useState(\"\");\r\n//   const [createdBy, setCreatedBy] = useState(1);\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"http://localhost:3000/event-admin/get-events\"\r\n//       );\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n//       );\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n//       );\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//         created_by: createdBy,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-event/${id}`\r\n//       );\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddCompetitor = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n//         name: competitorName,\r\n//         event_id: eventId,\r\n//         category,\r\n//         sub_category: subCategory,\r\n//         board_type: boardType,\r\n//         gender,\r\n//         age_category: ageCategory,\r\n//       });\r\n//       alert(\"Competitor added successfully\");\r\n//       setCompetitorName(\"\");\r\n//       setCategory(categories[0]);\r\n//       setSubCategory(subCategories[0]);\r\n//       setBoardType(categories[0]);\r\n//       setGender(subCategories[0]);\r\n//       setAgeCategory(ageCategories[0]);\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding competitor:\", error);\r\n//       alert(\"Error adding competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n//       );\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddJudge = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n//         name: judgeName,\r\n//         event_id: eventId,\r\n//       });\r\n//       alert(\"Judge added successfully\");\r\n//       setJudgeName(\"\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding judge:\", error);\r\n//       alert(\"Error adding judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n//       );\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:3000/event-admin/save-rounds\",\r\n//         {\r\n//           eventId,\r\n//           rounds: rounds.map((round) => ({\r\n//             name: round.name,\r\n//             category: round.category,\r\n//             sub_category: round.sub_category,\r\n//             board_type: round.board_type,\r\n//             gender: round.gender,\r\n//             age_category: round.age_category,\r\n//             heats: round.heats.map((heat) => ({\r\n//               heat_name: heat.name,\r\n//               competitors: heat.competitors.map((competitor) => ({\r\n//                 id: competitor.id,\r\n//                 name: competitor.name,\r\n//               })),\r\n//             })),\r\n//           })),\r\n//         }\r\n//       );\r\n  \r\n//       console.log(\"Rounds and heats saved successfully:\", response.data);\r\n//       alert(\"Rounds saved successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n  \r\n  \r\n//   const handleFetchRounds = async () => {\r\n//     try {\r\n//       console.log(\"Fetching rounds for event ID:\", eventId);\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n//       );\r\n//       console.log(\"Response received from server:\", response);\r\n  \r\n//       const rounds = response.data;\r\n//       console.log(\"Rounds data:\", rounds);\r\n  \r\n//       const processedRounds = rounds.map((round) => {\r\n//         console.log(\"Processing round:\", round);\r\n//         return {\r\n//           ...round,\r\n//           heats: round.heats.map((heat) => {\r\n//             console.log(\"Processing heat:\", heat);\r\n//             return {\r\n//               ...heat,\r\n//               competitors: heat.competitors.map((competitor) => ({\r\n//                 id: competitor.id,\r\n//                 name: competitor.name,\r\n//               })),\r\n//             };\r\n//           }),\r\n//         };\r\n//       });\r\n  \r\n//       console.log(\"Processed rounds:\", processedRounds);\r\n//       setRounds(processedRounds);\r\n//       setShowRounds(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rounds:\", error);\r\n//       alert(\"Error fetching rounds\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleGeneratePDF = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\r\n//         { responseType: \"blob\" }\r\n//       );\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement(\"a\");\r\n//       link.href = url;\r\n//       link.setAttribute(\"download\", \"rounds.pdf\");\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//     } catch (error) {\r\n//       console.error(\"Error generating PDF:\", error);\r\n//       alert(\"Error generating PDF\");\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n//   const handleCreateRounds = () => {\r\n//     if (!eventId) {\r\n//       alert(\"Please select an event first.\");\r\n//       return;\r\n//     }\r\n  \r\n//     const competitorsByCategory = {};\r\n  \r\n//     // Organize competitors by their categories and sub-categories\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n  \r\n//     const newRounds = [];\r\n  \r\n//     // Create one round for each category and add heats\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       const heats = [];\r\n  \r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n  \r\n//         heats.push({\r\n//           id: `heat-1-${heats.length + 1}`,\r\n//           name: `Heat ${heats.length + 1}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n//       }\r\n  \r\n//       newRounds.push({\r\n//         name: `Round 1 (${key})`,\r\n//         category: competitorsList[0].category,\r\n//         sub_category: competitorsList[0].sub_category,\r\n//         board_type: competitorsList[0].board_type,\r\n//         gender: competitorsList[0].gender,\r\n//         age_category: competitorsList[0].age_category,\r\n//         heats,\r\n//       });\r\n//     });\r\n  \r\n//     setRounds(newRounds);\r\n//     console.log(\"Created rounds:\", newRounds);\r\n//   };\r\n  \r\n  \r\n\r\n//   const handleDragEnd = (result) => {\r\n//     if (!result.destination) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceHeatIndex = rounds.findIndex((round) =>\r\n//       round.heats.some((heat) => heat.id === result.source.droppableId)\r\n//     );\r\n//     const destinationHeatIndex = rounds.findIndex((round) =>\r\n//       round.heats.some((heat) => heat.id === result.destination.droppableId)\r\n//     );\r\n\r\n//     if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceRound = rounds[sourceHeatIndex];\r\n//     const destinationRound = rounds[destinationHeatIndex];\r\n\r\n//     const sourceHeat = sourceRound.heats.find(\r\n//       (heat) => heat.id === result.source.droppableId\r\n//     );\r\n//     const destinationHeat = destinationRound.heats.find(\r\n//       (heat) => heat.id === result.destination.droppableId\r\n//     );\r\n\r\n//     const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n//     destinationHeat.competitors.splice(\r\n//       result.destination.index,\r\n//       0,\r\n//       movedItem\r\n//     );\r\n\r\n//     const updatedRounds = rounds.map((round) => {\r\n//       if (round.id === sourceRound.id) {\r\n//         return sourceRound;\r\n//       }\r\n//       if (round.id === destinationRound.id) {\r\n//         return destinationRound;\r\n//       }\r\n//       return round;\r\n//     });\r\n\r\n//     setRounds(updatedRounds);\r\n//   };\r\n\r\n//   return (\r\n//   <div className=\"container mt-5\">\r\n//     <h2>Manage Events</h2>\r\n//     <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//       <div className=\"form-group\">\r\n//         <label>Event Name:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"form-control\"\r\n//           value={name}\r\n//           onChange={(e) => setName(e.target.value)}\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"form-group mt-3\">\r\n//         <label>Date:</label>\r\n//         <input\r\n//           type=\"date\"\r\n//           className=\"form-control\"\r\n//           value={date}\r\n//           onChange={(e) => setDate(e.target.value)}\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <div className=\"form-group mt-3\">\r\n//         <label>Location:</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"form-control\"\r\n//           value={location}\r\n//           onChange={(e) => setLocation(e.target.value)}\r\n//           required\r\n//         />\r\n//       </div>\r\n//       <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//         Create Event\r\n//       </button>\r\n//     </form>\r\n\r\n//     <h3>Existing Events</h3>\r\n//     {events.length === 0 ? (\r\n//       <p>No events available. Please create an event.</p>\r\n//     ) : (\r\n//       <ul className=\"list-group\">\r\n//         {events.map((event) => (\r\n//           <li\r\n//             key={event.id}\r\n//             className={`list-group-item d-flex justify-content-between align-items-center ${\r\n//               eventId === event.id ? \"active\" : \"\"\r\n//             }`}\r\n//             style={{ cursor: \"pointer\" }}\r\n//             onClick={() => {\r\n//               fetchCompetitors(event.id, event.name);\r\n//               fetchJudges(event.id);\r\n//             }}\r\n//           >\r\n//             {event.name}\r\n//             <button\r\n//               className=\"btn btn-danger\"\r\n//               onClick={() => handleDeleteEvent(event.id)}\r\n//             >\r\n//               Delete\r\n//             </button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     )}\r\n\r\n//     {eventId ? (\r\n//       <>\r\n//         <h3>Manage Competitors for {selectedEventName}</h3>\r\n//         <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n//           <div className=\"form-group\">\r\n//             <label>Competitor Name:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control\"\r\n//               value={competitorName}\r\n//               onChange={(e) => setCompetitorName(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group mt-3\">\r\n//             <label>Category:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={category}\r\n//               onChange={(e) => setCategory(e.target.value)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Select Category</option>\r\n//               {categories.map((cat) => (\r\n//                 <option key={cat} value={cat}>\r\n//                   {cat}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group mt-3\">\r\n//             <label>Sub Category:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={subCategory}\r\n//               onChange={(e) => setSubCategory(e.target.value)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Select Sub Category</option>\r\n//               {subCategories.map((subCat) => (\r\n//                 <option key={subCat} value={subCat}>\r\n//                   {subCat}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group mt-3\">\r\n//             <label>Board Type:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={boardType}\r\n//               onChange={(e) => setBoardType(e.target.value)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Select Board Type</option>\r\n//               {categories.map((type) => (\r\n//                 <option key={type} value={type}>\r\n//                   {type}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group mt-3\">\r\n//             <label>Gender:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={gender}\r\n//               onChange={(e) => setGender(e.target.value)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Select Gender</option>\r\n//               {subCategories.map((g) => (\r\n//                 <option key={g} value={g}>\r\n//                   {g}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"form-group mt-3\">\r\n//             <label>Age Category:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={ageCategory}\r\n//               onChange={(e) => setAgeCategory(e.target.value)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Select Age Category</option>\r\n//               {ageCategories.map((cat) => (\r\n//                 <option key={cat} value={cat}>\r\n//                   {cat}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//             Add Competitor\r\n//           </button>\r\n//         </form>\r\n\r\n//         <h3>Existing Competitors</h3>\r\n//         <ul className=\"list-group\">\r\n//           {competitors.map((competitor) => (\r\n//             <li\r\n//               key={competitor.id}\r\n//               className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//             >\r\n//               {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n//               {competitor.category}, Sub Category: {competitor.sub_category},\r\n//               Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n//               , Age Category: {competitor.age_category})\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() => handleDeleteCompetitor(competitor.id)}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n\r\n//         <h3>Manage Judges for {selectedEventName}</h3>\r\n//         <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n//           <div className=\"form-group\">\r\n//             <label>Judge Name:</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control\"\r\n//               value={judgeName}\r\n//               onChange={(e) => setJudgeName(e.target.value)}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//             Add Judge\r\n//           </button>\r\n//         </form>\r\n\r\n//         <h3>Existing Judges</h3>\r\n//         <ul className=\"list-group\">\r\n//           {judges.map((judge) => (\r\n//             <li\r\n//               key={judge.id}\r\n//               className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n//             >\r\n//               {judge.name} (Event: {selectedEventName})\r\n//               <button\r\n//                 className=\"btn btn-danger\"\r\n//                 onClick={() => handleDeleteJudge(judge.id)}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n\r\n//         <h3>Rounds</h3>\r\n//       <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//         Create Rounds\r\n//       </button>\r\n//       <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//         Save Rounds\r\n//       </button>\r\n//       <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n//         Show All Rounds\r\n//       </button>\r\n//       <button\r\n//         className=\"btn btn-secondary mt-0\"\r\n//         onClick={handleGeneratePDF}\r\n//       >\r\n//         Generate PDF\r\n//       </button>\r\n\r\n//       <DragDropContext onDragEnd={handleDragEnd}>\r\n//         {rounds.map((round) => (\r\n//           <Droppable droppableId={round.id.toString()} key={round.id}>\r\n//             {(provided) => (\r\n//               <div\r\n//                 ref={provided.innerRef}\r\n//                 {...provided.droppableProps}\r\n//                 className=\"mb-4\"\r\n//               >\r\n//                 <h4>{round.name}</h4>\r\n//                 {round.heats.map((heat, index) => (\r\n//                   <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\r\n//                     {(provided) => (\r\n//                       <div\r\n//                         ref={provided.innerRef}\r\n//                         {...provided.droppableProps}\r\n//                         className=\"list-group mb-3\"\r\n//                       >\r\n//                         <h5>Heat {index + 1}</h5>\r\n//                         {heat.competitors.map((competitor, idx) => (\r\n//                           <Draggable\r\n//                             key={competitor.id}\r\n//                             draggableId={competitor.id.toString()}\r\n//                             index={idx}\r\n//                           >\r\n//                             {(provided) => (\r\n//                               <div\r\n//                                 ref={provided.innerRef}\r\n//                                 {...provided.draggableProps}\r\n//                                 {...provided.dragHandleProps}\r\n//                                 className=\"list-group-item\"\r\n//                               >\r\n//                                 {competitor.name}\r\n//                               </div>\r\n//                             )}\r\n//                           </Draggable>\r\n//                         ))}\r\n//                         {provided.placeholder}\r\n//                       </div>\r\n//                     )}\r\n//                   </Droppable>\r\n//                 ))}\r\n//                 {provided.placeholder}\r\n//               </div>\r\n//             )}\r\n//           </Droppable>\r\n//         ))}\r\n//       </DragDropContext>\r\n\r\n//       {showRounds && (\r\n//         <>\r\n//           <h3>Rounds for {selectedEventName}</h3>\r\n//           {rounds.map((round, roundIndex) => (\r\n//             <div key={roundIndex} className=\"mb-4\">\r\n//               <h4>\r\n//                 Round {roundIndex + 1} ({round.category}, {round.sub_category},{\" \"}\r\n//                 {round.board_type}, {round.gender}, {round.age_category})\r\n//               </h4>\r\n//               {round.heats.map((heat, heatIndex) => (\r\n//                 <div key={heatIndex} className=\"mb-2\">\r\n//                   <h5>Heat {heatIndex + 1}</h5>\r\n//                   <ul className=\"list-group\">\r\n//                     {heat.competitors.map((competitor, competitorIndex) => (\r\n//                       <li key={competitorIndex} className=\"list-group-item\">\r\n//                         {competitor.name}\r\n//                       </li>\r\n//                     ))}\r\n//                   </ul>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           ))}\r\n//         </>\r\n//         )}\r\n//       </>\r\n//     ) : (\r\n//       <p className=\"mt-4\">\r\n//         Please select an event to manage competitors and judges.\r\n//       </p>\r\n//     )}\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [showRounds, setShowRounds] = useState(false);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [competitorName, setCompetitorName] = useState(\"\");\r\n//   const [category, setCategory] = useState(categories[0]);\r\n//   const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n//   const [boardType, setBoardType] = useState(categories[0]);\r\n//   const [gender, setGender] = useState(subCategories[0]);\r\n//   const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n//   const [judgeName, setJudgeName] = useState(\"\");\r\n//   const [createdBy, setCreatedBy] = useState(1);\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//         created_by: createdBy,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddCompetitor = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n//         name: competitorName,\r\n//         event_id: eventId,\r\n//         category,\r\n//         sub_category: subCategory,\r\n//         board_type: boardType,\r\n//         gender,\r\n//         age_category: ageCategory,\r\n//       });\r\n//       alert(\"Competitor added successfully\");\r\n//       setCompetitorName(\"\");\r\n//       setCategory(categories[0]);\r\n//       setSubCategory(subCategories[0]);\r\n//       setBoardType(categories[0]);\r\n//       setGender(subCategories[0]);\r\n//       setAgeCategory(ageCategories[0]);\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding competitor:\", error);\r\n//       alert(\"Error adding competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddJudge = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n//         name: judgeName,\r\n//         event_id: eventId,\r\n//       });\r\n//       alert(\"Judge added successfully\");\r\n//       setJudgeName(\"\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding judge:\", error);\r\n//       alert(\"Error adding judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\r\n//         eventId,\r\n//         rounds: rounds.map((round) => ({\r\n//           name: round.name,\r\n//           category: round.category,\r\n//           sub_category: round.sub_category,\r\n//           board_type: round.board_type,\r\n//           gender: round.gender,\r\n//           age_category: round.age_category,\r\n//           heats: round.heats.map((heat) => ({\r\n//             heat_name: heat.name,\r\n//             competitors: heat.competitors.map((competitor) => ({\r\n//               id: competitor.id,\r\n//               name: competitor.name,\r\n//             })),\r\n//           })),\r\n//         })),\r\n//       });\r\n\r\n//       console.log(\"Rounds and heats saved successfully:\", response.data);\r\n//       alert(\"Rounds saved successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFetchRounds = async () => {\r\n//     try {\r\n//       console.log(\"Fetching rounds for event ID:\", eventId);\r\n//       const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\r\n//       console.log(\"Response received from server:\", response);\r\n\r\n//       const rounds = response.data;\r\n//       console.log(\"Rounds data:\", rounds);\r\n\r\n//       const processedRounds = rounds.map((round) => {\r\n//         console.log(\"Processing round:\", round);\r\n//         return {\r\n//           ...round,\r\n//           heats: round.heats.map((heat) => {\r\n//             console.log(\"Processing heat:\", heat);\r\n//             return {\r\n//               ...heat,\r\n//               competitors: heat.competitors.map((competitor) => ({\r\n//                 id: competitor.id,\r\n//                 name: competitor.name,\r\n//               })),\r\n//             };\r\n//           }),\r\n//         };\r\n//       });\r\n\r\n//       console.log(\"Processed rounds:\", processedRounds);\r\n//       setRounds(processedRounds);\r\n//       setShowRounds(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rounds:\", error);\r\n//       alert(\"Error fetching rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const handleGeneratePDF = async () => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`, { responseType: \"blob\" });\r\n//       const url = window.URL.createObjectURL(new Blob([response.data]));\r\n//       const link = document.createElement(\"a\");\r\n//       link.href = url;\r\n//       link.setAttribute(\"download\", \"rounds.pdf\");\r\n//       document.body.appendChild(link);\r\n//       link.click();\r\n//     } catch (error) {\r\n//       console.error(\"Error generating PDF:\", error);\r\n//       alert(\"Error generating PDF\");\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateRounds = () => {\r\n//     if (!eventId) {\r\n//       alert(\"Please select an event first.\");\r\n//       return;\r\n//     }\r\n\r\n//     const competitorsByCategory = {};\r\n\r\n//     // Organize competitors by their categories and sub-categories\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n\r\n//     const newRounds = [];\r\n\r\n//     // Create one round for each category and add heats\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       const heats = [];\r\n\r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n//         heats.push({\r\n//           id: `heat-1-${heats.length + 1}`,\r\n//           name: `Heat ${heats.length + 1}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n//       }\r\n\r\n//       newRounds.push({\r\n//         name: `Round 1 (${key})`,\r\n//         category: competitorsList[0].category,\r\n//         sub_category: competitorsList[0].sub_category,\r\n//         board_type: competitorsList[0].board_type,\r\n//         gender: competitorsList[0].gender,\r\n//         age_category: competitorsList[0].age_category,\r\n//         heats,\r\n//       });\r\n//     });\r\n\r\n//     setRounds(newRounds);\r\n//     console.log(\"Created rounds:\", newRounds);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h2>Manage Events</h2>\r\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//         <div className=\"form-group\">\r\n//           <label>Event Name:</label>\r\n//           <input type=\"text\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Date:</label>\r\n//           <input type=\"date\" className=\"form-control\" value={date} onChange={(e) => setDate(e.target.value)} required />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Location:</label>\r\n//           <input type=\"text\" className=\"form-control\" value={location} onChange={(e) => setLocation(e.target.value)} required />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//           Create Event\r\n//         </button>\r\n//       </form>\r\n\r\n//       <h3>Existing Events</h3>\r\n//       {events.length === 0 ? (\r\n//         <p>No events available. Please create an event.</p>\r\n//       ) : (\r\n//         <ul className=\"list-group\">\r\n//           {events.map((event) => (\r\n//             <li\r\n//               key={event.id}\r\n//               className={`list-group-item d-flex justify-content-between align-items-center ${eventId === event.id ? \"active\" : \"\"}`}\r\n//               style={{ cursor: \"pointer\" }}\r\n//               onClick={() => {\r\n//                 fetchCompetitors(event.id, event.name);\r\n//                 fetchJudges(event.id);\r\n//               }}\r\n//             >\r\n//               {event.name}\r\n//               <button className=\"btn btn-danger\" onClick={() => handleDeleteEvent(event.id)}>\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n\r\n//       {eventId ? (\r\n//         <>\r\n//           <h3>Manage Competitors for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Competitor Name:</label>\r\n//               <input type=\"text\" className=\"form-control\" value={competitorName} onChange={(e) => setCompetitorName(e.target.value)} required />\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Category:</label>\r\n//               <select className=\"form-control\" value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n//                 <option value=\"\">Select Category</option>\r\n//                 {categories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Sub Category:</label>\r\n//               <select className=\"form-control\" value={subCategory} onChange={(e) => setSubCategory(e.target.value)} required>\r\n//                 <option value=\"\">Select Sub Category</option>\r\n//                 {subCategories.map((subCat) => (\r\n//                   <option key={subCat} value={subCat}>\r\n//                     {subCat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Board Type:</label>\r\n//               <select className=\"form-control\" value={boardType} onChange={(e) => setBoardType(e.target.value)} required>\r\n//                 <option value=\"\">Select Board Type</option>\r\n//                 {categories.map((type) => (\r\n//                   <option key={type} value={type}>\r\n//                     {type}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Gender:</label>\r\n//               <select className=\"form-control\" value={gender} onChange={(e) => setGender(e.target.value)} required>\r\n//                 <option value=\"\">Select Gender</option>\r\n//                 {subCategories.map((g) => (\r\n//                   <option key={g} value={g}>\r\n//                     {g}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"form-group mt-3\">\r\n//               <label>Age Category:</label>\r\n//               <select className=\"form-control\" value={ageCategory} onChange={(e) => setAgeCategory(e.target.value)} required>\r\n//                 <option value=\"\">Select Age Category</option>\r\n//                 {ageCategories.map((cat) => (\r\n//                   <option key={cat} value={cat}>\r\n//                     {cat}\r\n//                   </option>\r\n//                 ))}\r\n//               </select>\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Competitor\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Competitors</h3>\r\n//           <ul className=\"list-group\">\r\n//             {competitors.map((competitor) => (\r\n//               <li key={competitor.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n//                 {competitor.name} (Event: {selectedEventName}, Category: {competitor.category}, Sub Category: {competitor.sub_category}, Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n//                 , Age Category: {competitor.age_category})\r\n//                 <button className=\"btn btn-danger\" onClick={() => handleDeleteCompetitor(competitor.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Manage Judges for {selectedEventName}</h3>\r\n//           <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n//             <div className=\"form-group\">\r\n//               <label>Judge Name:</label>\r\n//               <input type=\"text\" className=\"form-control\" value={judgeName} onChange={(e) => setJudgeName(e.target.value)} required />\r\n//             </div>\r\n//             <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//               Add Judge\r\n//             </button>\r\n//           </form>\r\n\r\n//           <h3>Existing Judges</h3>\r\n//           <ul className=\"list-group\">\r\n//             {judges.map((judge) => (\r\n//               <li key={judge.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n//                 {judge.name} (Event: {selectedEventName})\r\n//                 <button className=\"btn btn-danger\" onClick={() => handleDeleteJudge(judge.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n\r\n//           <h3>Rounds</h3>\r\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//             Create Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//             Save Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n//             Show All Rounds\r\n//           </button>\r\n//           <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\r\n//             Generate PDF\r\n//           </button>\r\n\r\n//           {showRounds && (\r\n//             <>\r\n//               <h3>Rounds for {selectedEventName}</h3>\r\n//               {rounds.map((round, roundIndex) => (\r\n//                 <div key={roundIndex} className=\"mb-4\">\r\n//                   <h4>\r\n//                     Round 1 : Heat {roundIndex + 1} - {round.age_category} {round.gender}\r\n//                   </h4>\r\n//                   {round.heats.map((heat, heatIndex) => (\r\n//                     <div key={heatIndex} className=\"mb-2\">\r\n//                       <h5>Heat {heatIndex + 1}</h5>\r\n//                       <ul className=\"list-group\">\r\n//                         {heat.competitors.map((competitor, competitorIndex) => (\r\n//                           <li key={competitorIndex} className=\"list-group-item\">\r\n//                             {competitor.name}\r\n//                           </li>\r\n//                         ))}\r\n//                       </ul>\r\n//                     </div>\r\n//                   ))}\r\n//                 </div>\r\n//               ))}\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       ) : (\r\n//         <p className=\"mt-4\">Please select an event to manage competitors and judges.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst categories = [\"Shortboard\", \"Longboard\"];\r\nconst subCategories = [\"Men\", \"Women\"];\r\nconst ageCategories = [\r\n  \"Open\",\r\n  \"Sub12\",\r\n  \"Sub14\",\r\n  \"Sub18\",\r\n  \"Professional\",\r\n  \"+40\",\r\n  \"+45\",\r\n  \"+50\",\r\n  \"+60\",\r\n  \"+65\",\r\n  \"+70\",\r\n];\r\n\r\nconst EventManagement = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [competitors, setCompetitors] = useState([]);\r\n  const [judges, setJudges] = useState([]);\r\n  const [rounds, setRounds] = useState([]);\r\n  const [showRounds, setShowRounds] = useState(false);\r\n  const [eventId, setEventId] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [competitorName, setCompetitorName] = useState(\"\");\r\n  const [category, setCategory] = useState(categories[0]);\r\n  const [subCategory, setSubCategory] = useState(subCategories[0]);\r\n  const [boardType, setBoardType] = useState(categories[0]);\r\n  const [gender, setGender] = useState(subCategories[0]);\r\n  const [ageCategory, setAgeCategory] = useState(ageCategories[0]);\r\n  const [judgeName, setJudgeName] = useState(\"\");\r\n  const [createdBy, setCreatedBy] = useState(1);\r\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3000/event-admin/get-events\"\r\n      );\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching events:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchCompetitors = async (eventId, eventName) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n      );\r\n      setCompetitors(response.data);\r\n      setEventId(eventId);\r\n      setSelectedEventName(eventName);\r\n    } catch (error) {\r\n      console.error(\"Error fetching competitors:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchJudges = async (eventId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n      );\r\n      setJudges(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching judges:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCreateEvent = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n        name,\r\n        date,\r\n        location,\r\n        created_by: createdBy,\r\n      });\r\n      alert(\"Event created successfully\");\r\n      setName(\"\");\r\n      setDate(\"\");\r\n      setLocation(\"\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error creating event:\", error);\r\n      alert(\"Error creating event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-event/${id}`\r\n      );\r\n      alert(\"Event deleted successfully\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n      alert(\"Error deleting event\");\r\n    }\r\n  };\r\n\r\n  const handleAddCompetitor = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/add-competitor\", {\r\n        name: competitorName,\r\n        event_id: eventId,\r\n        category,\r\n        sub_category: subCategory,\r\n        board_type: boardType,\r\n        gender,\r\n        age_category: ageCategory,\r\n      });\r\n      alert(\"Competitor added successfully\");\r\n      setCompetitorName(\"\");\r\n      setCategory(categories[0]);\r\n      setSubCategory(subCategories[0]);\r\n      setBoardType(categories[0]);\r\n      setGender(subCategories[0]);\r\n      setAgeCategory(ageCategories[0]);\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error adding competitor:\", error);\r\n      alert(\"Error adding competitor\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteCompetitor = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n      );\r\n      alert(\"Competitor deleted successfully\");\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error deleting competitor:\", error);\r\n      alert(\"Error deleting competitor\");\r\n    }\r\n  };\r\n\r\n  const handleAddJudge = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/add-judge\", {\r\n        name: judgeName,\r\n        event_id: eventId,\r\n      });\r\n      alert(\"Judge added successfully\");\r\n      setJudgeName(\"\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error adding judge:\", error);\r\n      alert(\"Error adding judge\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteJudge = async (id) => {\r\n    try {\r\n      await axios.delete(\r\n        `http://localhost:3000/event-admin/delete-judge/${id}`\r\n      );\r\n      alert(\"Judge deleted successfully\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error deleting judge:\", error);\r\n      alert(\"Error deleting judge\");\r\n    }\r\n  };\r\n\r\n  const handleSaveRounds = async () => {\r\n    try {\r\n      await axios.post(\r\n        \"http://localhost:3000/event-admin/save-rounds\",\r\n        {\r\n          eventId,\r\n          rounds: rounds.map((round) => ({\r\n            name: round.name,\r\n            category: round.category,\r\n            sub_category: round.sub_category,\r\n            board_type: round.board_type,\r\n            gender: round.gender,\r\n            age_category: round.age_category,\r\n            heats: round.heats.map((heat) => ({\r\n              heat_name: heat.name,\r\n              competitors: heat.competitors.map((competitor) => ({\r\n                id: competitor.id,\r\n                name: competitor.name,\r\n              })),\r\n            })),\r\n          })),\r\n        }\r\n      );\r\n      alert(\"Rounds saved successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error saving rounds:\", error);\r\n      alert(\"Error saving rounds\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleFetchRounds = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n      );\r\n  \r\n      const roundsData = response.data;\r\n      console.log(\"Initial rounds data:\", roundsData);\r\n  \r\n      if (!roundsData || !Array.isArray(roundsData)) {\r\n        throw new Error(\"Invalid rounds data\");\r\n      }\r\n  \r\n      const processedRounds = roundsData.map((round) => {\r\n        console.log(\"Processing round:\", round);\r\n        if (!round.heats || !Array.isArray(round.heats)) {\r\n          console.warn(\"No heats found for round:\", round);\r\n          return {\r\n            id: round.id,\r\n            name: round.round_name,\r\n            category: round.category,\r\n            sub_category: round.sub_category,\r\n            board_type: round.board_type,\r\n            gender: round.gender,\r\n            age_category: round.age_category,\r\n            heats: [],\r\n          };\r\n        }\r\n  \r\n        const processedHeats = round.heats.map((heat) => {\r\n          console.log(\"Processing heat:\", heat);\r\n          const processedCompetitors = heat.competitors ? heat.competitors.map((competitor) => ({\r\n            id: competitor.id,\r\n            name: competitor.name,\r\n          })) : [];\r\n          console.log(\"Processed competitors:\", processedCompetitors);\r\n          return {\r\n            id: heat.id,\r\n            name: heat.heat_name,\r\n            competitors: processedCompetitors,\r\n          };\r\n        });\r\n        console.log(\"Processed heats:\", processedHeats);\r\n        return {\r\n          id: round.id,\r\n          name: round.round_name,\r\n          category: round.category,\r\n          sub_category: round.sub_category,\r\n          board_type: round.board_type,\r\n          gender: round.gender,\r\n          age_category: round.age_category,\r\n          heats: processedHeats,\r\n        };\r\n      });\r\n  \r\n      console.log(\"Processed rounds:\", processedRounds);\r\n      setRounds(processedRounds);\r\n      setShowRounds(true);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rounds:\", error);\r\n      alert(\"Error fetching rounds\");\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\n  // const handleFetchRounds = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(\r\n  //       `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n  //     );\r\n\r\n  //     const roundsData = response.data;\r\n  //     console.log(\"Rounds data:\", roundsData);\r\n\r\n  //     if (!roundsData || !Array.isArray(roundsData)) {\r\n  //       throw new Error(\"Invalid rounds data\");\r\n  //     }\r\n\r\n  //     const processedRounds = roundsData.map((round) => ({\r\n  //       id: round.id,\r\n  //       name: round.round_name,\r\n  //       category: round.category,\r\n  //       sub_category: round.sub_category,\r\n  //       board_type: round.board_type,\r\n  //       gender: round.gender,\r\n  //       age_category: round.age_category,\r\n  //       heats: round.heats.map((heat) => ({\r\n  //         id: heat.id,\r\n  //         name: heat.heat_name,\r\n  //         competitors: heat.competitors.map((competitor) => ({\r\n  //           id: competitor.id,\r\n  //           name: competitor.name,\r\n  //         })),\r\n  //       })),\r\n  //     }));\r\n\r\n  //     console.log(\"Processed rounds:\", processedRounds);\r\n  //     setRounds(processedRounds);\r\n  //     setShowRounds(true);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching rounds:\", error);\r\n  //     alert(\"Error fetching rounds\");\r\n  //   }\r\n  // };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3000/event-admin/generate-rounds-pdf/${eventId}`,\r\n        { responseType: \"blob\" }\r\n      );\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", \"rounds.pdf\");\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error);\r\n      alert(\"Error generating PDF\");\r\n    }\r\n  };\r\n\r\n  const handleCreateRounds = () => {\r\n    if (!eventId) {\r\n      alert(\"Please select an event first.\");\r\n      return;\r\n    }\r\n\r\n    const competitorsByCategory = {};\r\n\r\n    competitors.forEach((competitor) => {\r\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n      if (!competitorsByCategory[key]) {\r\n        competitorsByCategory[key] = [];\r\n      }\r\n      competitorsByCategory[key].push(competitor);\r\n    });\r\n\r\n    const newRounds = [];\r\n\r\n    Object.keys(competitorsByCategory).forEach((key) => {\r\n      const competitorsList = competitorsByCategory[key];\r\n      const heats = [];\r\n\r\n      for (let i = 0; i < competitorsList.length; i += 4) {\r\n        const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n        heats.push({\r\n          id: `heat-${heats.length + 1}`,\r\n          name: `Heat ${heats.length + 1}`,\r\n          competitors: heatCompetitors,\r\n        });\r\n      }\r\n\r\n      newRounds.push({\r\n        id: `round-${newRounds.length + 1}`,\r\n        name: `Round 1 (${key})`,\r\n        category: competitorsList[0].category,\r\n        sub_category: competitorsList[0].sub_category,\r\n        board_type: competitorsList[0].board_type,\r\n        gender: competitorsList[0].gender,\r\n        age_category: competitorsList[0].age_category,\r\n        heats,\r\n      });\r\n    });\r\n\r\n    setRounds(newRounds);\r\n    console.log(\"Created rounds:\", newRounds);\r\n  };\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const sourceHeatIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === result.source.droppableId)\r\n    );\r\n    const destinationHeatIndex = rounds.findIndex((round) =>\r\n      round.heats.some((heat) => heat.id === result.destination.droppableId)\r\n    );\r\n\r\n    if (sourceHeatIndex === -1 || destinationHeatIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const sourceRound = rounds[sourceHeatIndex];\r\n    const destinationRound = rounds[destinationHeatIndex];\r\n\r\n    const sourceHeat = sourceRound.heats.find(\r\n      (heat) => heat.id === result.source.droppableId\r\n    );\r\n    const destinationHeat = destinationRound.heats.find(\r\n      (heat) => heat.id === result.destination.droppableId\r\n    );\r\n\r\n    const [movedItem] = sourceHeat.competitors.splice(result.source.index, 1);\r\n    destinationHeat.competitors.splice(result.destination.index, 0, movedItem);\r\n\r\n    const updatedRounds = rounds.map((round) => {\r\n      if (round.id === sourceRound.id) {\r\n        return sourceRound;\r\n      }\r\n      if (round.id === destinationRound.id) {\r\n        return destinationRound;\r\n      }\r\n      return round;\r\n    });\r\n\r\n    setRounds(updatedRounds);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2>Manage Events</h2>\r\n      <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <label>Event Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={location}\r\n            onChange={(e) => setLocation(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n          Create Event\r\n        </button>\r\n      </form>\r\n\r\n      <h3>Existing Events</h3>\r\n      {events.length === 0 ? (\r\n        <p>No events available. Please create an event.</p>\r\n      ) : (\r\n        <ul className=\"list-group\">\r\n          {events.map((event) => (\r\n            <li\r\n              key={event.id}\r\n              className={`list-group-item d-flex justify-content-between align-items-center ${\r\n                eventId === event.id ? \"active\" : \"\"\r\n              }`}\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                fetchCompetitors(event.id, event.name);\r\n                fetchJudges(event.id);\r\n              }}\r\n            >\r\n              {event.name}\r\n              <button\r\n                className=\"btn btn-danger\"\r\n                onClick={() => handleDeleteEvent(event.id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {eventId ? (\r\n        <>\r\n          <h3>Manage Competitors for {selectedEventName}</h3>\r\n          <form onSubmit={handleAddCompetitor} className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n              <label>Competitor Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={competitorName}\r\n                onChange={(e) => setCompetitorName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Category</option>\r\n                {categories.map((cat) => (\r\n                  <option key={cat} value={cat}>\r\n                    {cat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Sub Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={subCategory}\r\n                onChange={(e) => setSubCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Sub Category</option>\r\n                {subCategories.map((subCat) => (\r\n                  <option key={subCat} value={subCat}>\r\n                    {subCat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Board Type:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={boardType}\r\n                onChange={(e) => setBoardType(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Board Type</option>\r\n                {categories.map((type) => (\r\n                  <option key={type} value={type}>\r\n                    {type}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Gender:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={gender}\r\n                onChange={(e) => setGender(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Gender</option>\r\n                {subCategories.map((g) => (\r\n                  <option key={g} value={g}>\r\n                    {g}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group mt-3\">\r\n              <label>Age Category:</label>\r\n              <select\r\n                className=\"form-control\"\r\n                value={ageCategory}\r\n                onChange={(e) => setAgeCategory(e.target.value)}\r\n                required\r\n              >\r\n                <option value=\"\">Select Age Category</option>\r\n                {ageCategories.map((cat) => (\r\n                  <option key={cat} value={cat}>\r\n                    {cat}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n              Add Competitor\r\n            </button>\r\n          </form>\r\n\r\n          <h3>Existing Competitors</h3>\r\n          <ul className=\"list-group\">\r\n            {competitors.map((competitor) => (\r\n              <li\r\n                key={competitor.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              >\r\n                {competitor.name} (Event: {selectedEventName}, Category:{\" \"}\r\n                {competitor.category}, Sub Category: {competitor.sub_category},\r\n                Board Type: {competitor.board_type}, Gender: {competitor.gender}\r\n                , Age Category: {competitor.age_category})\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteCompetitor(competitor.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h3>Manage Judges for {selectedEventName}</h3>\r\n          <form onSubmit={handleAddJudge} className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n              <label>Judge Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={judgeName}\r\n                onChange={(e) => setJudgeName(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n              Add Judge\r\n            </button>\r\n          </form>\r\n\r\n          <h3>Existing Judges</h3>\r\n          <ul className=\"list-group\">\r\n            {judges.map((judge) => (\r\n              <li\r\n                key={judge.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n              >\r\n                {judge.name} (Event: {selectedEventName})\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteJudge(judge.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          <h3>Rounds</h3>\r\n          <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n            Create Rounds\r\n          </button>\r\n          <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n            Save Rounds\r\n          </button>\r\n          <button className=\"btn btn-info mt-0\" onClick={handleFetchRounds}>\r\n            Show All Rounds\r\n          </button>\r\n          <button className=\"btn btn-secondary mt-0\" onClick={handleGeneratePDF}>\r\n            Generate PDF\r\n          </button>\r\n\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            {rounds.map((round) => (\r\n              <Droppable droppableId={round.id.toString()} key={round.id}>\r\n                {(provided) => (\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.droppableProps}\r\n                    className=\"mb-4\"\r\n                  >\r\n                    <h4>{round.name}</h4>\r\n                    {round.heats.map((heat, index) => (\r\n                      <Droppable droppableId={`heat-${heat.id}`} key={heat.id}>\r\n                        {(provided) => (\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                            className=\"list-group mb-3\"\r\n                          >\r\n                            <h5>Heat {index + 1}</h5>\r\n                            {heat.competitors.map((competitor, idx) => (\r\n                              <Draggable\r\n                                key={competitor.id}\r\n                                draggableId={competitor.id.toString()}\r\n                                index={idx}\r\n                              >\r\n                                {(provided) => (\r\n                                  <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.draggableProps}\r\n                                    {...provided.dragHandleProps}\r\n                                    className=\"list-group-item\"\r\n                                  >\r\n                                    {competitor.name}\r\n                                  </div>\r\n                                )}\r\n                              </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                          </div>\r\n                        )}\r\n                      </Droppable>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            ))}\r\n          </DragDropContext>\r\n\r\n          {showRounds && (\r\n            <>\r\n              <h3>Rounds for {selectedEventName}</h3>\r\n              {rounds.map((round, roundIndex) => (\r\n                <div key={roundIndex} className=\"mb-4\">\r\n                  <h4>\r\n                    Round {roundIndex + 1} ({round.category}, {round.sub_category}, {round.board_type}, {round.gender}, {round.age_category})\r\n                  </h4>\r\n                  {round.heats.map((heat, heatIndex) => (\r\n                    <div key={heatIndex} className=\"mb-2\">\r\n                      <h5>Heat {heatIndex + 1}</h5>\r\n                      <ul className=\"list-group\">\r\n                        {heat.competitors.map((competitor, competitorIndex) => (\r\n                          <li key={competitorIndex} className=\"list-group-item\">\r\n                            {competitor.name}\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p className=\"mt-4\">\r\n          Please select an event to manage competitors and judges.\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n\r\n\r\n\r\n\r\n"],"mappingslD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC;AAC9C,MAAMC,aAAa,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC;AACtC,MAAMC,aAAa,GAAG,CACpB,MAAM,EACN,OAAO,EACP,OAAO,EACP,OAAO,EACP,cAAc,EACd,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN;AAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2B,IAAI,EAAEC,OAAO,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC6B,IAAI,EAAEC,OAAO,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiC,cAAc,EAAEC,iBAAiB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmC,QAAQ,EAAEC,WAAW,CAAC,GAAGpC,QAAQ,CAACU,UAAU,CAAC,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAACW,aAAa,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAACU,UAAU,CAAC,CAAC,CAAC,CAAC;EACzD,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAG1C,QAAQ,CAACW,aAAa,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAG5C,QAAQ,CAACY,aAAa,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC+C,SAAS,EAAEC,YAAY,CAAC,GAAGhD,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACiD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EAE9DC,SAAS,CAAC,MAAM;IACdkD,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC9B,8CACF,CAAC;MACDrC,SAAS,CAACoC,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAAA,CAAOhC,OAAO,EAAEiC,SAAS,KAAK;IACrD,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC7B,qDAAoD5B,OAAQ,EAC/D,CAAC;MACDP,cAAc,CAACkC,QAAQ,CAACE,IAAI,CAAC;MAC7B5B,UAAU,CAACD,OAAO,CAAC;MACnByB,oBAAoB,CAACQ,SAAS,CAAC;IACjC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMI,WAAW,GAAG,MAAOlC,OAAO,IAAK;IACrC,IAAI;MACF,MAAM2B,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC7B,gDAA+C5B,OAAQ,EAC1D,CAAC;MACDL,SAAS,CAACgC,QAAQ,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAMK,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAM5D,KAAK,CAAC6D,IAAI,CAAC,gDAAgD,EAAE;QACjEpC,IAAI;QACJE,IAAI;QACJE,QAAQ;QACRiC,UAAU,EAAEjB;MACd,CAAC,CAAC;MACFkB,KAAK,CAAC,4BAA4B,CAAC;MACnCrC,OAAO,CAAC,EAAE,CAAC;MACXE,OAAO,CAAC,EAAE,CAAC;MACXE,WAAW,CAAC,EAAE,CAAC;MACfmB,WAAW,CAAC,CAAC;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CU,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAOC,EAAE,IAAK;IACtC,IAAI;MACF,MAAMjE,KAAK,CAACkE,MAAM,CACf,kDAAiDD,EAAG,EACvD,CAAC;MACDF,KAAK,CAAC,4BAA4B,CAAC;MACnCd,WAAW,CAAC,CAAC;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CU,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMI,mBAAmB,GAAG,MAAOR,CAAC,IAAK;IACvCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAM5D,KAAK,CAAC6D,IAAI,CAAC,kDAAkD,EAAE;QACnEpC,IAAI,EAAEM,cAAc;QACpBqC,QAAQ,EAAE7C,OAAO;QACjBU,QAAQ;QACRoC,YAAY,EAAElC,WAAW;QACzBmC,UAAU,EAAEjC,SAAS;QACrBE,MAAM;QACNgC,YAAY,EAAE9B;MAChB,CAAC,CAAC;MACFsB,KAAK,CAAC,+BAA+B,CAAC;MACtC/B,iBAAiB,CAAC,EAAE,CAAC;MACrBE,WAAW,CAAC1B,UAAU,CAAC,CAAC,CAAC,CAAC;MAC1B4B,cAAc,CAAC3B,aAAa,CAAC,CAAC,CAAC,CAAC;MAChC6B,YAAY,CAAC9B,UAAU,CAAC,CAAC,CAAC,CAAC;MAC3BgC,SAAS,CAAC/B,aAAa,CAAC,CAAC,CAAC,CAAC;MAC3BiC,cAAc,CAAChC,aAAa,CAAC,CAAC,CAAC,CAAC;MAChC6C,gBAAgB,CAAChC,OAAO,EAAEwB,iBAAiB,CAAC;IAC9C,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDU,KAAK,CAAC,yBAAyB,CAAC;IAClC;EACF,CAAC;EAED,MAAMS,sBAAsB,GAAG,MAAOP,EAAE,IAAK;IAC3C,IAAI;MACF,MAAMjE,KAAK,CAACkE,MAAM,CACf,uDAAsDD,EAAG,EAC5D,CAAC;MACDF,KAAK,CAAC,iCAAiC,CAAC;MACxCR,gBAAgB,CAAChC,OAAO,EAAEwB,iBAAiB,CAAC;IAC9C,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDU,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF,CAAC;EAED,MAAMU,cAAc,GAAG,MAAOd,CAAC,IAAK;IAClCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAM5D,KAAK,CAAC6D,IAAI,CAAC,6CAA6C,EAAE;QAC9DpC,IAAI,EAAEkB,SAAS;QACfyB,QAAQ,EAAE7C;MACZ,CAAC,CAAC;MACFwC,KAAK,CAAC,0BAA0B,CAAC;MACjCnB,YAAY,CAAC,EAAE,CAAC;MAChBa,WAAW,CAAClC,OAAO,CAAC;IACtB,CAAC,CAAC,OAAO8B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CU,KAAK,CAAC,oBAAoB,CAAC;IAC7B;EACF,CAAC;EAED,MAAMW,iBAAiB,GAAG,MAAOT,EAAE,IAAK;IACtC,IAAI;MACF,MAAMjE,KAAK,CAACkE,MAAM,CACf,kDAAiDD,EAAG,EACvD,CAAC;MACDF,KAAK,CAAC,4BAA4B,CAAC;MACnCN,WAAW,CAAClC,OAAO,CAAC;IACtB,CAAC,CAAC,OAAO8B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CU,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAM3E,KAAK,CAAC6D,IAAI,CACd,+CAA+C,EAC/C;QACEtC,OAAO;QACPJ,MAAM,EAAEA,MAAM,CAACyD,GAAG,CAAEC,KAAK,KAAM;UAC7BpD,IAAI,EAAEoD,KAAK,CAACpD,IAAI;UAChBQ,QAAQ,EAAE4C,KAAK,CAAC5C,QAAQ;UACxBoC,YAAY,EAAEQ,KAAK,CAACR,YAAY;UAChCC,UAAU,EAAEO,KAAK,CAACP,UAAU;UAC5B/B,MAAM,EAAEsC,KAAK,CAACtC,MAAM;UACpBgC,YAAY,EAAEM,KAAK,CAACN,YAAY;UAChCO,KAAK,EAAED,KAAK,CAACC,KAAK,CAACF,GAAG,CAAEG,IAAI,KAAM;YAChCC,SAAS,EAAED,IAAI,CAACtD,IAAI;YACpBV,WAAW,EAAEgE,IAAI,CAAChE,WAAW,CAAC6D,GAAG,CAAEK,UAAU,KAAM;cACjDhB,EAAE,EAAEgB,UAAU,CAAChB,EAAE;cACjBxC,IAAI,EAAEwD,UAAU,CAACxD;YACnB,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CACF,CAAC;MACDsC,KAAK,CAAC,2BAA2B,CAAC;IACpC,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CU,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAID,MAAMmB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMhC,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC7B,gDAA+C5B,OAAQ,EAC1D,CAAC;MAED,MAAM4D,UAAU,GAAGjC,QAAQ,CAACE,IAAI;MAChCE,OAAO,CAAC8B,GAAG,CAAC,sBAAsB,EAAED,UAAU,CAAC;MAE/C,IAAI,CAACA,UAAU,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,EAAE;QAC7C,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,eAAe,GAAGL,UAAU,CAACP,GAAG,CAAEC,KAAK,IAAK;QAChDvB,OAAO,CAAC8B,GAAG,CAAC,mBAAmB,EAAEP,KAAK,CAAC;QACvC,IAAI,CAACA,KAAK,CAACC,KAAK,IAAI,CAACO,KAAK,CAACC,OAAO,CAACT,KAAK,CAACC,KAAK,CAAC,EAAE;UAC/CxB,OAAO,CAACmC,IAAI,CAAC,2BAA2B,EAAEZ,KAAK,CAAC;UAChD,OAAO;YACLZ,EAAE,EAAEY,KAAK,CAACZ,EAAE;YACZxC,IAAI,EAAEoD,KAAK,CAACa,UAAU;YACtBzD,QAAQ,EAAE4C,KAAK,CAAC5C,QAAQ;YACxBoC,YAAY,EAAEQ,KAAK,CAACR,YAAY;YAChCC,UAAU,EAAEO,KAAK,CAACP,UAAU;YAC5B/B,MAAM,EAAEsC,KAAK,CAACtC,MAAM;YACpBgC,YAAY,EAAEM,KAAK,CAACN,YAAY;YAChCO,KAAK,EAAE;UACT,CAAC;QACH;QAEA,MAAMa,cAAc,GAAGd,KAAK,CAACC,KAAK,CAACF,GAAG,CAAEG,IAAI,IAAK;UAC/CzB,OAAO,CAAC8B,GAAG,CAAC,kBAAkB,EAAEL,IAAI,CAAC;UACrC,MAAMa,oBAAoB,GAAGb,IAAI,CAAChE,WAAW,GAAGgE,IAAI,CAAChE,WAAW,CAAC6D,GAAG,CAAEK,UAAU,KAAM;YACpFhB,EAAE,EAAEgB,UAAU,CAAChB,EAAE;YACjBxC,IAAI,EAAEwD,UAAU,CAACxD;UACnB,CAAC,CAAC,CAAC,GAAG,EAAE;UACR6B,OAAO,CAAC8B,GAAG,CAAC,wBAAwB,EAAEQ,oBAAoB,CAAC;UAC3D,OAAO;YACL3B,EAAE,EAAEc,IAAI,CAACd,EAAE;YACXxC,IAAI,EAAEsD,IAAI,CAACC,SAAS;YACpBjE,WAAW,EAAE6E;UACf,CAAC;QACH,CAAC,CAAC;QACFtC,OAAO,CAAC8B,GAAG,CAAC,kBAAkB,EAAEO,cAAc,CAAC;QAC/C,OAAO;UACL1B,EAAE,EAAEY,KAAK,CAACZ,EAAE;UACZxC,IAAI,EAAEoD,KAAK,CAACa,UAAU;UACtBzD,QAAQ,EAAE4C,KAAK,CAAC5C,QAAQ;UACxBoC,YAAY,EAAEQ,KAAK,CAACR,YAAY;UAChCC,UAAU,EAAEO,KAAK,CAACP,UAAU;UAC5B/B,MAAM,EAAEsC,KAAK,CAACtC,MAAM;UACpBgC,YAAY,EAAEM,KAAK,CAACN,YAAY;UAChCO,KAAK,EAAEa;QACT,CAAC;MACH,CAAC,CAAC;MAEFrC,OAAO,CAAC8B,GAAG,CAAC,mBAAmB,EAAEI,eAAe,CAAC;MACjDpE,SAAS,CAACoE,eAAe,CAAC;MAC1BlE,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC,OAAO+B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CU,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;;EAOD;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM8B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAM3C,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC7B,yDAAwD5B,OAAQ,EAAC,EAClE;QAAEuE,YAAY,EAAE;MAAO,CACzB,CAAC;MACD,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACjD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MACjE,MAAMgD,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAGR,GAAG;MACfK,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC;MAC3CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACd,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CU,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,MAAM6C,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACrF,OAAO,EAAE;MACZwC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;IAEA,MAAM8C,qBAAqB,GAAG,CAAC,CAAC;IAEhC9F,WAAW,CAAC+F,OAAO,CAAE7B,UAAU,IAAK;MAClC,MAAM8B,GAAG,GAAI,GAAE9B,UAAU,CAAChD,QAAS,IAAGgD,UAAU,CAACZ,YAAa,IAAGY,UAAU,CAACX,UAAW,IAAGW,UAAU,CAAC1C,MAAO,IAAG0C,UAAU,CAACV,YAAa,EAAC;MACxI,IAAI,CAACsC,qBAAqB,CAACE,GAAG,CAAC,EAAE;QAC/BF,qBAAqB,CAACE,GAAG,CAAC,GAAG,EAAE;MACjC;MACAF,qBAAqB,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC/B,UAAU,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMgC,SAAS,GAAG,EAAE;IAEpBC,MAAM,CAACC,IAAI,CAACN,qBAAqB,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAK;MAClD,MAAMK,eAAe,GAAGP,qBAAqB,CAACE,GAAG,CAAC;MAClD,MAAMjC,KAAK,GAAG,EAAE;MAEhB,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,eAAe,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAClD,MAAME,eAAe,GAAGH,eAAe,CAACI,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;QAEvDvC,KAAK,CAACkC,IAAI,CAAC;UACT/C,EAAE,EAAG,QAAOa,KAAK,CAACwC,MAAM,GAAG,CAAE,EAAC;UAC9B7F,IAAI,EAAG,QAAOqD,KAAK,CAACwC,MAAM,GAAG,CAAE,EAAC;UAChCvG,WAAW,EAAEwG;QACf,CAAC,CAAC;MACJ;MAEAN,SAAS,CAACD,IAAI,CAAC;QACb/C,EAAE,EAAG,SAAQgD,SAAS,CAACK,MAAM,GAAG,CAAE,EAAC;QACnC7F,IAAI,EAAG,YAAWsF,GAAI,GAAE;QACxB9E,QAAQ,EAAEmF,eAAe,CAAC,CAAC,CAAC,CAACnF,QAAQ;QACrCoC,YAAY,EAAE+C,eAAe,CAAC,CAAC,CAAC,CAAC/C,YAAY;QAC7CC,UAAU,EAAE8C,eAAe,CAAC,CAAC,CAAC,CAAC9C,UAAU;QACzC/B,MAAM,EAAE6E,eAAe,CAAC,CAAC,CAAC,CAAC7E,MAAM;QACjCgC,YAAY,EAAE6C,eAAe,CAAC,CAAC,CAAC,CAAC7C,YAAY;QAC7CO;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF1D,SAAS,CAAC6F,SAAS,CAAC;IACpB3D,OAAO,CAAC8B,GAAG,CAAC,iBAAiB,EAAE6B,SAAS,CAAC;EAC3C,CAAC;EAED,MAAMQ,aAAa,GAAIC,MAAM,IAAK;IAChC,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;MACvB;IACF;IAEA,MAAMC,eAAe,GAAGzG,MAAM,CAAC0G,SAAS,CAAEhD,KAAK,IAC7CA,KAAK,CAACC,KAAK,CAACgD,IAAI,CAAE/C,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKyD,MAAM,CAACK,MAAM,CAACC,WAAW,CAClE,CAAC;IACD,MAAMC,oBAAoB,GAAG9G,MAAM,CAAC0G,SAAS,CAAEhD,KAAK,IAClDA,KAAK,CAACC,KAAK,CAACgD,IAAI,CAAE/C,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKyD,MAAM,CAACC,WAAW,CAACK,WAAW,CACvE,CAAC;IAED,IAAIJ,eAAe,KAAK,CAAC,CAAC,IAAIK,oBAAoB,KAAK,CAAC,CAAC,EAAE;MACzD;IACF;IAEA,MAAMC,WAAW,GAAG/G,MAAM,CAACyG,eAAe,CAAC;IAC3C,MAAMO,gBAAgB,GAAGhH,MAAM,CAAC8G,oBAAoB,CAAC;IAErD,MAAMG,UAAU,GAAGF,WAAW,CAACpD,KAAK,CAACuD,IAAI,CACtCtD,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKyD,MAAM,CAACK,MAAM,CAACC,WACtC,CAAC;IACD,MAAMM,eAAe,GAAGH,gBAAgB,CAACrD,KAAK,CAACuD,IAAI,CAChDtD,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKyD,MAAM,CAACC,WAAW,CAACK,WAC3C,CAAC;IAED,MAAM,CAACO,SAAS,CAAC,GAAGH,UAAU,CAACrH,WAAW,CAACyH,MAAM,CAACd,MAAM,CAACK,MAAM,CAACU,KAAK,EAAE,CAAC,CAAC;IACzEH,eAAe,CAACvH,WAAW,CAACyH,MAAM,CAACd,MAAM,CAACC,WAAW,CAACc,KAAK,EAAE,CAAC,EAAEF,SAAS,CAAC;IAE1E,MAAMG,aAAa,GAAGvH,MAAM,CAACyD,GAAG,CAAEC,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACZ,EAAE,KAAKiE,WAAW,CAACjE,EAAE,EAAE;QAC/B,OAAOiE,WAAW;MACpB;MACA,IAAIrD,KAAK,CAACZ,EAAE,KAAKkE,gBAAgB,CAAClE,EAAE,EAAE;QACpC,OAAOkE,gBAAgB;MACzB;MACA,OAAOtD,KAAK;IACd,CAAC,CAAC;IAEFzD,SAAS,CAACsH,aAAa,CAAC;EAC1B,CAAC;EAED,oBACErI,OAAA;IAAKsI,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BvI,OAAA;MAAAuI,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB3I,OAAA;MAAM4I,QAAQ,EAAEvF,iBAAkB;MAACiF,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACjDvI,OAAA;QAAKsI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBvI,OAAA;UAAAuI,QAAA,EAAO;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1B3I,OAAA;UACE6I,IAAI,EAAC,MAAM;UACXP,SAAS,EAAC,cAAc;UACxBQ,KAAK,EAAE1H,IAAK;UACZ2H,QAAQ,EAAGzF,CAAC,IAAKjC,OAAO,CAACiC,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;UACzCG,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3I,OAAA;QAAKsI,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BvI,OAAA;UAAAuI,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpB3I,OAAA;UACE6I,IAAI,EAAC,MAAM;UACXP,SAAS,EAAC,cAAc;UACxBQ,KAAK,EAAExH,IAAK;UACZyH,QAAQ,EAAGzF,CAAC,IAAK/B,OAAO,CAAC+B,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;UACzCG,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3I,OAAA;QAAKsI,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BvI,OAAA;UAAAuI,QAAA,EAAO;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACxB3I,OAAA;UACE6I,IAAI,EAAC,MAAM;UACXP,SAAS,EAAC,cAAc;UACxBQ,KAAK,EAAEtH,QAAS;UAChBuH,QAAQ,EAAGzF,CAAC,IAAK7B,WAAW,CAAC6B,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;UAC7CG,QAAQ;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3I,OAAA;QAAQ6I,IAAI,EAAC,QAAQ;QAACP,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEP3I,OAAA;MAAAuI,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBnI,MAAM,CAACyG,MAAM,KAAK,CAAC,gBAClBjH,OAAA;MAAAuI,QAAA,EAAG;IAA4C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEnD3I,OAAA;MAAIsI,SAAS,EAAC,YAAY;MAAAC,QAAA,EACvB/H,MAAM,CAAC+D,GAAG,CAAE2E,KAAK,iBAChBlJ,OAAA;QAEEsI,SAAS,EAAG,qEACVpH,OAAO,KAAKgI,KAAK,CAACtF,EAAE,GAAG,QAAQ,GAAG,EACnC,EAAE;QACHuF,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAU,CAAE;QAC7BC,OAAO,EAAEA,CAAA,KAAM;UACbnG,gBAAgB,CAACgG,KAAK,CAACtF,EAAE,EAAEsF,KAAK,CAAC9H,IAAI,CAAC;UACtCgC,WAAW,CAAC8F,KAAK,CAACtF,EAAE,CAAC;QACvB,CAAE;QAAA2E,QAAA,GAEDW,KAAK,CAAC9H,IAAI,eACXpB,OAAA;UACEsI,SAAS,EAAC,gBAAgB;UAC1Be,OAAO,EAAEA,CAAA,KAAM1F,iBAAiB,CAACuF,KAAK,CAACtF,EAAE,CAAE;UAAA2E,QAAA,EAC5C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAhBJO,KAAK,CAACtF,EAAE;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBX,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL,EAEAzH,OAAO,gBACNlB,OAAA,CAAAE,SAAA;MAAAqI,QAAA,gBACEvI,OAAA;QAAAuI,QAAA,GAAI,yBAAuB,EAAC7F,iBAAiB;MAAA;QAAA8F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnD3I,OAAA;QAAM4I,QAAQ,EAAE9E,mBAAoB;QAACwE,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnDvI,OAAA;UAAKsI,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzBvI,OAAA;YAAAuI,QAAA,EAAO;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/B3I,OAAA;YACE6I,IAAI,EAAC,MAAM;YACXP,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAEpH,cAAe;YACtBqH,QAAQ,EAAGzF,CAAC,IAAK3B,iBAAiB,CAAC2B,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YACnDG,QAAQ;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACN3I,OAAA;UAAKsI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvI,OAAA;YAAAuI,QAAA,EAAO;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACxB3I,OAAA;YACEsI,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAElH,QAAS;YAChBmH,QAAQ,EAAGzF,CAAC,IAAKzB,WAAW,CAACyB,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAC7CG,QAAQ;YAAAV,QAAA,gBAERvI,OAAA;cAAQ8I,KAAK,EAAC,EAAE;cAAAP,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACxCxI,UAAU,CAACoE,GAAG,CAAE+E,GAAG,iBAClBtJ,OAAA;cAAkB8I,KAAK,EAAEQ,GAAI;cAAAf,QAAA,EAC1Be;YAAG,GADOA,GAAG;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAER,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN3I,OAAA;UAAKsI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvI,OAAA;YAAAuI,QAAA,EAAO;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5B3I,OAAA;YACEsI,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAEhH,WAAY;YACnBiH,QAAQ,EAAGzF,CAAC,IAAKvB,cAAc,CAACuB,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAChDG,QAAQ;YAAAV,QAAA,gBAERvI,OAAA;cAAQ8I,KAAK,EAAC,EAAE;cAAAP,QAAA,EAAC;YAAmB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC5CvI,aAAa,CAACmE,GAAG,CAAEgF,MAAM,iBACxBvJ,OAAA;cAAqB8I,KAAK,EAAES,MAAO;cAAAhB,QAAA,EAChCgB;YAAM,GADIA,MAAM;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEX,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN3I,OAAA;UAAKsI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvI,OAAA;YAAAuI,QAAA,EAAO;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1B3I,OAAA;YACEsI,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAE9G,SAAU;YACjB+G,QAAQ,EAAGzF,CAAC,IAAKrB,YAAY,CAACqB,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAC9CG,QAAQ;YAAAV,QAAA,gBAERvI,OAAA;cAAQ8I,KAAK,EAAC,EAAE;cAAAP,QAAA,EAAC;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC1CxI,UAAU,CAACoE,GAAG,CAAEsE,IAAI,iBACnB7I,OAAA;cAAmB8I,KAAK,EAAED,IAAK;cAAAN,QAAA,EAC5BM;YAAI,GADMA,IAAI;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAET,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN3I,OAAA;UAAKsI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvI,OAAA;YAAAuI,QAAA,EAAO;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtB3I,OAAA;YACEsI,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAE5G,MAAO;YACd6G,QAAQ,EAAGzF,CAAC,IAAKnB,SAAS,CAACmB,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAC3CG,QAAQ;YAAAV,QAAA,gBAERvI,OAAA;cAAQ8I,KAAK,EAAC,EAAE;cAAAP,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACtCvI,aAAa,CAACmE,GAAG,CAAEiF,CAAC,iBACnBxJ,OAAA;cAAgB8I,KAAK,EAAEU,CAAE;cAAAjB,QAAA,EACtBiB;YAAC,GADSA,CAAC;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEN,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN3I,OAAA;UAAKsI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BvI,OAAA;YAAAuI,QAAA,EAAO;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5B3I,OAAA;YACEsI,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAE1G,WAAY;YACnB2G,QAAQ,EAAGzF,CAAC,IAAKjB,cAAc,CAACiB,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAChDG,QAAQ;YAAAV,QAAA,gBAERvI,OAAA;cAAQ8I,KAAK,EAAC,EAAE;cAAAP,QAAA,EAAC;YAAmB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC5CtI,aAAa,CAACkE,GAAG,CAAE+E,GAAG,iBACrBtJ,OAAA;cAAkB8I,KAAK,EAAEQ,GAAI;cAAAf,QAAA,EAC1Be;YAAG,GADOA,GAAG;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAER,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACN3I,OAAA;UAAQ6I,IAAI,EAAC,QAAQ;UAACP,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAAC;QAEvD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAEP3I,OAAA;QAAAuI,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7B3I,OAAA;QAAIsI,SAAS,EAAC,YAAY;QAAAC,QAAA,EACvB7H,WAAW,CAAC6D,GAAG,CAAEK,UAAU,iBAC1B5E,OAAA;UAEEsI,SAAS,EAAC,mEAAmE;UAAAC,QAAA,GAE5E3D,UAAU,CAACxD,IAAI,EAAC,WAAS,EAACsB,iBAAiB,EAAC,aAAW,EAAC,GAAG,EAC3DkC,UAAU,CAAChD,QAAQ,EAAC,kBAAgB,EAACgD,UAAU,CAACZ,YAAY,EAAC,gBAClD,EAACY,UAAU,CAACX,UAAU,EAAC,YAAU,EAACW,UAAU,CAAC1C,MAAM,EAAC,kBAChD,EAAC0C,UAAU,CAACV,YAAY,EAAC,GACzC,eAAAlE,OAAA;YACEsI,SAAS,EAAC,gBAAgB;YAC1Be,OAAO,EAAEA,CAAA,KAAMlF,sBAAsB,CAACS,UAAU,CAAChB,EAAE,CAAE;YAAA2E,QAAA,EACtD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAZJ/D,UAAU,CAAChB,EAAE;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAahB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEL3I,OAAA;QAAAuI,QAAA,GAAI,oBAAkB,EAAC7F,iBAAiB;MAAA;QAAA8F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9C3I,OAAA;QAAM4I,QAAQ,EAAExE,cAAe;QAACkE,SAAS,EAAC,MAAM;QAAAC,QAAA,gBAC9CvI,OAAA;UAAKsI,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzBvI,OAAA;YAAAuI,QAAA,EAAO;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1B3I,OAAA;YACE6I,IAAI,EAAC,MAAM;YACXP,SAAS,EAAC,cAAc;YACxBQ,KAAK,EAAExG,SAAU;YACjByG,QAAQ,EAAGzF,CAAC,IAAKf,YAAY,CAACe,CAAC,CAAC0F,MAAM,CAACF,KAAK,CAAE;YAC9CG,QAAQ;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACN3I,OAAA;UAAQ6I,IAAI,EAAC,QAAQ;UAACP,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAAC;QAEvD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAEP3I,OAAA;QAAAuI,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB3I,OAAA;QAAIsI,SAAS,EAAC,YAAY;QAAAC,QAAA,EACvB3H,MAAM,CAAC2D,GAAG,CAAEkF,KAAK,iBAChBzJ,OAAA;UAEEsI,SAAS,EAAC,mEAAmE;UAAAC,QAAA,GAE5EkB,KAAK,CAACrI,IAAI,EAAC,WAAS,EAACsB,iBAAiB,EAAC,GACxC,eAAA1C,OAAA;YACEsI,SAAS,EAAC,gBAAgB;YAC1Be,OAAO,EAAEA,CAAA,KAAMhF,iBAAiB,CAACoF,KAAK,CAAC7F,EAAE,CAAE;YAAA2E,QAAA,EAC5C;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GATJc,KAAK,CAAC7F,EAAE;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUX,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEL3I,OAAA;QAAAuI,QAAA,EAAI;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACf3I,OAAA;QAAQsI,SAAS,EAAC,sBAAsB;QAACe,OAAO,EAAE9C,kBAAmB;QAAAgC,QAAA,EAAC;MAEtE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3I,OAAA;QAAQsI,SAAS,EAAC,sBAAsB;QAACe,OAAO,EAAE/E,gBAAiB;QAAAiE,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3I,OAAA;QAAQsI,SAAS,EAAC,mBAAmB;QAACe,OAAO,EAAExE,iBAAkB;QAAA0D,QAAA,EAAC;MAElE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT3I,OAAA;QAAQsI,SAAS,EAAC,wBAAwB;QAACe,OAAO,EAAE7D,iBAAkB;QAAA+C,QAAA,EAAC;MAEvE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAET3I,OAAA,CAACJ,eAAe;QAAC8J,SAAS,EAAEtC,aAAc;QAAAmB,QAAA,EACvCzH,MAAM,CAACyD,GAAG,CAAEC,KAAK,iBAChBxE,OAAA,CAACH,SAAS;UAAC8H,WAAW,EAAEnD,KAAK,CAACZ,EAAE,CAAC+F,QAAQ,CAAC,CAAE;UAAApB,QAAA,EACxCqB,QAAQ,iBACR5J,OAAA;YACE6J,GAAG,EAAED,QAAQ,CAACE,QAAS;YAAA,GACnBF,QAAQ,CAACG,cAAc;YAC3BzB,SAAS,EAAC,MAAM;YAAAC,QAAA,gBAEhBvI,OAAA;cAAAuI,QAAA,EAAK/D,KAAK,CAACpD;YAAI;cAAAoH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,EACpBnE,KAAK,CAACC,KAAK,CAACF,GAAG,CAAC,CAACG,IAAI,EAAE0D,KAAK,kBAC3BpI,OAAA,CAACH,SAAS;cAAC8H,WAAW,EAAG,QAAOjD,IAAI,CAACd,EAAG,EAAE;cAAA2E,QAAA,EACtCqB,QAAQ,iBACR5J,OAAA;gBACE6J,GAAG,EAAED,QAAQ,CAACE,QAAS;gBAAA,GACnBF,QAAQ,CAACG,cAAc;gBAC3BzB,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,gBAE3BvI,OAAA;kBAAAuI,QAAA,GAAI,OAAK,EAACH,KAAK,GAAG,CAAC;gBAAA;kBAAAI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,EACxBjE,IAAI,CAAChE,WAAW,CAAC6D,GAAG,CAAC,CAACK,UAAU,EAAEoF,GAAG,kBACpChK,OAAA,CAACF,SAAS;kBAERmK,WAAW,EAAErF,UAAU,CAAChB,EAAE,CAAC+F,QAAQ,CAAC,CAAE;kBACtCvB,KAAK,EAAE4B,GAAI;kBAAAzB,QAAA,EAETqB,QAAQ,iBACR5J,OAAA;oBACE6J,GAAG,EAAED,QAAQ,CAACE,QAAS;oBAAA,GACnBF,QAAQ,CAACM,cAAc;oBAAA,GACvBN,QAAQ,CAACO,eAAe;oBAC5B7B,SAAS,EAAC,iBAAiB;oBAAAC,QAAA,EAE1B3D,UAAU,CAACxD;kBAAI;oBAAAoH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACb;gBACN,GAbI/D,UAAU,CAAChB,EAAE;kBAAA4E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAcT,CACZ,CAAC,EACDiB,QAAQ,CAACQ,WAAW;cAAA;gBAAA5B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClB;YACN,GA5B6CjE,IAAI,CAACd,EAAE;cAAA4E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA6B5C,CACZ,CAAC,EACDiB,QAAQ,CAACQ,WAAW;UAAA;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB;QACN,GA1C+CnE,KAAK,CAACZ,EAAE;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA2C/C,CACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACa,CAAC,EAEjB3H,UAAU,iBACThB,OAAA,CAAAE,SAAA;QAAAqI,QAAA,gBACEvI,OAAA;UAAAuI,QAAA,GAAI,aAAW,EAAC7F,iBAAiB;QAAA;UAAA8F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACtC7H,MAAM,CAACyD,GAAG,CAAC,CAACC,KAAK,EAAE6F,UAAU,kBAC5BrK,OAAA;UAAsBsI,SAAS,EAAC,MAAM;UAAAC,QAAA,gBACpCvI,OAAA;YAAAuI,QAAA,GAAI,QACI,EAAC8B,UAAU,GAAG,CAAC,EAAC,IAAE,EAAC7F,KAAK,CAAC5C,QAAQ,EAAC,IAAE,EAAC4C,KAAK,CAACR,YAAY,EAAC,IAAE,EAACQ,KAAK,CAACP,UAAU,EAAC,IAAE,EAACO,KAAK,CAACtC,MAAM,EAAC,IAAE,EAACsC,KAAK,CAACN,YAAY,EAAC,GAC1H;UAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACJnE,KAAK,CAACC,KAAK,CAACF,GAAG,CAAC,CAACG,IAAI,EAAE4F,SAAS,kBAC/BtK,OAAA;YAAqBsI,SAAS,EAAC,MAAM;YAAAC,QAAA,gBACnCvI,OAAA;cAAAuI,QAAA,GAAI,OAAK,EAAC+B,SAAS,GAAG,CAAC;YAAA;cAAA9B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC7B3I,OAAA;cAAIsI,SAAS,EAAC,YAAY;cAAAC,QAAA,EACvB7D,IAAI,CAAChE,WAAW,CAAC6D,GAAG,CAAC,CAACK,UAAU,EAAE2F,eAAe,kBAChDvK,OAAA;gBAA0BsI,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAClD3D,UAAU,CAACxD;cAAI,GADTmJ,eAAe;gBAAA/B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEpB,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC;UAAA,GARG2B,SAAS;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASd,CACN,CAAC;QAAA,GAfM0B,UAAU;UAAA7B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBf,CACN,CAAC;MAAA,eACF,CACH;IAAA,eACD,CAAC,gBAEH3I,OAAA;MAAGsI,SAAS,EAAC,MAAM;MAAAC,QAAA,EAAC;IAEpB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpI,EAAA,CAvtBID,eAAe;AAAAkK,EAAA,GAAflK,eAAe;AAytBrB,eAAeA,eAAe;AAAC,IAAAkK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}