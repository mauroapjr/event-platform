{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Container, Row, Col, Card, Button } from \"react-bootstrap\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import EventsList from \"./EventList\";\n// import CompetitorsList from \"./CompetitorList\";\n// import AddCompetitorForm from \"./AddCompetitorForm\";\n// import JudgesList from \"./JudgesList\";\n// import AddJudgeForm from \"./AddJudgeForm\";\n// import GeneratePDFButton from \"./GeneratePDFButton\";\n// import RoundsDisplay from \"./RoundsDisplay\";\n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n//   const [showRounds, setShowRounds] = useState(false);\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/event-admin/get-events\"\n//       );\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n//       );\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\n//       );\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-event/${id}`\n//       );\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\n//       );\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\n//       );\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       const roundsPayload = rounds.map((round) => ({\n//         name: round.name,\n//         category: round.category,\n//         sub_category: round.sub_category,\n//         board_type: round.board_type,\n//         gender: round.gender,\n//         age_category: round.age_category,\n//         heats: round.heats.map((heat) => ({\n//           id: heat.id,\n//           heat_name: heat.name,\n//           competitors: heat.competitors.map((competitor) => ({\n//             id: competitor.id,\n//             name: competitor.name,\n//           })),\n//         })),\n//       }));\n\n//       console.log(\"Rounds payload:\", roundsPayload);\n\n//       const response = await axios.post(\n//         \"http://localhost:3000/event-admin/save-rounds\",\n//         {\n//           eventId,\n//           rounds: roundsPayload,\n//         }\n//       );\n\n//       alert(\"Rounds saved successfully\");\n//       fetchRoundsAfterSave();\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const fetchRoundsAfterSave = async () => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\n//       );\n//       const roundsData = response.data;\n//       console.log(\"Fetched rounds data after save:\", roundsData);\n\n//       const processedRounds = roundsData.map((round) => {\n//         const processedHeats = (round.heats || []).map((heat) => {\n//           const processedCompetitors = (heat.competitors || []).map((competitor) => ({\n//             id: competitor.id,\n//             name: competitor.name,\n//           }));\n//           return {\n//             id: heat.id,\n//             name: heat.heat_name,\n//             competitors: processedCompetitors,\n//           };\n//         });\n//         console.log(\"Processed heats for round:\", processedHeats);\n//         return {\n//           id: round.id,\n//           name: round.round_name,\n//           category: round.category,\n//           sub_category: round.sub_category,\n//           board_type: round.board_type,\n//           gender: round.gender,\n//           age_category: round.age_category,\n//           heats: processedHeats,\n//         };\n//       });\n\n//       console.log(\"Processed rounds after save:\", processedRounds);\n//       setRounds(processedRounds);\n//     } catch (error) {\n//       console.error(\"Error fetching rounds after save:\", error);\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     if (!eventId) {\n//       alert(\"Please select an event first.\");\n//       return;\n//     }\n\n//     const competitorsByCategory = {};\n\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     const newRounds = [];\n\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       const heats = [];\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         heats.push({\n//           id: `heat-${heats.length + 1}`,\n//           name: `Heat ${heats.length + 1}`,\n//           competitors: heatCompetitors,\n//         });\n//       }\n\n//       newRounds.push({\n//         id: `round-${newRounds.length + 1}`,\n//         name: `Round 1 (${key})`,\n//         category: competitorsList[0].category,\n//         sub_category: competitorsList[0].sub_category,\n//         board_type: competitorsList[0].board_type,\n//         gender: competitorsList[0].gender,\n//         age_category: competitorsList[0].age_category,\n//         heats,\n//       });\n//     });\n\n//     setRounds(newRounds);\n//     console.log(\"Created rounds:\", newRounds);\n//   };\n\n//   const onDragEnd = (result) => {\n//     const { source, destination } = result;\n\n//     if (!destination) {\n//       return;\n//     }\n\n//     const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\n//     const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\n//     const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\n//     const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\n\n//     const sourceRound = rounds[sourceRoundIndex];\n//     const destRound = rounds[destRoundIndex];\n//     const sourceHeat = sourceRound.heats[sourceHeatIndex];\n//     const destHeat = destRound.heats[destHeatIndex];\n\n//     const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\n//     destHeat.competitors.splice(destination.index, 0, movedCompetitor);\n\n//     const newRounds = [...rounds];\n//     newRounds[sourceRoundIndex] = {\n//       ...sourceRound,\n//       heats: [...sourceRound.heats],\n//     };\n//     newRounds[destRoundIndex] = { ...destRound, heats: [...destRound.heats] };\n\n//     setRounds(newRounds);\n//   };\n\n//   return (\n//     <Container className=\"mt-5\">\n//       <h2>Manage Events</h2>\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//         <div className=\"form-group\">\n//           <label>Event Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Date:</label>\n//           <input\n//             type=\"date\"\n//             className=\"form-control\"\n//             value={date}\n//             onChange={(e) => setDate(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Location:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={location}\n//             onChange={(e) => setLocation(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//           Create Event\n//         </button>\n//       </form>\n\n//       <EventsList\n//         events={events}\n//         fetchCompetitors={(id, name) => {\n//           setCompetitors([]);\n//           fetchCompetitors(id, name);\n//         }}\n//         fetchJudges={fetchJudges}\n//         handleDeleteEvent={handleDeleteEvent}\n//       />\n\n//       {eventId ? (\n//         <>\n//           <h3>Manage Competitors for {selectedEventName}</h3>\n//           <AddCompetitorForm\n//             eventId={eventId}\n//             fetchCompetitors={fetchCompetitors}\n//             selectedEventName={selectedEventName}\n//             heats={rounds.flatMap((round) => round.heats)}\n//           />\n\n//           <CompetitorsList\n//             competitors={competitors}\n//             selectedEventName={selectedEventName}\n//             handleDeleteCompetitor={handleDeleteCompetitor}\n//           />\n\n//           <h3>Manage Judges for {selectedEventName}</h3>\n//           <AddJudgeForm eventId={eventId} fetchJudges={fetchJudges} />\n\n//           <JudgesList\n//             judges={judges}\n//             selectedEventName={selectedEventName}\n//             handleDeleteJudge={handleDeleteJudge}\n//           />\n\n//           <h3>Rounds</h3>\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//             Create Round and Heat\n//           </button>\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//             Save Rounds\n//           </button>\n//           <GeneratePDFButton eventId={eventId} rounds={rounds} />\n\n//           <Button\n//             className=\"btn btn-info mt-3\"\n//             onClick={() => setShowRounds(!showRounds)}\n//           >\n//             {showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"}\n//           </Button>\n\n//           {showRounds && <RoundsDisplay eventId={eventId} />}\n\n//           <DragDropContext onDragEnd={onDragEnd}>\n//             {rounds.map((round, roundIndex) => (\n//               <div key={roundIndex}>\n//                 <h4 className=\"mt-4 mb-3\">{round.name}</h4>\n//                 <Row>\n//                   {round.heats.map((heat, heatIndex) => (\n//                     <Col key={heatIndex} sm={12} md={6} lg={4} className=\"mb-4\">\n//                       <Droppable\n//                         droppableId={`round-${roundIndex}-heat-${heatIndex}`}\n//                       >\n//                         {(provided) => (\n//                           <Card\n//                             ref={provided.innerRef}\n//                             {...provided.droppableProps}\n//                           >\n//                             <Card.Body>\n//                               <Card.Title>Heat {heatIndex + 1}</Card.Title>\n//                               <ul>\n//                                 {heat.competitors.map((competitor, idx) => (\n//                                   <Draggable\n//                                     key={competitor.id}\n//                                     draggableId={`competitor-${competitor.id}`}\n//                                     index={idx}\n//                                   >\n//                                     {(provided) => (\n//                                       <li\n//                                         ref={provided.innerRef}\n//                                         {...provided.draggableProps}\n//                                         {...provided.dragHandleProps}\n//                                       >\n//                                         {competitor.name}\n//                                       </li>\n//                                     )}\n//                                   </Draggable>\n//                                 ))}\n//                                 {provided.placeholder}\n//                               </ul>\n//                             </Card.Body>\n//                           </Card>\n//                         )}\n//                       </Droppable>\n//                     </Col>\n//                   ))}\n//                 </Row>\n//               </div>\n//             ))}\n//           </DragDropContext>\n//         </>\n//       ) : (\n//         <p className=\"mt-4\">\n//           Please select an event to manage competitors and judges.\n//         </p>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default EventManagement;","map":{"version":3,"names":[],"sources":["C:/Users/user/Desktop/React_Projects/event-platform/client/src/components/EventManagement.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// import EventsList from \"./EventList\";\r\n// import CompetitorsList from \"./CompetitorList\";\r\n// import AddCompetitorForm from \"./AddCompetitorForm\";\r\n// import JudgesList from \"./JudgesList\";\r\n// import AddJudgeForm from \"./AddJudgeForm\";\r\n// import GeneratePDFButton from \"./GeneratePDFButton\";\r\n// import RoundsDisplay from \"./RoundsDisplay\";\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n//   const [showRounds, setShowRounds] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"http://localhost:3000/event-admin/get-events\"\r\n//       );\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n//       );\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n//       );\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-event/${id}`\r\n//       );\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n//       );\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n//       );\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       const roundsPayload = rounds.map((round) => ({\r\n//         name: round.name,\r\n//         category: round.category,\r\n//         sub_category: round.sub_category,\r\n//         board_type: round.board_type,\r\n//         gender: round.gender,\r\n//         age_category: round.age_category,\r\n//         heats: round.heats.map((heat) => ({\r\n//           id: heat.id,\r\n//           heat_name: heat.name,\r\n//           competitors: heat.competitors.map((competitor) => ({\r\n//             id: competitor.id,\r\n//             name: competitor.name,\r\n//           })),\r\n//         })),\r\n//       }));\r\n\r\n//       console.log(\"Rounds payload:\", roundsPayload);\r\n\r\n//       const response = await axios.post(\r\n//         \"http://localhost:3000/event-admin/save-rounds\",\r\n//         {\r\n//           eventId,\r\n//           rounds: roundsPayload,\r\n//         }\r\n//       );\r\n\r\n//       alert(\"Rounds saved successfully\");\r\n//       fetchRoundsAfterSave();\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const fetchRoundsAfterSave = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-rounds/${eventId}`\r\n//       );\r\n//       const roundsData = response.data;\r\n//       console.log(\"Fetched rounds data after save:\", roundsData);\r\n  \r\n//       const processedRounds = roundsData.map((round) => {\r\n//         const processedHeats = (round.heats || []).map((heat) => {\r\n//           const processedCompetitors = (heat.competitors || []).map((competitor) => ({\r\n//             id: competitor.id,\r\n//             name: competitor.name,\r\n//           }));\r\n//           return {\r\n//             id: heat.id,\r\n//             name: heat.heat_name,\r\n//             competitors: processedCompetitors,\r\n//           };\r\n//         });\r\n//         console.log(\"Processed heats for round:\", processedHeats);\r\n//         return {\r\n//           id: round.id,\r\n//           name: round.round_name,\r\n//           category: round.category,\r\n//           sub_category: round.sub_category,\r\n//           board_type: round.board_type,\r\n//           gender: round.gender,\r\n//           age_category: round.age_category,\r\n//           heats: processedHeats,\r\n//         };\r\n//       });\r\n  \r\n//       console.log(\"Processed rounds after save:\", processedRounds);\r\n//       setRounds(processedRounds);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rounds after save:\", error);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleCreateRounds = () => {\r\n//     if (!eventId) {\r\n//       alert(\"Please select an event first.\");\r\n//       return;\r\n//     }\r\n\r\n//     const competitorsByCategory = {};\r\n\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n\r\n//     const newRounds = [];\r\n\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       const heats = [];\r\n\r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n//         heats.push({\r\n//           id: `heat-${heats.length + 1}`,\r\n//           name: `Heat ${heats.length + 1}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n//       }\r\n\r\n//       newRounds.push({\r\n//         id: `round-${newRounds.length + 1}`,\r\n//         name: `Round 1 (${key})`,\r\n//         category: competitorsList[0].category,\r\n//         sub_category: competitorsList[0].sub_category,\r\n//         board_type: competitorsList[0].board_type,\r\n//         gender: competitorsList[0].gender,\r\n//         age_category: competitorsList[0].age_category,\r\n//         heats,\r\n//       });\r\n//     });\r\n\r\n//     setRounds(newRounds);\r\n//     console.log(\"Created rounds:\", newRounds);\r\n//   };\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { source, destination } = result;\r\n\r\n//     if (!destination) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\r\n//     const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\r\n//     const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\r\n//     const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\r\n\r\n//     const sourceRound = rounds[sourceRoundIndex];\r\n//     const destRound = rounds[destRoundIndex];\r\n//     const sourceHeat = sourceRound.heats[sourceHeatIndex];\r\n//     const destHeat = destRound.heats[destHeatIndex];\r\n\r\n//     const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\r\n//     destHeat.competitors.splice(destination.index, 0, movedCompetitor);\r\n\r\n//     const newRounds = [...rounds];\r\n//     newRounds[sourceRoundIndex] = {\r\n//       ...sourceRound,\r\n//       heats: [...sourceRound.heats],\r\n//     };\r\n//     newRounds[destRoundIndex] = { ...destRound, heats: [...destRound.heats] };\r\n\r\n//     setRounds(newRounds);\r\n//   };\r\n\r\n//   return (\r\n//     <Container className=\"mt-5\">\r\n//       <h2>Manage Events</h2>\r\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//         <div className=\"form-group\">\r\n//           <label>Event Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={name}\r\n//             onChange={(e) => setName(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             className=\"form-control\"\r\n//             value={date}\r\n//             onChange={(e) => setDate(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Location:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={location}\r\n//             onChange={(e) => setLocation(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//           Create Event\r\n//         </button>\r\n//       </form>\r\n\r\n//       <EventsList\r\n//         events={events}\r\n//         fetchCompetitors={(id, name) => {\r\n//           setCompetitors([]);\r\n//           fetchCompetitors(id, name);\r\n//         }}\r\n//         fetchJudges={fetchJudges}\r\n//         handleDeleteEvent={handleDeleteEvent}\r\n//       />\r\n\r\n//       {eventId ? (\r\n//         <>\r\n//           <h3>Manage Competitors for {selectedEventName}</h3>\r\n//           <AddCompetitorForm\r\n//             eventId={eventId}\r\n//             fetchCompetitors={fetchCompetitors}\r\n//             selectedEventName={selectedEventName}\r\n//             heats={rounds.flatMap((round) => round.heats)}\r\n//           />\r\n\r\n//           <CompetitorsList\r\n//             competitors={competitors}\r\n//             selectedEventName={selectedEventName}\r\n//             handleDeleteCompetitor={handleDeleteCompetitor}\r\n//           />\r\n\r\n//           <h3>Manage Judges for {selectedEventName}</h3>\r\n//           <AddJudgeForm eventId={eventId} fetchJudges={fetchJudges} />\r\n\r\n//           <JudgesList\r\n//             judges={judges}\r\n//             selectedEventName={selectedEventName}\r\n//             handleDeleteJudge={handleDeleteJudge}\r\n//           />\r\n\r\n//           <h3>Rounds</h3>\r\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//             Create Round and Heat\r\n//           </button>\r\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//             Save Rounds\r\n//           </button>\r\n//           <GeneratePDFButton eventId={eventId} rounds={rounds} />\r\n\r\n//           <Button\r\n//             className=\"btn btn-info mt-3\"\r\n//             onClick={() => setShowRounds(!showRounds)}\r\n//           >\r\n//             {showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"}\r\n//           </Button>\r\n\r\n//           {showRounds && <RoundsDisplay eventId={eventId} />}\r\n\r\n//           <DragDropContext onDragEnd={onDragEnd}>\r\n//             {rounds.map((round, roundIndex) => (\r\n//               <div key={roundIndex}>\r\n//                 <h4 className=\"mt-4 mb-3\">{round.name}</h4>\r\n//                 <Row>\r\n//                   {round.heats.map((heat, heatIndex) => (\r\n//                     <Col key={heatIndex} sm={12} md={6} lg={4} className=\"mb-4\">\r\n//                       <Droppable\r\n//                         droppableId={`round-${roundIndex}-heat-${heatIndex}`}\r\n//                       >\r\n//                         {(provided) => (\r\n//                           <Card\r\n//                             ref={provided.innerRef}\r\n//                             {...provided.droppableProps}\r\n//                           >\r\n//                             <Card.Body>\r\n//                               <Card.Title>Heat {heatIndex + 1}</Card.Title>\r\n//                               <ul>\r\n//                                 {heat.competitors.map((competitor, idx) => (\r\n//                                   <Draggable\r\n//                                     key={competitor.id}\r\n//                                     draggableId={`competitor-${competitor.id}`}\r\n//                                     index={idx}\r\n//                                   >\r\n//                                     {(provided) => (\r\n//                                       <li\r\n//                                         ref={provided.innerRef}\r\n//                                         {...provided.draggableProps}\r\n//                                         {...provided.dragHandleProps}\r\n//                                       >\r\n//                                         {competitor.name}\r\n//                                       </li>\r\n//                                     )}\r\n//                                   </Draggable>\r\n//                                 ))}\r\n//                                 {provided.placeholder}\r\n//                               </ul>\r\n//                             </Card.Body>\r\n//                           </Card>\r\n//                         )}\r\n//                       </Droppable>\r\n//                     </Col>\r\n//                   ))}\r\n//                 </Row>\r\n//               </div>\r\n//             ))}\r\n//           </DragDropContext>\r\n//         </>\r\n//       ) : (\r\n//         <p className=\"mt-4\">\r\n//           Please select an event to manage competitors and judges.\r\n//         </p>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}