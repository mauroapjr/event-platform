{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\React_Projects\\\\event-platform\\\\client\\\\src\\\\components\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Container, Row, Col, Card, Button } from \"react-bootstrap\";\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import EventsList from \"./EventList\";\n// import CompetitorsList from \"./CompetitorList\";\n// import AddCompetitorForm from \"./AddCompetitorForm\";\n// import JudgesList from \"./JudgesList\";\n// import AddJudgeForm from \"./AddJudgeForm\";\n// import GeneratePDFButton from \"./GeneratePDFButton\";\n// import RoundsDisplay from \"./RoundsDisplay\";\n\n// const categories = [\"Shortboard\", \"Longboard\"];\n// const subCategories = [\"Men\", \"Women\"];\n// const ageCategories = [\n//   \"Open\",\n//   \"Sub12\",\n//   \"Sub14\",\n//   \"Sub18\",\n//   \"Professional\",\n//   \"+40\",\n//   \"+45\",\n//   \"+50\",\n//   \"+60\",\n//   \"+65\",\n//   \"+70\",\n// ];\n\n// const EventManagement = () => {\n//   const [events, setEvents] = useState([]);\n//   const [competitors, setCompetitors] = useState([]);\n//   const [judges, setJudges] = useState([]);\n//   const [rounds, setRounds] = useState([]);\n//   const [eventId, setEventId] = useState(null);\n//   const [name, setName] = useState(\"\");\n//   const [date, setDate] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\n//   const [showRounds, setShowRounds] = useState(false);\n\n//   useEffect(() => {\n//     fetchEvents();\n//   }, []);\n\n//   const fetchEvents = async () => {\n//     try {\n//       const response = await axios.get(\n//         \"http://localhost:3000/event-admin/get-events\"\n//       );\n//       setEvents(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching events:\", error);\n//     }\n//   };\n\n//   const fetchCompetitors = async (eventId, eventName) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\n//       );\n//       setCompetitors(response.data);\n//       setEventId(eventId);\n//       setSelectedEventName(eventName);\n//     } catch (error) {\n//       console.error(\"Error fetching competitors:\", error);\n//     }\n//   };\n\n//   const fetchJudges = async (eventId) => {\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\n//       );\n//       setJudges(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching judges:\", error);\n//     }\n//   };\n\n//   const handleCreateEvent = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n//         name,\n//         date,\n//         location,\n//       });\n//       alert(\"Event created successfully\");\n//       setName(\"\");\n//       setDate(\"\");\n//       setLocation(\"\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error creating event:\", error);\n//       alert(\"Error creating event\");\n//     }\n//   };\n\n//   const handleDeleteEvent = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-event/${id}`\n//       );\n//       alert(\"Event deleted successfully\");\n//       fetchEvents();\n//     } catch (error) {\n//       console.error(\"Error deleting event:\", error);\n//       alert(\"Error deleting event\");\n//     }\n//   };\n\n//   const handleDeleteCompetitor = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\n//       );\n//       alert(\"Competitor deleted successfully\");\n//       fetchCompetitors(eventId, selectedEventName);\n//     } catch (error) {\n//       console.error(\"Error deleting competitor:\", error);\n//       alert(\"Error deleting competitor\");\n//     }\n//   };\n\n//   const handleDeleteJudge = async (id) => {\n//     try {\n//       await axios.delete(\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\n//       );\n//       alert(\"Judge deleted successfully\");\n//       fetchJudges(eventId);\n//     } catch (error) {\n//       console.error(\"Error deleting judge:\", error);\n//       alert(\"Error deleting judge\");\n//     }\n//   };\n\n//   const handleSaveRounds = async () => {\n//     try {\n//       const roundsPayload = rounds.map((round) => ({\n//         name: round.name,\n//         category: round.category,\n//         sub_category: round.sub_category,\n//         board_type: round.board_type,\n//         gender: round.gender,\n//         age_category: round.age_category,\n//         heats: round.heats.map((heat) => ({\n//           id: heat.id,\n//           heat_name: heat.name, // Ensure heat_name is correctly set\n//           competitors: heat.competitors.map((competitor) => ({\n//             id: competitor.id,\n//             name: competitor.name,\n//           })),\n//         })),\n//       }));\n\n//       console.log(\"Rounds payload:\", roundsPayload);\n\n//       const response = await axios.post(\n//         \"http://localhost:3000/event-admin/save-rounds\",\n//         {\n//           eventId,\n//           rounds: roundsPayload,\n//         }\n//       );\n\n//       alert(\"Rounds saved successfully\");\n\n//       // Update rounds state with the saved payload\n//       setRounds(roundsPayload);\n//     } catch (error) {\n//       console.error(\"Error saving rounds:\", error);\n//       alert(\"Error saving rounds\");\n//     }\n//   };\n\n//   const handleCreateRounds = () => {\n//     if (!eventId) {\n//       alert(\"Please select an event first.\");\n//       return;\n//     }\n\n//     const competitorsByCategory = {};\n\n//     competitors.forEach((competitor) => {\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n//       if (!competitorsByCategory[key]) {\n//         competitorsByCategory[key] = [];\n//       }\n//       competitorsByCategory[key].push(competitor);\n//     });\n\n//     const newRounds = [];\n\n//     Object.keys(competitorsByCategory).forEach((key) => {\n//       const competitorsList = competitorsByCategory[key];\n//       const heats = [];\n\n//       for (let i = 0; i < competitorsList.length; i += 4) {\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\n\n//         heats.push({\n//           id: `heat-${heats.length + 1}`,\n//           name: `Heat ${heats.length + 1}`,\n//           competitors: heatCompetitors,\n//         });\n//       }\n\n//       newRounds.push({\n//         id: `round-${newRounds.length + 1}`,\n//         name: `Round 1 (${key})`,\n//         category: competitorsList[0].category,\n//         sub_category: competitorsList[0].sub_category,\n//         board_type: competitorsList[0].board_type,\n//         gender: competitorsList[0].gender,\n//         age_category: competitorsList[0].age_category,\n//         heats,\n//       });\n//     });\n\n//     setRounds(newRounds);\n//     console.log(\"Created rounds:\", newRounds);\n//   };\n\n//   const onDragEnd = (result) => {\n//     const { source, destination } = result;\n\n//     if (!destination) {\n//       return;\n//     }\n\n//     const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\n//     const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\n//     const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\n//     const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\n\n//     const sourceRound = rounds[sourceRoundIndex];\n//     const destRound = rounds[destRoundIndex];\n//     const sourceHeat = sourceRound.heats[sourceHeatIndex];\n//     const destHeat = destRound.heats[destHeatIndex];\n\n//     const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\n//     destHeat.competitors.splice(destination.index, 0, movedCompetitor);\n\n//     const newRounds = [...rounds];\n//     newRounds[sourceRoundIndex] = {\n//       ...sourceRound,\n//       heats: [...sourceRound.heats],\n//     };\n//     newRounds[destRoundIndex] = { ...destRound, heats: [...destRound.heats] };\n\n//     setRounds(newRounds);\n\n//     console.log(\"Updated rounds after drag and drop:\", newRounds);\n//   };\n\n//   return (\n//     <Container className=\"mt-5\">\n//       <h2>Manage Events</h2>\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\n//         <div className=\"form-group\">\n//           <label>Event Name:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Date:</label>\n//           <input\n//             type=\"date\"\n//             className=\"form-control\"\n//             value={date}\n//             onChange={(e) => setDate(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group mt-3\">\n//           <label>Location:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={location}\n//             onChange={(e) => setLocation(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\n//           Create Event\n//         </button>\n//       </form>\n\n//       <EventsList\n//         events={events}\n//         fetchCompetitors={(id, name) => {\n//           setCompetitors([]);\n//           fetchCompetitors(id, name);\n//         }}\n//         fetchJudges={fetchJudges}\n//         handleDeleteEvent={handleDeleteEvent}\n//       />\n\n//       {eventId ? (\n//         <>\n//           <h3>Manage Competitors for {selectedEventName}</h3>\n//           <AddCompetitorForm\n//             eventId={eventId}\n//             fetchCompetitors={fetchCompetitors}\n//             selectedEventName={selectedEventName}\n//             heats={rounds.flatMap((round) => round.heats)}\n//           />\n\n//           <CompetitorsList\n//             competitors={competitors}\n//             selectedEventName={selectedEventName}\n//             handleDeleteCompetitor={handleDeleteCompetitor}\n//           />\n\n//           <h3>Manage Judges for {selectedEventName}</h3>\n//           <AddJudgeForm eventId={eventId} fetchJudges={fetchJudges} />\n\n//           <JudgesList\n//             judges={judges}\n//             selectedEventName={selectedEventName}\n//             handleDeleteJudge={handleDeleteJudge}\n//           />\n\n//           <h3>Rounds</h3>\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\n//             Create Round and Heat\n//           </button>\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\n//             Save Rounds\n//           </button>\n//           <GeneratePDFButton eventId={eventId} rounds={rounds} />\n\n//           <Button\n//             className=\"btn btn-info mt-3\"\n//             onClick={() => setShowRounds(!showRounds)}\n//           >\n//             {showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"}\n//           </Button>\n\n//           {showRounds && <RoundsDisplay eventId={eventId} />}\n\n//           <DragDropContext onDragEnd={onDragEnd}>\n//             {rounds.map((round, roundIndex) => (\n//               <div key={roundIndex}>\n//                 <h4 className=\"mt-4 mb-3\">{round.name}</h4>\n//                 <Row>\n//                   {round.heats.map((heat, heatIndex) => (\n//                     <Col key={heatIndex} sm={12} md={6} lg={4} className=\"mb-4\">\n//                       <Droppable\n//                         droppableId={`round-${roundIndex}-heat-${heatIndex}`}\n//                       >\n//                         {(provided) => (\n//                           <Card\n//                             ref={provided.innerRef}\n//                             {...provided.droppableProps}\n//                           >\n//                             <Card.Body>\n//                               <Card.Title>Heat {heatIndex + 1}</Card.Title>\n//                               <ul>\n//                                 {heat.competitors.map((competitor, idx) => (\n//                                   <Draggable\n//                                     key={competitor.id}\n//                                     draggableId={`competitor-${competitor.id}`}\n//                                     index={idx}\n//                                   >\n//                                     {(provided) => (\n//                                       <li\n//                                         ref={provided.innerRef}\n//                                         {...provided.draggableProps}\n//                                         {...provided.dragHandleProps}\n//                                       >\n//                                         {competitor.name}\n//                                       </li>\n//                                     )}\n//                                   </Draggable>\n//                                 ))}\n//                                 {provided.placeholder}\n//                               </ul>\n//                             </Card.Body>\n//                           </Card>\n//                         )}\n//                       </Droppable>\n//                     </Col>\n//                   ))}\n//                 </Row>\n//               </div>\n//             ))}\n//           </DragDropContext>\n//         </>\n//       ) : (\n//         <p className=\"mt-4\">\n//           Please select an event to manage competitors and judges.\n//         </p>\n//       )}\n//     </Container>\n//   );\n// };\n\n// export default EventManagement;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Container, Row, Col, Card, Button } from \"react-bootstrap\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport EventsList from \"./EventList\";\nimport CompetitorsList from \"./CompetitorList\";\nimport AddCompetitorForm from \"./AddCompetitorForm\";\nimport JudgesList from \"./JudgesList\";\nimport AddJudgeForm from \"./AddJudgeForm\";\nimport GeneratePDFButton from \"./GeneratePDFButton\";\nimport RoundsDisplay from \"./RoundsDisplay\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventManagement = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [competitors, setCompetitors] = useState([]);\n  const [judges, setJudges] = useState([]);\n  const [rounds, setRounds] = useState([]);\n  const [eventId, setEventId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\n  const [showRounds, setShowRounds] = useState(false);\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\n      setEvents(response.data);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    }\n  };\n  const fetchCompetitors = async (eventId, eventName) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\n      setCompetitors(response.data);\n      setEventId(eventId);\n      setSelectedEventName(eventName);\n    } catch (error) {\n      console.error(\"Error fetching competitors:\", error);\n    }\n  };\n  const fetchJudges = async eventId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\n      setJudges(response.data);\n    } catch (error) {\n      console.error(\"Error fetching judges:\", error);\n    }\n  };\n  const fetchRounds = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\n      const roundsData = response.data;\n      const processedRounds = roundsData.map(round => ({\n        id: round.id,\n        name: round.round_name,\n        category: round.category,\n        sub_category: round.sub_category,\n        board_type: round.board_type,\n        gender: round.gender,\n        age_category: round.age_category,\n        heats: (round.heats || []).map(heat => ({\n          id: heat.id,\n          name: heat.heat_name,\n          competitors: (heat.competitors || []).map(competitor => ({\n            id: competitor.id,\n            name: competitor.name\n          }))\n        }))\n      }));\n      setRounds(processedRounds);\n    } catch (error) {\n      console.error(\"Error fetching rounds:\", error);\n    }\n  };\n  const handleCreateEvent = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", {\n        name,\n        date,\n        location\n      });\n      alert(\"Event created successfully\");\n      setName(\"\");\n      setDate(\"\");\n      setLocation(\"\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      alert(\"Error creating event\");\n    }\n  };\n  const handleDeleteEvent = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\n      alert(\"Event deleted successfully\");\n      fetchEvents();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      alert(\"Error deleting event\");\n    }\n  };\n  const handleDeleteCompetitor = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\n      alert(\"Competitor deleted successfully\");\n      fetchCompetitors(eventId, selectedEventName);\n    } catch (error) {\n      console.error(\"Error deleting competitor:\", error);\n      alert(\"Error deleting competitor\");\n    }\n  };\n  const handleDeleteJudge = async id => {\n    try {\n      await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\n      alert(\"Judge deleted successfully\");\n      fetchJudges(eventId);\n    } catch (error) {\n      console.error(\"Error deleting judge:\", error);\n      alert(\"Error deleting judge\");\n    }\n  };\n  const handleSaveRounds = async () => {\n    try {\n      const roundsPayload = rounds.map(round => ({\n        name: round.name,\n        category: round.category,\n        sub_category: round.sub_category,\n        board_type: round.board_type,\n        gender: round.gender,\n        age_category: round.age_category,\n        heats: round.heats.map(heat => ({\n          id: heat.id,\n          heat_name: heat.name,\n          competitors: heat.competitors.map(competitor => ({\n            id: competitor.id,\n            name: competitor.name\n          }))\n        }))\n      }));\n      console.log(\"Rounds payload:\", roundsPayload);\n      const response = await axios.post(\"http://localhost:3000/event-admin/save-rounds\", {\n        eventId,\n        rounds: roundsPayload\n      });\n      alert(\"Rounds saved successfully\");\n\n      // Fetch and display the saved rounds\n      fetchRounds();\n    } catch (error) {\n      console.error(\"Error saving rounds:\", error);\n      alert(\"Error saving rounds\");\n    }\n  };\n  const handleCreateRounds = () => {\n    if (!eventId) {\n      alert(\"Please select an event first.\");\n      return;\n    }\n    const competitorsByCategory = {};\n    competitors.forEach(competitor => {\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\n      if (!competitorsByCategory[key]) {\n        competitorsByCategory[key] = [];\n      }\n      competitorsByCategory[key].push(competitor);\n    });\n    const newRounds = [];\n    Object.keys(competitorsByCategory).forEach(key => {\n      const competitorsList = competitorsByCategory[key];\n      const heats = [];\n      for (let i = 0; i < competitorsList.length; i += 4) {\n        const heatCompetitors = competitorsList.slice(i, i + 4);\n        heats.push({\n          id: `heat-${heats.length + 1}`,\n          name: `Heat ${heats.length + 1}`,\n          competitors: heatCompetitors\n        });\n      }\n      newRounds.push({\n        id: `round-${newRounds.length + 1}`,\n        name: `Round 1 (${key})`,\n        category: competitorsList[0].category,\n        sub_category: competitorsList[0].sub_category,\n        board_type: competitorsList[0].board_type,\n        gender: competitorsList[0].gender,\n        age_category: competitorsList[0].age_category,\n        heats\n      });\n    });\n    setRounds(newRounds);\n    console.log(\"Created rounds:\", newRounds);\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      return;\n    }\n    const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\n    const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\n    const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\n    const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\n    const sourceRound = rounds[sourceRoundIndex];\n    const destRound = rounds[destRoundIndex];\n    const sourceHeat = sourceRound.heats[sourceHeatIndex];\n    const destHeat = destRound.heats[destHeatIndex];\n    const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\n    destHeat.competitors.splice(destination.index, 0, movedCompetitor);\n    const newRounds = [...rounds];\n    newRounds[sourceRoundIndex] = {\n      ...sourceRound,\n      heats: [...sourceRound.heats]\n    };\n    newRounds[destRoundIndex] = {\n      ...destRound,\n      heats: [...destRound.heats]\n    };\n    setRounds(newRounds);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateEvent,\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Event Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: location,\n          onChange: e => setLocation(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mt-3\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events,\n      fetchCompetitors: (id, name) => {\n        setCompetitors([]);\n        fetchCompetitors(id, name);\n      },\n      fetchJudges: fetchJudges,\n      handleDeleteEvent: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 7\n    }, this), eventId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Competitors for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddCompetitorForm, {\n        eventId: eventId,\n        fetchCompetitors: fetchCompetitors,\n        selectedEventName: selectedEventName,\n        heats: rounds.flatMap(round => round.heats)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CompetitorsList, {\n        competitors: competitors,\n        selectedEventName: selectedEventName,\n        handleDeleteCompetitor: handleDeleteCompetitor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Manage Judges for \", selectedEventName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddJudgeForm, {\n        eventId: eventId,\n        fetchJudges: fetchJudges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(JudgesList, {\n        judges: judges,\n        selectedEventName: selectedEventName,\n        handleDeleteJudge: handleDeleteJudge\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mb-0\",\n        onClick: handleCreateRounds,\n        children: \"Create Round and Heat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mt-0\",\n        onClick: handleSaveRounds,\n        children: \"Save Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeneratePDFButton, {\n        eventId: eventId,\n        rounds: rounds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn btn-info mt-3\",\n        onClick: () => setShowRounds(!showRounds),\n        children: showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this), showRounds && /*#__PURE__*/_jsxDEV(RoundsDisplay, {\n        eventId: eventId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: rounds.map((round, roundIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4 mb-3\",\n            children: round.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: round.heats.map((heat, heatIndex) => /*#__PURE__*/_jsxDEV(Col, {\n              sm: 12,\n              md: 6,\n              lg: 4,\n              className: \"mb-4\",\n              children: /*#__PURE__*/_jsxDEV(Droppable, {\n                droppableId: `round-${roundIndex}-heat-${heatIndex}`,\n                children: provided => /*#__PURE__*/_jsxDEV(Card, {\n                  ref: provided.innerRef,\n                  ...provided.droppableProps,\n                  children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                      children: [\"Heat \", heatIndex + 1]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 716,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                      children: [heat.competitors.map((competitor, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n                        draggableId: `competitor-${competitor.id}`,\n                        index: idx,\n                        children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n                          ref: provided.innerRef,\n                          ...provided.draggableProps,\n                          ...provided.dragHandleProps,\n                          children: competitor.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 721,\n                          columnNumber: 39\n                        }, this)\n                      }, competitor.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 719,\n                        columnNumber: 35\n                      }, this)), provided.placeholder]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 717,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 715,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 714,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 712,\n                columnNumber: 23\n              }, this)\n            }, heatIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 17\n          }, this)]\n        }, roundIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: \"Please select an event to manage competitors and judges.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 653,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"QpMz5h/rPPcVbxZ9TOGfGBgzk6s=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Row","Col","Card","Button","DragDropContext","Droppable","Draggable","EventsList","CompetitorsList","AddCompetitorForm","JudgesList","AddJudgeForm","GeneratePDFButton","RoundsDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","EventManagement","_s","events","setEvents","competitors","setCompetitors","judges","setJudges","rounds","setRounds","eventId","setEventId","name","setName","date","setDate","location","setLocation","selectedEventName","setSelectedEventName","showRounds","setShowRounds","fetchEvents","response","get","data","error","console","fetchCompetitors","eventName","fetchJudges","fetchRounds","roundsData","processedRounds","map","round","id","round_name","category","sub_category","board_type","gender","age_category","heats","heat","heat_name","competitor","handleCreateEvent","e","preventDefault","post","alert","handleDeleteEvent","delete","handleDeleteCompetitor","handleDeleteJudge","handleSaveRounds","roundsPayload","log","handleCreateRounds","competitorsByCategory","forEach","key","push","newRounds","Object","keys","competitorsList","i","length","heatCompetitors","slice","onDragEnd","result","source","destination","sourceRoundIndex","parseInt","droppableId","split","sourceHeatIndex","destRoundIndex","destHeatIndex","sourceRound","destRound","sourceHeat","destHeat","movedCompetitor","splice","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","flatMap","onClick","roundIndex","heatIndex","sm","md","lg","provided","ref","innerRef","droppableProps","Body","Title","idx","draggableId","draggableProps","dragHandleProps","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/React_Projects/event-platform/client/src/components/EventManagement.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n// import EventsList from \"./EventList\";\r\n// import CompetitorsList from \"./CompetitorList\";\r\n// import AddCompetitorForm from \"./AddCompetitorForm\";\r\n// import JudgesList from \"./JudgesList\";\r\n// import AddJudgeForm from \"./AddJudgeForm\";\r\n// import GeneratePDFButton from \"./GeneratePDFButton\";\r\n// import RoundsDisplay from \"./RoundsDisplay\";\r\n\r\n// const categories = [\"Shortboard\", \"Longboard\"];\r\n// const subCategories = [\"Men\", \"Women\"];\r\n// const ageCategories = [\r\n//   \"Open\",\r\n//   \"Sub12\",\r\n//   \"Sub14\",\r\n//   \"Sub18\",\r\n//   \"Professional\",\r\n//   \"+40\",\r\n//   \"+45\",\r\n//   \"+50\",\r\n//   \"+60\",\r\n//   \"+65\",\r\n//   \"+70\",\r\n// ];\r\n\r\n// const EventManagement = () => {\r\n//   const [events, setEvents] = useState([]);\r\n//   const [competitors, setCompetitors] = useState([]);\r\n//   const [judges, setJudges] = useState([]);\r\n//   const [rounds, setRounds] = useState([]);\r\n//   const [eventId, setEventId] = useState(null);\r\n//   const [name, setName] = useState(\"\");\r\n//   const [date, setDate] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n//   const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n//   const [showRounds, setShowRounds] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchEvents();\r\n//   }, []);\r\n\r\n//   const fetchEvents = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         \"http://localhost:3000/event-admin/get-events\"\r\n//       );\r\n//       setEvents(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching events:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchCompetitors = async (eventId, eventName) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-competitors/${eventId}`\r\n//       );\r\n//       setCompetitors(response.data);\r\n//       setEventId(eventId);\r\n//       setSelectedEventName(eventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching competitors:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchJudges = async (eventId) => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:3000/event-admin/get-judges/${eventId}`\r\n//       );\r\n//       setJudges(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching judges:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateEvent = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/event-admin/create-event\", {\r\n//         name,\r\n//         date,\r\n//         location,\r\n//       });\r\n//       alert(\"Event created successfully\");\r\n//       setName(\"\");\r\n//       setDate(\"\");\r\n//       setLocation(\"\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error creating event:\", error);\r\n//       alert(\"Error creating event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteEvent = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-event/${id}`\r\n//       );\r\n//       alert(\"Event deleted successfully\");\r\n//       fetchEvents();\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting event:\", error);\r\n//       alert(\"Error deleting event\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteCompetitor = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-competitor/${id}`\r\n//       );\r\n//       alert(\"Competitor deleted successfully\");\r\n//       fetchCompetitors(eventId, selectedEventName);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting competitor:\", error);\r\n//       alert(\"Error deleting competitor\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteJudge = async (id) => {\r\n//     try {\r\n//       await axios.delete(\r\n//         `http://localhost:3000/event-admin/delete-judge/${id}`\r\n//       );\r\n//       alert(\"Judge deleted successfully\");\r\n//       fetchJudges(eventId);\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting judge:\", error);\r\n//       alert(\"Error deleting judge\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveRounds = async () => {\r\n//     try {\r\n//       const roundsPayload = rounds.map((round) => ({\r\n//         name: round.name,\r\n//         category: round.category,\r\n//         sub_category: round.sub_category,\r\n//         board_type: round.board_type,\r\n//         gender: round.gender,\r\n//         age_category: round.age_category,\r\n//         heats: round.heats.map((heat) => ({\r\n//           id: heat.id,\r\n//           heat_name: heat.name, // Ensure heat_name is correctly set\r\n//           competitors: heat.competitors.map((competitor) => ({\r\n//             id: competitor.id,\r\n//             name: competitor.name,\r\n//           })),\r\n//         })),\r\n//       }));\r\n\r\n//       console.log(\"Rounds payload:\", roundsPayload);\r\n\r\n//       const response = await axios.post(\r\n//         \"http://localhost:3000/event-admin/save-rounds\",\r\n//         {\r\n//           eventId,\r\n//           rounds: roundsPayload,\r\n//         }\r\n//       );\r\n\r\n//       alert(\"Rounds saved successfully\");\r\n\r\n//       // Update rounds state with the saved payload\r\n//       setRounds(roundsPayload);\r\n//     } catch (error) {\r\n//       console.error(\"Error saving rounds:\", error);\r\n//       alert(\"Error saving rounds\");\r\n//     }\r\n//   };\r\n\r\n//   const handleCreateRounds = () => {\r\n//     if (!eventId) {\r\n//       alert(\"Please select an event first.\");\r\n//       return;\r\n//     }\r\n\r\n//     const competitorsByCategory = {};\r\n\r\n//     competitors.forEach((competitor) => {\r\n//       const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n//       if (!competitorsByCategory[key]) {\r\n//         competitorsByCategory[key] = [];\r\n//       }\r\n//       competitorsByCategory[key].push(competitor);\r\n//     });\r\n\r\n//     const newRounds = [];\r\n\r\n//     Object.keys(competitorsByCategory).forEach((key) => {\r\n//       const competitorsList = competitorsByCategory[key];\r\n//       const heats = [];\r\n\r\n//       for (let i = 0; i < competitorsList.length; i += 4) {\r\n//         const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n//         heats.push({\r\n//           id: `heat-${heats.length + 1}`,\r\n//           name: `Heat ${heats.length + 1}`,\r\n//           competitors: heatCompetitors,\r\n//         });\r\n//       }\r\n\r\n//       newRounds.push({\r\n//         id: `round-${newRounds.length + 1}`,\r\n//         name: `Round 1 (${key})`,\r\n//         category: competitorsList[0].category,\r\n//         sub_category: competitorsList[0].sub_category,\r\n//         board_type: competitorsList[0].board_type,\r\n//         gender: competitorsList[0].gender,\r\n//         age_category: competitorsList[0].age_category,\r\n//         heats,\r\n//       });\r\n//     });\r\n\r\n//     setRounds(newRounds);\r\n//     console.log(\"Created rounds:\", newRounds);\r\n//   };\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { source, destination } = result;\r\n\r\n//     if (!destination) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\r\n//     const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\r\n//     const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\r\n//     const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\r\n\r\n//     const sourceRound = rounds[sourceRoundIndex];\r\n//     const destRound = rounds[destRoundIndex];\r\n//     const sourceHeat = sourceRound.heats[sourceHeatIndex];\r\n//     const destHeat = destRound.heats[destHeatIndex];\r\n\r\n//     const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\r\n//     destHeat.competitors.splice(destination.index, 0, movedCompetitor);\r\n\r\n//     const newRounds = [...rounds];\r\n//     newRounds[sourceRoundIndex] = {\r\n//       ...sourceRound,\r\n//       heats: [...sourceRound.heats],\r\n//     };\r\n//     newRounds[destRoundIndex] = { ...destRound, heats: [...destRound.heats] };\r\n\r\n//     setRounds(newRounds);\r\n\r\n//     console.log(\"Updated rounds after drag and drop:\", newRounds);\r\n//   };\r\n\r\n//   return (\r\n//     <Container className=\"mt-5\">\r\n//       <h2>Manage Events</h2>\r\n//       <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n//         <div className=\"form-group\">\r\n//           <label>Event Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={name}\r\n//             onChange={(e) => setName(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             className=\"form-control\"\r\n//             value={date}\r\n//             onChange={(e) => setDate(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group mt-3\">\r\n//           <label>Location:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={location}\r\n//             onChange={(e) => setLocation(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n//           Create Event\r\n//         </button>\r\n//       </form>\r\n\r\n//       <EventsList\r\n//         events={events}\r\n//         fetchCompetitors={(id, name) => {\r\n//           setCompetitors([]);\r\n//           fetchCompetitors(id, name);\r\n//         }}\r\n//         fetchJudges={fetchJudges}\r\n//         handleDeleteEvent={handleDeleteEvent}\r\n//       />\r\n\r\n//       {eventId ? (\r\n//         <>\r\n//           <h3>Manage Competitors for {selectedEventName}</h3>\r\n//           <AddCompetitorForm\r\n//             eventId={eventId}\r\n//             fetchCompetitors={fetchCompetitors}\r\n//             selectedEventName={selectedEventName}\r\n//             heats={rounds.flatMap((round) => round.heats)}\r\n//           />\r\n\r\n//           <CompetitorsList\r\n//             competitors={competitors}\r\n//             selectedEventName={selectedEventName}\r\n//             handleDeleteCompetitor={handleDeleteCompetitor}\r\n//           />\r\n\r\n//           <h3>Manage Judges for {selectedEventName}</h3>\r\n//           <AddJudgeForm eventId={eventId} fetchJudges={fetchJudges} />\r\n\r\n//           <JudgesList\r\n//             judges={judges}\r\n//             selectedEventName={selectedEventName}\r\n//             handleDeleteJudge={handleDeleteJudge}\r\n//           />\r\n\r\n//           <h3>Rounds</h3>\r\n//           <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n//             Create Round and Heat\r\n//           </button>\r\n//           <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n//             Save Rounds\r\n//           </button>\r\n//           <GeneratePDFButton eventId={eventId} rounds={rounds} />\r\n\r\n//           <Button\r\n//             className=\"btn btn-info mt-3\"\r\n//             onClick={() => setShowRounds(!showRounds)}\r\n//           >\r\n//             {showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"}\r\n//           </Button>\r\n\r\n//           {showRounds && <RoundsDisplay eventId={eventId} />}\r\n\r\n//           <DragDropContext onDragEnd={onDragEnd}>\r\n//             {rounds.map((round, roundIndex) => (\r\n//               <div key={roundIndex}>\r\n//                 <h4 className=\"mt-4 mb-3\">{round.name}</h4>\r\n//                 <Row>\r\n//                   {round.heats.map((heat, heatIndex) => (\r\n//                     <Col key={heatIndex} sm={12} md={6} lg={4} className=\"mb-4\">\r\n//                       <Droppable\r\n//                         droppableId={`round-${roundIndex}-heat-${heatIndex}`}\r\n//                       >\r\n//                         {(provided) => (\r\n//                           <Card\r\n//                             ref={provided.innerRef}\r\n//                             {...provided.droppableProps}\r\n//                           >\r\n//                             <Card.Body>\r\n//                               <Card.Title>Heat {heatIndex + 1}</Card.Title>\r\n//                               <ul>\r\n//                                 {heat.competitors.map((competitor, idx) => (\r\n//                                   <Draggable\r\n//                                     key={competitor.id}\r\n//                                     draggableId={`competitor-${competitor.id}`}\r\n//                                     index={idx}\r\n//                                   >\r\n//                                     {(provided) => (\r\n//                                       <li\r\n//                                         ref={provided.innerRef}\r\n//                                         {...provided.draggableProps}\r\n//                                         {...provided.dragHandleProps}\r\n//                                       >\r\n//                                         {competitor.name}\r\n//                                       </li>\r\n//                                     )}\r\n//                                   </Draggable>\r\n//                                 ))}\r\n//                                 {provided.placeholder}\r\n//                               </ul>\r\n//                             </Card.Body>\r\n//                           </Card>\r\n//                         )}\r\n//                       </Droppable>\r\n//                     </Col>\r\n//                   ))}\r\n//                 </Row>\r\n//               </div>\r\n//             ))}\r\n//           </DragDropContext>\r\n//         </>\r\n//       ) : (\r\n//         <p className=\"mt-4\">\r\n//           Please select an event to manage competitors and judges.\r\n//         </p>\r\n//       )}\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default EventManagement;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Row, Col, Card, Button } from \"react-bootstrap\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport EventsList from \"./EventList\";\r\nimport CompetitorsList from \"./CompetitorList\";\r\nimport AddCompetitorForm from \"./AddCompetitorForm\";\r\nimport JudgesList from \"./JudgesList\";\r\nimport AddJudgeForm from \"./AddJudgeForm\";\r\nimport GeneratePDFButton from \"./GeneratePDFButton\";\r\nimport RoundsDisplay from \"./RoundsDisplay\";\r\n\r\nconst EventManagement = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [competitors, setCompetitors] = useState([]);\r\n  const [judges, setJudges] = useState([]);\r\n  const [rounds, setRounds] = useState([]);\r\n  const [eventId, setEventId] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [selectedEventName, setSelectedEventName] = useState(\"\");\r\n  const [showRounds, setShowRounds] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:3000/event-admin/get-events\");\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching events:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchCompetitors = async (eventId, eventName) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/event-admin/get-competitors/${eventId}`);\r\n      setCompetitors(response.data);\r\n      setEventId(eventId);\r\n      setSelectedEventName(eventName);\r\n    } catch (error) {\r\n      console.error(\"Error fetching competitors:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchJudges = async (eventId) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/event-admin/get-judges/${eventId}`);\r\n      setJudges(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching judges:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchRounds = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/event-admin/get-rounds/${eventId}`);\r\n      const roundsData = response.data;\r\n\r\n      const processedRounds = roundsData.map((round) => ({\r\n        id: round.id,\r\n        name: round.round_name,\r\n        category: round.category,\r\n        sub_category: round.sub_category,\r\n        board_type: round.board_type,\r\n        gender: round.gender,\r\n        age_category: round.age_category,\r\n        heats: (round.heats || []).map((heat) => ({\r\n          id: heat.id,\r\n          name: heat.heat_name,\r\n          competitors: (heat.competitors || []).map((competitor) => ({\r\n            id: competitor.id,\r\n            name: competitor.name,\r\n          })),\r\n        })),\r\n      }));\r\n\r\n      setRounds(processedRounds);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rounds:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCreateEvent = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post(\"http://localhost:3000/event-admin/create-event\", { name, date, location });\r\n      alert(\"Event created successfully\");\r\n      setName(\"\");\r\n      setDate(\"\");\r\n      setLocation(\"\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error creating event:\", error);\r\n      alert(\"Error creating event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/event-admin/delete-event/${id}`);\r\n      alert(\"Event deleted successfully\");\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n      alert(\"Error deleting event\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteCompetitor = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/event-admin/delete-competitor/${id}`);\r\n      alert(\"Competitor deleted successfully\");\r\n      fetchCompetitors(eventId, selectedEventName);\r\n    } catch (error) {\r\n      console.error(\"Error deleting competitor:\", error);\r\n      alert(\"Error deleting competitor\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteJudge = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/event-admin/delete-judge/${id}`);\r\n      alert(\"Judge deleted successfully\");\r\n      fetchJudges(eventId);\r\n    } catch (error) {\r\n      console.error(\"Error deleting judge:\", error);\r\n      alert(\"Error deleting judge\");\r\n    }\r\n  };\r\n\r\n  const handleSaveRounds = async () => {\r\n    try {\r\n      const roundsPayload = rounds.map((round) => ({\r\n        name: round.name,\r\n        category: round.category,\r\n        sub_category: round.sub_category,\r\n        board_type: round.board_type,\r\n        gender: round.gender,\r\n        age_category: round.age_category,\r\n        heats: round.heats.map((heat) => ({\r\n          id: heat.id,\r\n          heat_name: heat.name,\r\n          competitors: heat.competitors.map((competitor) => ({\r\n            id: competitor.id,\r\n            name: competitor.name,\r\n          })),\r\n        })),\r\n      }));\r\n\r\n      console.log(\"Rounds payload:\", roundsPayload);\r\n\r\n      const response = await axios.post(\"http://localhost:3000/event-admin/save-rounds\", { eventId, rounds: roundsPayload });\r\n      alert(\"Rounds saved successfully\");\r\n\r\n      // Fetch and display the saved rounds\r\n      fetchRounds();\r\n    } catch (error) {\r\n      console.error(\"Error saving rounds:\", error);\r\n      alert(\"Error saving rounds\");\r\n    }\r\n  };\r\n\r\n  const handleCreateRounds = () => {\r\n    if (!eventId) {\r\n      alert(\"Please select an event first.\");\r\n      return;\r\n    }\r\n\r\n    const competitorsByCategory = {};\r\n\r\n    competitors.forEach((competitor) => {\r\n      const key = `${competitor.category}-${competitor.sub_category}-${competitor.board_type}-${competitor.gender}-${competitor.age_category}`;\r\n      if (!competitorsByCategory[key]) {\r\n        competitorsByCategory[key] = [];\r\n      }\r\n      competitorsByCategory[key].push(competitor);\r\n    });\r\n\r\n    const newRounds = [];\r\n\r\n    Object.keys(competitorsByCategory).forEach((key) => {\r\n      const competitorsList = competitorsByCategory[key];\r\n      const heats = [];\r\n\r\n      for (let i = 0; i < competitorsList.length; i += 4) {\r\n        const heatCompetitors = competitorsList.slice(i, i + 4);\r\n\r\n        heats.push({\r\n          id: `heat-${heats.length + 1}`,\r\n          name: `Heat ${heats.length + 1}`,\r\n          competitors: heatCompetitors,\r\n        });\r\n      }\r\n\r\n      newRounds.push({\r\n        id: `round-${newRounds.length + 1}`,\r\n        name: `Round 1 (${key})`,\r\n        category: competitorsList[0].category,\r\n        sub_category: competitorsList[0].sub_category,\r\n        board_type: competitorsList[0].board_type,\r\n        gender: competitorsList[0].gender,\r\n        age_category: competitorsList[0].age_category,\r\n        heats,\r\n      });\r\n    });\r\n\r\n    setRounds(newRounds);\r\n    console.log(\"Created rounds:\", newRounds);\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    const sourceRoundIndex = parseInt(source.droppableId.split(\"-\")[1]);\r\n    const sourceHeatIndex = parseInt(source.droppableId.split(\"-\")[3]);\r\n    const destRoundIndex = parseInt(destination.droppableId.split(\"-\")[1]);\r\n    const destHeatIndex = parseInt(destination.droppableId.split(\"-\")[3]);\r\n\r\n    const sourceRound = rounds[sourceRoundIndex];\r\n    const destRound = rounds[destRoundIndex];\r\n    const sourceHeat = sourceRound.heats[sourceHeatIndex];\r\n    const destHeat = destRound.heats[destHeatIndex];\r\n\r\n    const [movedCompetitor] = sourceHeat.competitors.splice(source.index, 1);\r\n    destHeat.competitors.splice(destination.index, 0, movedCompetitor);\r\n\r\n    const newRounds = [...rounds];\r\n    newRounds[sourceRoundIndex] = {\r\n      ...sourceRound,\r\n      heats: [...sourceRound.heats],\r\n    };\r\n    newRounds[destRoundIndex] = { ...destRound, heats: [...destRound.heats] };\r\n\r\n    setRounds(newRounds);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <h2>Manage Events</h2>\r\n      <form onSubmit={handleCreateEvent} className=\"mb-4\">\r\n        <div className=\"form-group\">\r\n          <label>Event Name:</label>\r\n          <input type=\"text\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} required />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Date:</label>\r\n          <input type=\"date\" className=\"form-control\" value={date} onChange={(e) => setDate(e.target.value)} required />\r\n        </div>\r\n        <div className=\"form-group mt-3\">\r\n          <label>Location:</label>\r\n          <input type=\"text\" className=\"form-control\" value={location} onChange={(e) => setLocation(e.target.value)} required />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary mt-3\">\r\n          Create Event\r\n        </button>\r\n      </form>\r\n\r\n      <EventsList events={events} fetchCompetitors={(id, name) => {\r\n        setCompetitors([]);\r\n        fetchCompetitors(id, name);\r\n      }} fetchJudges={fetchJudges} handleDeleteEvent={handleDeleteEvent} />\r\n\r\n      {eventId ? (\r\n        <>\r\n          <h3>Manage Competitors for {selectedEventName}</h3>\r\n          <AddCompetitorForm eventId={eventId} fetchCompetitors={fetchCompetitors} selectedEventName={selectedEventName} heats={rounds.flatMap((round) => round.heats)} />\r\n\r\n          <CompetitorsList competitors={competitors} selectedEventName={selectedEventName} handleDeleteCompetitor={handleDeleteCompetitor} />\r\n\r\n          <h3>Manage Judges for {selectedEventName}</h3>\r\n          <AddJudgeForm eventId={eventId} fetchJudges={fetchJudges} />\r\n\r\n          <JudgesList judges={judges} selectedEventName={selectedEventName} handleDeleteJudge={handleDeleteJudge} />\r\n\r\n          <h3>Rounds</h3>\r\n          <button className=\"btn btn-primary mb-0\" onClick={handleCreateRounds}>\r\n            Create Round and Heat\r\n          </button>\r\n          <button className=\"btn btn-success mt-0\" onClick={handleSaveRounds}>\r\n            Save Rounds\r\n          </button>\r\n          <GeneratePDFButton eventId={eventId} rounds={rounds} />\r\n\r\n          <Button className=\"btn btn-info mt-3\" onClick={() => setShowRounds(!showRounds)}>\r\n            {showRounds ? \"Hide Saved Rounds\" : \"View Saved Rounds\"}\r\n          </Button>\r\n\r\n          {showRounds && <RoundsDisplay eventId={eventId} />}\r\n\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            {rounds.map((round, roundIndex) => (\r\n              <div key={roundIndex}>\r\n                <h4 className=\"mt-4 mb-3\">{round.name}</h4>\r\n                <Row>\r\n                  {round.heats.map((heat, heatIndex) => (\r\n                    <Col key={heatIndex} sm={12} md={6} lg={4} className=\"mb-4\">\r\n                      <Droppable droppableId={`round-${roundIndex}-heat-${heatIndex}`}>\r\n                        {(provided) => (\r\n                          <Card ref={provided.innerRef} {...provided.droppableProps}>\r\n                            <Card.Body>\r\n                              <Card.Title>Heat {heatIndex + 1}</Card.Title>\r\n                              <ul>\r\n                                {heat.competitors.map((competitor, idx) => (\r\n                                  <Draggable key={competitor.id} draggableId={`competitor-${competitor.id}`} index={idx}>\r\n                                    {(provided) => (\r\n                                      <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                        {competitor.name}\r\n                                      </li>\r\n                                    )}\r\n                                  </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                              </ul>\r\n                            </Card.Body>\r\n                          </Card>\r\n                        )}\r\n                      </Droppable>\r\n                    </Col>\r\n                  ))}\r\n                </Row>\r\n              </div>\r\n            ))}\r\n          </DragDropContext>\r\n        </>\r\n      ) : (\r\n        <p className=\"mt-4\">Please select an event to manage competitors and judges.</p>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QAAQ,iBAAiB;AACnE,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,eAAe,MAAM,kBAAkB;AAC9C,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGzB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}